"""
üîÑ –ö–æ–º–∞–Ω–¥–∞ order_change - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–æ–∫
==================================================
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–æ–∫
—Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º.
"""
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timezone, timedelta
import traceback

from db import db
from logger import logger, log_system, log_user, log_func, log_db, log_warning, log_error
from permissions import is_admin_or_superadmin, is_superadmin
from utils import fmt_0

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º BALI_TZ –ª–æ–∫–∞–ª—å–Ω–æ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
BALI_TZ = timezone(timedelta(hours=8))

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∫–æ–º–∞–Ω–¥—ã order_change
class OrderChangeStates(StatesGroup):
    waiting_for_confirmation = State()

# –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫
ALL_STATUSES = {
    'created': '‚ö™ created - —Å–æ–∑–¥–∞–Ω–∞',
    'control': 'üü° control - –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ',
    'accept': 'üîµ accept - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞',
    'bill': 'üü£ bill - –≤ —Å—á–µ—Ç–µ',
    'accounted': 'üü¢ accounted - –æ–ø–ª–∞—á–µ–Ω–∞',
    'timeout': 'üü§ timeout - –∏—Å—Ç–µ–∫–ª–∞',
    'cancel': '‚ö´ cancel - –æ—Ç–º–µ–Ω–µ–Ω–∞',
    'night': 'üåô night - –Ω–æ—á–Ω–æ–π –∑–∞–ø—Ä–æ—Å',
}

# –°—Ç–∞—Ç—É—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –æ–±—ã—á–Ω—ã–º –∞–¥–º–∏–Ω–∞–º
RESTRICTED_STATUSES = ['accounted', 'bill']

async def format_order_card(transaction: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    order_number = transaction.get('transaction_number', 'N/A')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞
    is_refund = int(transaction.get('idr_amount', 0)) < 0 or int(transaction.get('rub_amount', 0)) < 0
    idr = abs(int(transaction.get('idr_amount', 0)))
    rub = abs(int(transaction.get('rub_amount', 0)))
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = []
    lines.append(f"<b>üìã –ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏ ‚Ññ <code>{order_number}</code></b>")
    
    if is_refund:
        lines.append(f"\n<b>–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> {fmt_0(rub)} RUB ‚èÆ {fmt_0(idr)} IDR")
    else:
        lines.append(f"\n<b>–°—É–º–º–∞:</b> {fmt_0(idr)} IDR ‚èÆ {fmt_0(rub)} RUB")
    
    # –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
    current_status = transaction.get('status', '-')
    status_display = ALL_STATUSES.get(current_status, current_status)
    lines.append(f"\n<b>üîÑ –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {status_display}")
    
    # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ
    note = transaction.get('note', '-')
    if not note:
        note = '-'
    lines.append(f"\n<b>üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {note}")
    
    # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    history = transaction.get('history', '')
    hist_lines = []
    if history:
        events = history.split('%%%')
        prev_time = None
        for idx, ev in enumerate(events):
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ $ –∏ & –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            if '$' in ev:
                parts = ev.split('$', 3)
            else:
                parts = ev.split('&', 3)
            
            if len(parts) < 4:
                if idx == 0 and ev.strip():
                    hist_lines.append(f"{ev.strip()} (—Å–æ–∑–¥–∞–Ω–æ)")
                continue
            
            dt_str, user, status, link = [p.strip() for p in parts]
            try:
                dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
                dt_bali = dt.replace(tzinfo=timezone.utc).astimezone(BALI_TZ)
            except Exception:
                dt = None
                dt_bali = None
            
            status_disp = ALL_STATUSES.get(status, status)
            time_str = dt_bali.strftime("%H:%M") if dt_bali else "--:--"
            
            if idx == 0:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–∞—Ç–∞ –¥–¥.–º–º.–≥–≥
                date_str = dt_bali.strftime("%d.%m.%y") if dt_bali else "--.--.--"
                hist_lines.append(f"{date_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            else:
                # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
                if prev_time and dt:
                    delta = dt - prev_time
                    total_seconds = int(delta.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    seconds = total_seconds % 60
                    delta_str = f"+{hours:02}:{minutes:02}:{seconds:02}"
                else:
                    delta_str = "+--:--:--"
                hist_lines.append(f"{delta_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            prev_time = dt
    
    if hist_lines:
        lines.append("\n<b>üìú –•—Ä–æ–Ω–æ–ª–æ–≥–∏—è:</b>")
        lines.extend(hist_lines)
    
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    acc_info = transaction.get('account_info', '-')
    lines.append(f"\n<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {acc_info}")
    
    return '\n'.join(lines)

def create_status_keyboard(current_status: str, is_superadmin: bool) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    keyboard_buttons = []
    
    for status, display_name in ALL_STATUSES.items():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if status == current_status:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        if status in RESTRICTED_STATUSES and not is_superadmin:
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–æ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        button_text = f"{display_name}"
        callback_data = f"order_change_status_{status}"
        
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="order_change_cancel")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

@router.message(Command("order_change"))
async def cmd_order_change(message: Message, state: FSMContext):
    """üîÑ –ö–æ–º–∞–Ω–¥–∞ order_change - –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏"""
    log_user(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /order_change –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_id = message.from_user.id
    if not await is_admin_or_superadmin(user_id):
        log_warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /order_change –±–µ–∑ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    args = (message.text or "").strip().split()
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            "–ü–†–ò–ß–ò–ù–ê: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.\n\n"
            "üìù <b>–û–±—Ä–∞–∑–µ—Ü –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/order_change 2506123456789</code>",
            parse_mode="HTML"
        )
        return
    
    order_number = args[1].strip()
    log_func(f"–ó–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –∑–∞—è–≤–∫–∏ {order_number}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not db.pool:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    transaction = await db.get_transaction_by_number(order_number)
    if not transaction:
        await message.reply(
            "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            "–ü–†–ò–ß–ò–ù–ê: –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    current_status = transaction.get('status', '')
    is_superadmin_user = await is_superadmin(user_id)
    
    # –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤
    if current_status in RESTRICTED_STATUSES and not is_superadmin_user:
        status_display = ALL_STATUSES.get(current_status, current_status)
        await message.reply(
            f"üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            f"–ü–†–ò–ß–ò–ù–ê: –∑–∞—è–≤–∫–∞ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å <b>{status_display}</b>.\n\n"
            f"‚ö†Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∏–ª–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã –∑–∞—è–≤–æ–∫ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.",
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏
    order_card = await format_order_card(transaction)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    keyboard = create_status_keyboard(current_status, is_superadmin_user)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    current_status_display = ALL_STATUSES.get(current_status, current_status)
    message_text = (
        f"üîÑ <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ó–ê–Ø–í–ö–ò</b>\n\n"
        f"{order_card}\n\n"
    
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: <b>{current_status_display}</b>\n"

        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏:</b>\n\n"
        f"‚Äº‚Äº <b>–í–ù–ò–ú–ê–ù–ò–ï: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏! –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ !!!</b>\n"
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        order_number=order_number,
        current_status=current_status,
        user_id=user_id,
        is_superadmin=is_superadmin_user
    )
    
    await message.reply(message_text, reply_markup=keyboard, parse_mode="HTML")
    log_func(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏ {order_number} —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

@router.callback_query(lambda c: c.data.startswith("order_change_status_"))
async def order_change_status_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"""
    log_user(f"–í—ã–±—Ä–∞–Ω –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_number = data.get('order_number')
    current_status = data.get('current_status')
    user_id = data.get('user_id')
    is_superadmin = data.get('is_superadmin')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if call.from_user.id != user_id:
        await call.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    new_status = call.data.split("_")[-1]
    new_status_display = ALL_STATUSES.get(new_status, new_status)
    current_status_display = ALL_STATUSES.get(current_status, current_status)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"‚ö†Ô∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø –°–¢–ê–¢–£–°–ê</b>\n\n"
        f"üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_number}</code>\n\n"
        f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b>\n {current_status_display} ‚Üí‚Üí‚Üí {new_status_display}\n\n"
        f"üë§ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {call.from_user.full_name}\n\n"
    )
    
    # –û—Å–æ–±–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫
    if is_superadmin and current_status in RESTRICTED_STATUSES:
        confirm_text += (
            f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï! –í–´ –ú–ï–ù–Ø–ï–¢–ï –°–¢–ê–¢–£–° –û–ü–õ–ê–ß–ï–ù–ù–û–ô –ò–õ–ò –û–ñ–ò–î–ê–Æ–©–ï–ô –û–ü–õ–ê–¢–´ –ó–ê–Ø–í–ö–ò!</b>\n\n"
        )
    
    confirm_text += "<b>‚Åâ –í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏?</b>"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –∏–∑–º–µ–Ω–∏—Ç—å", callback_data=f"order_change_confirm_{new_status}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="order_change_cancel")
        ]
    ])
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(new_status=new_status)
    await state.set_state(OrderChangeStates.waiting_for_confirmation)
    
    await call.message.edit_text(confirm_text, reply_markup=keyboard, parse_mode="HTML")
    await call.answer()
    log_func(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ {current_status} ‚Üí {new_status}")

@router.callback_query(lambda c: c.data.startswith("order_change_confirm_"))
async def order_change_confirm_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    log_user(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    order_number = data.get('order_number')
    current_status = data.get('current_status')
    new_status = data.get('new_status')
    user_id = data.get('user_id')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if call.from_user.id != user_id:
        await call.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    try:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
        await db.update_transaction_status(order_number, new_status, now_utc)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        user_nick = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_id = call.message.chat.id
        msg_id = call.message.message_id
        if call.message.chat.username:
            link = f"https://t.me/{call.message.chat.username}/{msg_id}"
        else:
            chat_id_num = str(chat_id)
            if chat_id_num.startswith('-100'):
                chat_id_num = chat_id_num[4:]
            elif chat_id_num.startswith('-'):
                chat_id_num = chat_id_num[1:]
            link = f"https://t.me/c/{chat_id_num}/{msg_id}"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
        history_entry = f"{now_str}${user_nick} —Å–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å${new_status}${link}"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        transaction = await db.get_transaction_by_number(order_number)
        old_history = transaction.get('history', '') if transaction else ''
        new_history = old_history + "%%%" + history_entry if old_history else history_entry
        
        await db.update_transaction_history(order_number, new_history)
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ
        new_status_display = ALL_STATUSES.get(new_status, new_status)
        current_status_display = ALL_STATUSES.get(current_status, current_status)
        
        success_text = (
            f"‚úÖ <b>–°–¢–ê–¢–£–° –ó–ê–Ø–í–ö–ò –ò–ó–ú–ï–ù–ï–ù!</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∞:</b> <code>{order_number}</code>\n"
            f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ:</b> {current_status_display} ‚Üí {new_status_display}\n"
            f"üë§ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {user_nick}\n"
            f"‚è∞ <b>–í—Ä–µ–º—è:</b> {now_str}\n\n"
            f"üìù <b>–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞—è–≤–∫–∏</b>"
        )
        
        await call.message.edit_text(success_text, parse_mode="HTML")
        await call.answer("‚úÖ –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        log_system(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {order_number} –∏–∑–º–µ–Ω–µ–Ω: {current_status} ‚Üí {new_status} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} ({user_nick})")
        log_db(f"[DB] update_transaction_status: {order_number} = {new_status}")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {order_number}: {e}")
        await call.message.edit_text(
            "‚ùå <b>–û–®–ò–ë–ö–ê –ü–†–ò –ò–ó–ú–ï–ù–ï–ù–ò–ò –°–¢–ê–¢–£–°–ê</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )
        await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!", show_alert=True)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()

@router.callback_query(lambda c: c.data == "order_change_cancel")
async def order_change_cancel_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞"""
    log_user(f"–û—Ç–º–µ–Ω–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {call.from_user.id}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    user_id = data.get('user_id')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if call.from_user.id != user_id:
        await call.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    await call.message.edit_text(
        "‚ùå <b>–ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –û–¢–ú–ï–ù–ï–ù–û</b>\n\n"
        "–û–ø–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        parse_mode="HTML"
    )
    await call.answer("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear() 