from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from logger import log_func, log_error
import aiohttp
import random
import asyncio
from typing import Optional

router = Router()

async def get_meme_from_api() -> Optional[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–º —á–µ—Ä–µ–∑ API"""
    try:
        log_func("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –º–µ–º —á–µ—Ä–µ–∑ API")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –º–µ–º–æ–≤
        url = "https://meme-api.com/gimme"
        
        async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=10)) as session:
            async with session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    return {
                        "title": data.get("title", "–ú–µ–º"),
                        "url": data.get("url", ""),
                        "author": data.get("author", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "subreddit": data.get("subreddit", ""),
                        "source": "Reddit API"
                    }
                        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞ —á–µ—Ä–µ–∑ API: {e}")
    
    return None

async def get_meme_from_local_cache() -> Optional[dict]:
    """–ü–æ–ª—É—á–∏—Ç—å –º–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞"""
    local_memes = [
        {
            "title": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ —Ä–∞–±–æ—Ç–µ",
            "url": "https://picsum.photos/400/300?random=1",
            "author": "Local Cache",
            "subreddit": "programming",
            "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"
        },
        {
            "title": "Git –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏",
            "url": "https://picsum.photos/400/300?random=2", 
            "author": "Local Cache", 
            "subreddit": "programming",
            "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"
        },
        {
            "title": "Python vs JavaScript",
            "url": "https://picsum.photos/400/300?random=3",
            "author": "Local Cache",
            "subreddit": "programming", 
            "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"
        },
        {
            "title": "–û—Ç–ª–∞–¥–∫–∞ –∫–æ–¥–∞",
            "url": "https://picsum.photos/400/300?random=4",
            "author": "Local Cache",
            "subreddit": "programming",
            "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"
        },
        {
            "title": "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∫–æ–¥–µ",
            "url": "https://picsum.photos/400/300?random=5",
            "author": "Local Cache",
            "subreddit": "programming",
            "source": "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à"
        }
    ]
    
    return random.choice(local_memes)

async def get_random_meme() -> dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    log_func("–ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º API
    meme = await get_meme_from_api()
    if meme and meme.get('url'):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –≤—ã–≥–ª—è–¥–∏—Ç –≤–∞–ª–∏–¥–Ω—ã–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        url = meme['url'].lower()
        if any(ext in url for ext in ['.jpg', '.jpeg', '.png', '.gif', '.webp']):
            log_func(f"API –≤–µ—Ä–Ω—É–ª –≤–∞–ª–∏–¥–Ω—ã–π –º–µ–º: {meme['title']}")
            return meme
        else:
            log_func(f"API –≤–µ—Ä–Ω—É–ª –º–µ–º —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º URL: {meme['url']}, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à")
    
    # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL, –±–µ—Ä–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞
    meme = await get_meme_from_local_cache()
    if meme:
        log_func(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞: {meme['title']}")
        return meme
    
    # Fallback
    log_func("–ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –º–µ–º")
    return {
        "title": "–ú–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
        "url": "https://picsum.photos/400/300?random=999",
        "author": "System",
        "subreddit": "general",
        "source": "Fallback"
    }

@router.message(Command("meme"))
async def cmd_meme(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞"""
    loading_msg = None
    try:
        log_func(f"–ó–∞–ø—Ä–æ—Å –º–µ–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.reply("üé≠ –ò—â—É –¥–ª—è –≤–∞—Å –º–µ–º...")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ–º
        meme_data = await get_random_meme()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_text = (
            f"üé≠ <b>–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º</b>\n\n"
            f"üìù <b>{meme_data['title']}</b>\n"
            f"üë§ <i>–ê–≤—Ç–æ—Ä: {meme_data['author']}</i>\n"
            f"üìÇ <i>–°–æ–æ–±—â–µ—Å—Ç–≤–æ: r/{meme_data['subreddit']}</i>\n"
            f"üì° <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {meme_data['source']}</i>"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        if loading_msg:
            try:
                await loading_msg.delete()
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
        try:
            await message.reply_photo(
                photo=meme_data['url'],
                caption=response_text,
                parse_mode="HTML"
            )
        except Exception as photo_error:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–µ–º–∞: {photo_error}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª API –º–µ–º, –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
            if meme_data['source'] == "Reddit API":
                log_func("–ü—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ API")
                try:
                    local_meme = await get_meme_from_local_cache()
                    if local_meme:
                        local_response_text = (
                            f"üé≠ <b>–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º (–ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à)</b>\n\n"
                            f"üìù <b>{local_meme['title']}</b>\n"
                            f"üë§ <i>–ê–≤—Ç–æ—Ä: {local_meme['author']}</i>\n"
                            f"üìÇ <i>–°–æ–æ–±—â–µ—Å—Ç–≤–æ: r/{local_meme['subreddit']}</i>\n"
                            f"üì° <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {local_meme['source']}</i>"
                        )
                        
                        await message.reply_photo(
                            photo=local_meme['url'],
                            caption=local_response_text,
                            parse_mode="HTML"
                        )
                        log_func(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –º–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
                        return
                except Exception as local_error:
                    log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–º–∞: {local_error}")
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
            fallback_text = (
                f"üé≠ <b>–°–ª—É—á–∞–π–Ω—ã–π –º–µ–º</b>\n\n"
                f"üìù <b>{meme_data['title']}</b>\n"
                f"üë§ <i>–ê–≤—Ç–æ—Ä: {meme_data['author']}</i>\n"
                f"üìÇ <i>–°–æ–æ–±—â–µ—Å—Ç–≤–æ: r/{meme_data['subreddit']}</i>\n"
                f"üì° <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {meme_data['source']}</i>\n\n"
                f"üîó <a href=\"{meme_data['url']}\">–°—Å—ã–ª–∫–∞ –Ω–∞ –º–µ–º</a>"
            )
            await message.reply(fallback_text, parse_mode="HTML")
        
        log_func(f"–ú–µ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–º–∞: {e}")
        error_text = (
            "üòÖ <b>–£–ø—Å!</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ–º.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ! üòÑ"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if loading_msg:
            try:
                await loading_msg.edit_text(error_text, parse_mode="HTML")
            except Exception as edit_error:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {edit_error}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await message.reply(error_text, parse_mode="HTML")
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏
        else:
            try:
                await message.reply(error_text, parse_mode="HTML")
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ 