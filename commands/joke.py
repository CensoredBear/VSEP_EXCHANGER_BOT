from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from logger import log_func, log_error
from joke_parser import get_joke_with_source

router = Router()

@router.message(Command("joke"))
async def cmd_joke(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞"""
    try:
        log_func(f"–ó–∞–ø—Ä–æ—Å –∞–Ω–µ–∫–¥–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        loading_msg = await message.reply("üé≠ –ò—â—É –¥–ª—è –≤–∞—Å –∞–Ω–µ–∫–¥–æ—Ç...")
        joke_data = await get_joke_with_source()
        joke_text = joke_data["joke"]
        source = joke_data["source"]
        if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in joke_text.lower():
            emoji = "üíª"
        elif "git" in joke_text.lower() or "python" in joke_text.lower():
            emoji = "üêç"
        else:
            emoji = "üòÑ"
        response_text = (
            f"{emoji} <b>–ê–Ω–µ–∫–¥–æ—Ç:</b>\n\n"
            f"<i>{joke_text}</i>\n\n"
            f"üì° <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"
        )
        await loading_msg.edit_text(response_text, parse_mode="HTML")
        log_func(f"–ê–Ω–µ–∫–¥–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")
        error_text = (
            "üòÖ <b>–£–ø—Å!</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π! üòÑ"
        )
        if 'loading_msg' in locals():
            await loading_msg.edit_text(error_text, parse_mode="HTML")
        else:
            await message.reply(error_text, parse_mode="HTML") 