"""
Joke Parser Module
==================
–ú–æ–¥—É–ª—å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
"""
import aiohttp
import asyncio
import random
from typing import Optional, List, Dict, Any
from logger import logger, log_func, log_error
import re
from bs4 import BeautifulSoup
import json


class JokeParser:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"""
    
    def __init__(self):
        self.session: Optional[aiohttp.ClientSession] = None
        self.cache: List[str] = []
        self.cache_size = 50
        
    async def __aenter__(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—Ö–æ–¥"""
        self.session = aiohttp.ClientSession(
            timeout=aiohttp.ClientTimeout(total=10),
            headers={
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        )
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä - –≤—ã—Ö–æ–¥"""
        if self.session:
            await self.session.close()
    
    async def get_joke_from_anekdot_ru(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å anekdot.ru"""
        try:
            log_func("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å anekdot.ru")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏
            page = random.randint(1, 100)
            url = f"https://www.anekdot.ru/random/anekdot/"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ò—â–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –≤ —Ç–µ–∫—Å—Ç–µ
                    jokes = soup.find_all('div', class_='text')
                    if jokes:
                        joke = random.choice(jokes).get_text(strip=True)
                        if joke and len(joke) > 20:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
                            return joke
                            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ —Å anekdot.ru: {e}")
        
        return None
    
    async def get_joke_from_anekdot_me(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å anekdot.me"""
        try:
            log_func("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å anekdot.me")
            
            url = "https://anekdot.me/random"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ò—â–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã
                    jokes = soup.find_all('div', class_='anekdot')
                    if jokes:
                        joke = random.choice(jokes).get_text(strip=True)
                        if joke and len(joke) > 20:
                            return joke
                            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ —Å anekdot.me: {e}")
        
        return None
    
    async def get_joke_from_api(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ API"""
        try:
            log_func("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —á–µ—Ä–µ–∑ API")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            url = "https://v2.jokeapi.dev/joke/Any?lang=ru&safe-mode"
            
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    if data.get('type') == 'single':
                        joke = data.get('joke', '')
                    elif data.get('type') == 'twopart':
                        setup = data.get('setup', '')
                        delivery = data.get('delivery', '')
                        joke = f"{setup}\n\n{delivery}"
                    else:
                        return None
                    
                    if joke and len(joke) > 20:
                        return joke
                        
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ —á–µ—Ä–µ–∑ API: {e}")
        
        return None
    
    async def get_joke_from_local_cache(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫—ç—à–∞"""
        if self.cache:
            return random.choice(self.cache)
        return None
    
    def add_to_cache(self, joke: str):
        """–î–æ–±–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –≤ –∫—ç—à"""
        if joke not in self.cache:
            self.cache.append(joke)
            if len(self.cache) > self.cache_size:
                self.cache.pop(0)  # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–π —Å—Ç–∞—Ä—ã–π
    
    async def get_random_joke(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –ª—é–±–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
        log_func("–ó–∞–ø—Ä–æ—Å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –∫—ç—à–∞
        joke = await self.get_joke_from_local_cache()
        if joke:
            return joke
        
        # –°–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
        sources = [
            self.get_joke_from_api,
            self.get_joke_from_anekdot_ru,
            self.get_joke_from_anekdot_me,
        ]
        
        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        random.shuffle(sources)
        
        for source_func in sources:
            try:
                joke = await source_func()
                if joke:
                    self.add_to_cache(joke)
                    return joke
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞ –∏–∑ {source_func.__name__}: {e}")
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –∞–Ω–µ–∫–¥–æ—Ç
        fallback_jokes = [
            "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∑–∞—Ö–æ–¥–∏—Ç –≤ –ª–∏—Ñ—Ç, –∞ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ JS... –û–Ω —Å—Ä–∞–∑—É –ø–æ–Ω—è–ª, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ–π–¥–µ—Ç –Ω–µ —Ç–∞–∫! üòÑ",
            "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –†–æ–∂–¥–µ—Å—Ç–≤–æ –∏ –•—ç–ª–ª–æ—É–∏–Ω? –ü–æ—Ç–æ–º—É —á—Ç–æ Oct 31 == Dec 25! üéÉ",
            "–ö–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –ª–æ–º–∞–µ—Ç –≥–æ–ª–æ–≤—É? Git push --force! üíª",
            "–ü–æ—á–µ–º—É Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–æ—Å—è—Ç –æ—á–∫–∏? –ü–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ –Ω–µ –º–æ–≥—É—Ç C#! üêç",
            "–ß—Ç–æ —Å–∫–∞–∑–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –Ω–∞ —Å–≤–∞–¥—å–±–µ? '–î–∞, —è —Å–æ–≥–ª–∞—Å–µ–Ω' (while true) üíç"
        ]
        
        return random.choice(fallback_jokes)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞
joke_parser: Optional[JokeParser] = None


async def get_joke() -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)"""
    global joke_parser
    
    if joke_parser is None:
        joke_parser = JokeParser()
    
    async with joke_parser as parser:
        return await parser.get_random_joke()


async def get_joke_with_source() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ"""
    joke = await get_joke()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
    if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in joke.lower() or "git" in joke.lower() or "python" in joke.lower():
        source = "–õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ —à—É—Ç–∫–∏)"
    elif "jokeapi" in joke.lower():
        source = "JokeAPI"
    else:
        source = "–í–Ω–µ—à–Ω–∏–π –∏—Å—Ç–æ—á–Ω–∏–∫"
    
    return {
        "joke": joke,
        "source": source,
        "timestamp": asyncio.get_event_loop().time()
    } 