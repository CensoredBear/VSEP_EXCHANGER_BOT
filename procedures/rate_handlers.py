"""
üü£ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
==========================================
Callback handlers –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
"""
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from db import db
from logger import logger

# === üü£ CALLBACK HANDLERS –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–£–†–°–û–í ===

async def rate_change_confirm(call: CallbackQuery, state: FSMContext):
    """
    üü£ Callback –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–æ–≤—ã–µ –∫—É—Ä—Å—ã –¥–ª—è –≤—Å–µ—Ö –∑–æ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    """
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å
    if call.from_user.id != (call.message.reply_to_message.from_user.id if call.message and call.message.reply_to_message else call.from_user.id):  # type: ignore
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    if 'new_rate' not in data:
        try:
            await call.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        except Exception:
            pass
        try:
            if call.message:
                await call.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")  # type: ignore
        except:
            pass
        await state.clear()
        return
    new_rate = float(data['new_rate'])
    coefs = await db.get_rate_coefficients()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
    if not coefs:
        try:
            if call.message:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # type: ignore
        except:
            pass
        await state.clear()
        return
    
    main_coef = float(coefs['main_rate'])
    rate1 = new_rate * float(coefs['rate1']) / main_coef
    rate2 = new_rate * float(coefs['rate2']) / main_coef
    rate3 = new_rate * float(coefs['rate3']) / main_coef
    rate4 = new_rate * float(coefs['rate4']) / main_coef
    rate_back = new_rate * float(coefs['rate_back']) / main_coef
    old_rate_row = await db.get_actual_rate()
    old_rate_special = old_rate_row['rate_special'] if old_rate_row else None
    rate_special = old_rate_special
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω
    if not db.pool:
        try:
            if call.message:
                await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")  # type: ignore
        except:
            pass
        await state.clear()
        return
    
    await db.pool.execute('UPDATE "VSEPExchanger"."rate" SET is_actual=FALSE WHERE is_actual=TRUE')
    await db.pool.execute('''
        INSERT INTO "VSEPExchanger"."rate" (main_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, created_by, created_at, is_actual)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), TRUE)
    ''', new_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, call.from_user.id)
    try:
        if call.message:
            await call.message.edit_text("–ö—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã!")  # type: ignore
    except:
        pass
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
    from handlers import cmd_rate_show
    await cmd_rate_show(call.message)
    await state.clear()

async def rate_change_cancel(call: CallbackQuery, state: FSMContext):
    """
    üü£ Callback –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å
    if call.from_user.id != (call.message.reply_to_message.from_user.id if call.message and call.message.reply_to_message else call.from_user.id):  # type: ignore
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    try:
        if call.message:
            await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")  # type: ignore
    except:
        pass
    await state.clear() 