from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram import F, Dispatcher, Router
from logger import logger
from db import db
from aiogram.filters import Command
from permissions import is_operator_or_admin, is_admin_or_superadmin
import re
from chat_logger import log_message
from config import config

bank_router = Router()

class BankNewStates(StatesGroup):
    bank = State()
    card_number = State()
    recipient_name = State()
    sbp_phone = State()
    confirm = State()

class BankChangeActualStates(StatesGroup):
    waiting_action = State()
    waiting_number = State()
    change_type = State()

class BankRemoveStates(StatesGroup):
    waiting_number = State()
    confirm = State()

@bank_router.message(Command("bank_new"))
async def cmd_bank_new(message: Message, state: FSMContext):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_operator_or_admin(message.from_user.id):
        await message.reply("üõë –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–∏—Å–∞.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /bank_new –±–µ–∑ –ø—Ä–∞–≤ admin/operator")
        return
    await state.set_state(BankNewStates.bank)
    current_state = await state.get_state()
    logger.info(f"[FSM] User {message.from_user.id} state set to: {current_state}")
    await state.update_data(initiator_id=message.from_user.id)
    await message.answer(
        f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]]
        )
    )
    logger.info(f"{message.from_user.id} –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤")

@bank_router.message(BankNewStates.bank)
async def banknew_bank(message: Message, state: FSMContext):
    logger.info(f"[FSM] Entered banknew_bank handler for user {message.from_user.id} with text: '{message.text}'")
    current_state = await state.get_state()
    logger.info(f"[FSM] Current state for user {message.from_user.id} is {current_state}")
    data = await state.get_data()
    logger.info(f"[FSM] State data for user {message.from_user.id}: {data}")

    if message.from_user.id != data.get("initiator_id"):
        await message.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!", show_alert=True)
        return
    bank = message.text.strip()
    if not bank.isalpha() or " " in bank:
        await message.answer("üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    bank = bank.upper()
    await state.update_data(bank=bank)
    await state.set_state(BankNewStates.card_number)
    await message.answer(
        f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞):",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –°–ë–ü", callback_data="card_number_sbp_only")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:bank"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
            ]
        )
    )
@bank_router.callback_query(F.data == "card_number_sbp_only", BankNewStates.card_number)
@bank_router.message(BankNewStates.card_number)
async def banknew_card_number(message_or_call: Message | CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if isinstance(message_or_call, CallbackQuery):
        user_id = message_or_call.from_user.id
        message = message_or_call.message
    else:
        user_id = message_or_call.from_user.id
        message = message_or_call
        
    if user_id != data.get("initiator_id"):
        await message.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!", show_alert=True)
        return
    
    if isinstance(message_or_call, CallbackQuery) and message_or_call.data == "card_number_sbp_only":
        await state.update_data(card_number="–ø–µ—Ä–µ–≤–æ–¥_–ø–æ_–°–ë–ü")
        await state.set_state(BankNewStates.recipient_name)
        await message.edit_text(
            "‚Ü™ –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:card_number"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
                ]
            )
        )
        return

    card_number = message.text.strip()
    if not card_number.isdigit() or len(card_number) != 20:
        await message.answer(
            f"üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 20 –∑–Ω–∞–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä).\n\n"
            f"–°–µ–π—á–∞—Å –≤—ã –≤–≤–µ–ª–∏: {card_number} - {len(card_number)} –∑–Ω–∞–∫–æ–≤.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return

    await state.update_data(card_number=card_number)
    await state.set_state(BankNewStates.recipient_name)
    await message.answer(
        f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:card_number"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
            ]
        )
    )

@bank_router.message(BankNewStates.recipient_name)
async def banknew_recipient_name(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.from_user.id != data.get("initiator_id"):
        await message.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!", show_alert=True)
        return
    name = message.text.strip()
    if not re.fullmatch(r"[A-Za-z–ê-–Ø–∞-—è–Å—ë. ]+", name):
        await message.answer("üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ç–æ—á–∫—É –∏ –ø—Ä–æ–±–µ–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    name = name.upper()
    await state.update_data(recipient_name=name)
    await state.set_state(BankNewStates.sbp_phone)
    await message.answer(
        f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –°–ë–ü:",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:recipient_name"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
            ]
        )
    )

@bank_router.message(BankNewStates.sbp_phone)
async def banknew_sbp_phone(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.from_user.id != data.get("initiator_id"):
        await message.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤!", show_alert=True)
        return
    phone = message.text.strip().replace(" ", "")
    phone_digits = re.sub(r"[^\d+]", "", phone)
    if phone_digits.startswith("+7") and len(phone_digits) == 12:
        norm_phone = phone_digits
    elif phone_digits.startswith("8") and len(phone_digits) == 11:
        norm_phone = "+7" + phone_digits[1:]
    elif phone_digits.startswith("7") and len(phone_digits) == 11:
        norm_phone = "+" + phone_digits
    elif len(phone_digits) == 10 and (phone_digits.startswith("7") or phone_digits.startswith("8")):
        norm_phone = "+7" + phone_digits[1:]
    elif len(phone_digits) == 10:
        norm_phone = "+7" + phone_digits
    else:
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX (10 —Ü–∏—Ñ—Ä). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    if not re.fullmatch(r"\+7\d{10}", norm_phone):
        await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await state.update_data(sbp_phone=norm_phone)
    data = await state.get_data()
    await state.set_state(BankNewStates.confirm)
    text = (
        f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n"
        f"<b>üîé –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è:</b>\n\n"
        f"–ë–∞–Ω–∫: {data['bank']}\n"
        f"–ö–∞—Ä—Ç–∞: {data['card_number']}\n"
        f"–ò–º—è: {data['recipient_name']}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data['sbp_phone']}\n"
    )
    await message.answer(
        text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="banknew_confirm")],
                [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:sbp_phone"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
            ]
        )
    )

@bank_router.callback_query(F.data.startswith("banknew_back:"))
async def banknew_back(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.from_user.id != data.get("initiator_id"):
        await call.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥!", show_alert=True)
        return
    step = call.data.split(":")[1]
    if step == "bank":
        await state.set_state(BankNewStates.bank)
        await call.message.edit_text(
            f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]]
            )
        )
    elif step == "card_number":
        await state.set_state(BankNewStates.card_number)
        await call.message.edit_text(
            f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞):",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–¢–æ–ª—å–∫–æ –°–ë–ü", callback_data="card_number_sbp_only")],
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:bank"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
                ]
            )
        )
    elif step == "recipient_name":
        await state.set_state(BankNewStates.recipient_name)
        await call.message.edit_text(
            f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:card_number"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
                ]
            )
        )
    elif step == "sbp_phone":
        await state.set_state(BankNewStates.sbp_phone)
        await call.message.edit_text(
            f"üí≥ –í–ù–ï–°–ï–ù–ò–ï –ù–û–í–´–• –†–ï–ö–í–ò–ó–ò–¢–û–í\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –°–ë–ü:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="banknew_back:recipient_name"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="banknew_cancel")]
                ]
            )
        )
    await call.answer()

@bank_router.callback_query(F.data == "banknew_cancel")
async def banknew_cancel(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.from_user.id != data.get("initiator_id"):
        await call.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥!", show_alert=True)
        return
    await state.clear()
    await call.message.delete()
    log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
    await call.message.answer("–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
    await call.answer()

@bank_router.callback_query(F.data == "banknew_confirm")
async def banknew_confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if call.from_user.id != data.get("initiator_id"):
        await call.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥!", show_alert=True)
        return
    user_id = call.from_user.id
    await db.add_bank_account(
        account_id=data['card_number'],
        bank=data['bank'],
        card_number=data['card_number'],
        recipient_name=data['recipient_name'],
        sbp_phone=data['sbp_phone'],
        is_special=False,
        is_active=True,
        created_by=user_id
    )
    await state.clear()
    await call.message.edit_text("‚úÖ –ù–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–µ–Ω—ã –≤ –±–∞–∑—É.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–Ω—ë—Å –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: {data}")
    await call.answer()

@bank_router.message(Command("bank_change"))
async def cmd_bank_change(message: Message, state: FSMContext):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_operator_or_admin(message.from_user.id):
        await message.reply("üõë –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º —Å–µ—Ä–≤–∏—Å–∞.")
        return
    accounts = await db.get_active_bank_accounts()
    if not accounts:
        await message.reply("üí≥ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
        return
    text = "<b>üí≥ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
    for acc in accounts:
        status = []
        if acc.get("is_actual"):
            status.append('üü¢ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ"')
        if acc.get("is_special"):
            status.append('üî¥ "–°–ø–µ—Ü"')
        status_str = ", ".join(status) if status else "–æ–±—ã—á–Ω—ã–µ"
        text += f"<b>{acc['account_number']}</b>: {acc['bank']}, {acc['card_number']}, {acc['recipient_name']}, {acc['sbp_phone']} ‚Äî {status_str}\n"
    
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ"', callback_data="change_actual")],
            [InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å "–°–ø–µ—Ü"', callback_data="change_special")],
            [InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ" –∏ "–°–ø–µ—Ü"', callback_data="change_both")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="bank_change_cancel")]
        ]
    )
    await state.set_state(BankChangeActualStates.waiting_action)
    await message.reply(text + "\n‚úçüèª –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)

@bank_router.callback_query(F.data.in_(["change_actual", "change_special", "change_both"]))
async def bank_change_actual_action(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    initiator_id = call.message.reply_to_message.from_user.id if call.message.reply_to_message else call.from_user.id
    if call.from_user.id != initiator_id:
        await call.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥!", show_alert=True)
        return

    change_map = {
        "change_actual": {"type": "actual", "text": '<b>üü¢ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ"</b>'},
        "change_special": {"type": "special", "text": '<b>üî¥ "–°–ø–µ—Ü"</b>'},
        "change_both": {"type": "both", "text": '<b>üü¢ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ"</b> –∏ <b>üî¥ "–°–ø–µ—Ü"</b>'}
    }
    
    action_info = change_map.get(call.data)
    if not action_info: return

    await state.update_data(change_type=action_info["type"], initiator_id=initiator_id)
    await state.set_state(BankChangeActualStates.waiting_number)
    
    await call.message.edit_text(
        f"üí≥ ‚úçüèª –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç {action_info['text']}:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="bank_change_cancel")]
        ])
    )
    await call.answer()

@bank_router.callback_query(F.data == "bank_change_cancel")
async def bank_change_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()

@bank_router.message(BankChangeActualStates.waiting_number)
async def bank_change_actual_number(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.from_user.id != data.get("initiator_id"):
        await message.answer("‚õîÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –¥–∏–∞–ª–æ–≥!")
        return
    
    try:
        number = int(message.text.strip())
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π —Ä–µ–∫–≤–∏–∑–∏—Ç
        if not await db.get_bank_account_by_number(number):
            await message.answer("üõë –†–µ–∫–≤–∏–∑–∏—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    except (ValueError, TypeError):
        await message.answer("üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–∞!")
        return
    
    change_type = data.get("change_type")
    
    if change_type == "actual":
        await db.set_actual_bank_account(number)
        await message.answer(f'üîé –†–µ–∫–≤–∏–∑–∏—Ç <b>{number}</b> —Ç–µ–ø–µ—Ä—å <b>üü¢ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π"</b>.')
    elif change_type == "special":
        await db.set_special_bank_account(number)
        await message.answer(f'üîé –†–µ–∫–≤–∏–∑–∏—Ç <b>{number}</b> —Ç–µ–ø–µ—Ä—å <b>üî¥ "–°–ø–µ—Ü"</b>.')
    elif change_type == "both":
        await db.set_actual_bank_account(number)
        await db.set_special_bank_account(number)
        await message.answer(f'üîé –†–µ–∫–≤–∏–∑–∏—Ç <b>{number}</b> —Ç–µ–ø–µ—Ä—å <b>üü¢ "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π"</b> –∏ <b>üî¥ "–°–ø–µ—Ü"</b>.')
        
    await state.clear()

@bank_router.message(Command("bank_remove"))
async def cmd_bank_remove(message: Message, state: FSMContext):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üõë –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.")
        return
    await state.set_state(BankRemoveStates.waiting_number)
    await message.reply(
        "üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤ (—Å—Ç–∞–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º–∏) –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ.\n\n‚úçüèª –í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤</b> –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤:")

@bank_router.message(BankRemoveStates.waiting_number)
async def bank_remove_number(message: Message, state: FSMContext):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üõë –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.")
        return
    try:
        number = int(message.text.strip())
    except ValueError:
        await message.answer("üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–∞!")
        return
    acc = await db.get_bank_account_by_number(number)
    if not acc:
        await message.answer("üõë –†–µ–∫–≤–∏–∑–∏—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    if acc.get("is_actual") or acc.get("is_special"):
        status = []
        if acc.get("is_actual"): status.append("–∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏")
        if acc.get("is_special"): status.append("—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏")
        await message.answer(f"üö´ –ù–ï –ø—Ä–∏–Ω—è—Ç–æ.\n\n–ü—Ä–∏—á–∏–Ω–∞: –†–µ–∫–≤–∏–∑–∏—Ç—ã —è–≤–ª—è—é—Ç—Å—è {' –∏ '.join(status)}. –ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Ö –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ –∞—Ä—Ö–∏–≤, —Å–Ω–∏–º–∏—Ç–µ —Å –Ω–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å (–ø–µ—Ä–µ–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º).")
        await state.clear()
        return
    if not acc.get("is_active"):
        await message.answer("üõë –†–µ–∫–≤–∏–∑–∏—Ç —É–∂–µ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (–≤ –∞—Ä—Ö–∏–≤–µ).")
        await state.clear()
        return
    await state.update_data(account_number=number)
    text = f"<b>üí≥ –†–µ–∫–≤–∏–∑–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ –∞—Ä—Ö–∏–≤:</b>\n{acc['bank']}, {acc['card_number']}, {acc['recipient_name']}, {acc['sbp_phone']}"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥ –≤ –∞—Ä—Ö–∏–≤", callback_data="remove_confirm")]]
    )
    await state.set_state(BankRemoveStates.confirm)
    await message.answer(text, reply_markup=kb)

@bank_router.callback_query(F.data == "remove_confirm")
async def bank_remove_confirm(call: CallbackQuery, state: FSMContext):
    if str(call.message.chat.id) != config.ADMIN_GROUP:
        await call.answer("üõë –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∞–¥–º–∏–Ω—Å–∫–æ–º —á–∞—Ç–µ.", show_alert=True)
        return
    data = await state.get_data()
    number = data.get("account_number")
    if not number:
        await call.answer("üõë –û—à–∏–±–∫–∞: –Ω–æ–º–µ—Ä —Ä–µ–∫–≤–∏–∑–∏—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    await db.deactivate_bank_account(number)
    await state.clear()
    await call.message.edit_text("üîé –†–µ–∫–≤–∏–∑–∏—Ç –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ –∞—Ä—Ö–∏–≤ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω).")
    await call.answer() 