import asyncio
from datetime import datetime, timedelta, time
import pytz
from aiogram import Bot
from config import config, system_settings
from logger import log_system, log_info, log_error, log_warning
from messages import get_bali_and_msk_time_list
from db import db
import logging
import os
from aiogram.types import FSInputFile
from utils import safe_send_media_with_caption

night_shift = False  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã

class Scheduler:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.is_running = False
        self.shift_start = None
        self.shift_end = None
        self.sent_start_today = False
        self.sent_end_today = False

    async def send_status_message(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞"""
        try:
            times = get_bali_and_msk_time_list()
            message = f"üïê {times[6]} (Bali) / {times[5]} (MSK)\n–∫–æ–Ω—Ç—Ä–æ–ª—å - –æ–∫‚úÖ, —Ä–∞–±–æ—Ç–∞–µ—Ç —à—Ç–∞—Ç–Ω–æ"
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É
            await self.bot.send_message(
                chat_id=config.ADMIN_GROUP,
                text=message
            )
            log_system("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –±–æ—Ç–∞")
            
        except Exception as e:
            log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", level=logging.ERROR)

    async def send_shift_end(self):
        global night_shift
        night_shift = True
        try:
            groups = await db.get_group_chats()
            admin_group = config.ADMIN_GROUP
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await db.get_admins()
            admin_mentions = " ".join([f"@{admin['nickneim']}" for admin in admins if admin['rang'] in ['admin', '–∞–¥–º–∏–Ω']])
            
            text = f'''üî¥ <b>–°–ú–ï–ù–ê –ó–ê–ö–†–´–¢–ê!</b> üö´

<blockquote>üìã –í —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º —Å–º–µ–Ω—ã –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –°–µ—Ä–≤–∏—Å–∞ –û–±–º–µ–Ω–∞ —Å {self.shift_start} –¥–æ {self.shift_end} –ø–æ –±–∞–ª–∏–π—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏.

  üìå –í –ø–µ—Ä–∏–æ–¥ —Å {self.shift_end} –¥–æ {self.shift_start} –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞—è–≤–∫–∏ ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ: –±–æ—Ç –Ω–µ –≤—ã–¥–∞—ë—Ç —Ä–µ–∫–≤–∏–∑–∏—Ç—ã, –∑–∞—è–≤–∫–∏ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–∞–∑—É –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω—ã.</blockquote>

  –°–ø–∞—Å–∏–±–æ –≤—Å–µ–º –∑–∞ —Ä–∞–±–æ—Ç—É! üéâ
  –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞! üåô'''

            admin_text = f'''{text}

  –ü–†–û–®–£ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–û–í –°–ï–†–í–ò–°–ê –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–∑–∞–∏–º–æ—Ä–∞—Å—á—ë—Ç—ã —Å –ü–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏.

  –î–ª—è —ç—Ç–æ–≥–æ –≤ –∫–∞–∂–¥–æ–º —á–∞—Ç–µ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ —Å–æ–≤–µ—Ä—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è:

  1Ô∏è‚É£ –∫–æ–º–∞–Ω–¥–æ–π <code>/report</code> –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –æ—Ç—á—ë—Ç –ø–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–º –∑–∞—è–≤–∫–∞–º, –æ–∂–∏–¥–∞—é—â–∏–º –≤—ã–ø–ª–∞—Ç—ã
  2Ô∏è‚É£ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á—ë—Ç" –ø–æ–¥ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç—á—ë—Ç–æ–º.
  3Ô∏è‚É£ –ø—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –∏ –∫–æ–º–∞–Ω–¥—É <code>/transfer [—Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞]</code> (–ß–ï–ö –ò –ö–û–ú–ê–ù–î–ê –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –µ–¥–∏–Ω–æ–º –∏–ª–∏ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
  4Ô∏è‚É£ –±–æ—Ç —Å–≤–µ—Ä–∏—Ç —Å—É–º–º—ã –∏ –∑–∞—á—Ç—ë—Ç –ø–ª–∞—Ç–µ–∂–∏, –ø–µ—Ä–µ–≤–µ–¥—è –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å "–æ–ø–ª–∞—á–µ–Ω–æ"'''

            log_system(f"[SHIFT_END] admin_group: {admin_group} (type: {type(admin_group)})")
            log_system(f"[SHIFT_END] admin_text length: {len(admin_text)}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã
            if not system_settings.media_finish:
                warning_text = "MEDIA –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!\n\n"
                text = warning_text + text
                admin_text = warning_text + admin_text
                
                log_warning(f"[MEDIA_MISSING] –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã (media_finish). shift_end: {self.shift_end}")
                
                admin_notification = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã (media_finish)."
                try:
                    await self.bot.send_message(config.ADMIN_GROUP, admin_notification)
                    log_system(f"[ADMIN_NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã")
                except Exception as e:
                    log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–¥–∏–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
            else:
                log_system(f"[MEDIA_FOUND] –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã: {system_settings.media_finish}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤
            for group in groups:
                try:
                    log_system(f"[SHIFT_END] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –≤ {group['id']}")
                    await safe_send_media_with_caption(self.bot, group['id'], system_settings.media_finish, text)
                except Exception as e:
                    log_system(f"[SHIFT_END] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group['id']}: {e}", level=logging.ERROR)

            try:
                log_system(f"[SHIFT_END] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {admin_group}")
                await safe_send_media_with_caption(self.bot, admin_group, system_settings.media_finish, admin_text, parse_mode="HTML")
            except Exception as e:
                log_system(f"[SHIFT_END] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {admin_group}: {e}", level=logging.ERROR)

            log_system("[SHIFT_END] –†–∞—Å—Å—ã–ª–∫–∞ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        except Exception as e:
            log_system(f"[SHIFT_END] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)

    async def send_shift_start(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã
            await system_settings.load()
            log_system("[SHIFT_START] –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created –≤ timeout –∏ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            timeout_count, timeout_time = await self.timeout_all_created_orders()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
            groups = await db.get_group_chats()
            if not groups:
                log_system("–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
                return
            
            global night_shift
            night_shift = False
            try:
                # --- –û–±–Ω—É–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö ---
                admin_group = config.ADMIN_GROUP
                times = get_bali_and_msk_time_list()
                today = times[6]  # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø–æ –ë–∞–ª–∏

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∞—Ö
                timeout_info = ""
                if timeout_count > 0:
                    timeout_info = f"\n\nüìã <b>–ê–†–•–ò–í–ê–¶–ò–Ø –ó–ê–Ø–í–û–ö:</b>\n–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {timeout_count} –∑–∞—è–≤–æ–∫ –≤ —Å—Ç–∞—Ç—É—Å timeout (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ {timeout_time})"
                elif timeout_count == 0:
                    timeout_info = f"\n\nüìã <b>–ê–†–•–ò–í–ê–¶–ò–Ø –ó–ê–Ø–í–û–ö:</b>\n–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ timeout (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ {timeout_time})"

                text = (
                    f"üü¢ <b>–°–ú–ï–ù–ê –û–¢–ö–†–´–¢–ê!</b> ‚úÖ\n"
                    f"–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –°–µ—Ä–≤–∏—Å –û–±–º–µ–Ω–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–≤–æ—é —Ä–∞–±–æ—Ç—É.\n\n"
                    f"–ë–∞–ª–∏–π—Å–∫–æ–µ –≤—Ä–µ–º—è: {today}\n"
                    f"–°–µ–≥–æ–¥–Ω—è —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ {self.shift_end}.\n\n"
                    f"–ñ–µ–ª–∞—é –≤–∞–º —Å–ø–æ–∫–æ–π–Ω–æ–π, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–π —Å–º–µ–Ω—ã.{timeout_info}"
                )
                admin_text = f'''{text}

–ü–†–ï–î–°–¢–ê–í–ò–¢–ï–õ–ò –°–ï–†–í–ò–°–ê: –Ω–µ –∑–∞–±—É–¥—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –†–ï–ö–í–ò–ó–ò–¢–´ –ò –ö–£–†–°–´'''

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã
                if not system_settings.media_start:
                    warning_text = "MEDIA –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!\n\n"
                    text = warning_text + text
                    admin_text = warning_text + admin_text
                    
                    log_warning(f"[MEDIA_MISSING] –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (media_start). shift_start: {self.shift_start}")
                    
                    admin_notification = f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã (media_start)."
                    try:
                        await self.bot.send_message(config.ADMIN_GROUP, admin_notification)
                        log_system(f"[ADMIN_NOTIFICATION] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–¥–∏–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã")
                    except Exception as e:
                        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–º –º–µ–¥–∏–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")
                else:
                    log_system(f"[MEDIA_FOUND] –ù–∞–π–¥–µ–Ω–æ –º–µ–¥–∏–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: {system_settings.media_start}")

                for group in groups:
                    try:
                        log_system(f"[SHIFT_START] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –≤ {group['id']}")
                        await safe_send_media_with_caption(self.bot, group['id'], system_settings.media_start, text)
                    except Exception as e:
                        log_system(f"[SHIFT_START] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É {group['id']}: {e}", level=logging.ERROR)

                try:
                    log_system(f"[SHIFT_START] –ü—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {admin_group}")
                    await safe_send_media_with_caption(self.bot, admin_group, system_settings.media_start, admin_text, parse_mode="HTML")
                except Exception as e:
                    log_system(f"[SHIFT_START] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {admin_group}: {e}", level=logging.ERROR)

                log_system("[SHIFT_START] –†–∞—Å—Å—ã–ª–∫–∞ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            except Exception as e:
                log_system(f"[SHIFT_START] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)
        except Exception as e:
            log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)

    async def timeout_all_created_orders(self):
        """–ü–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created –≤ timeout, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ 12 —á–∞—Å–æ–≤ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã"""
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è "12 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥ –æ—Ç –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã"
            now = datetime.now()
            shift_start_datetime = datetime.combine(now.date(), self.shift_start)
            timeout_threshold = shift_start_datetime - timedelta(hours=12)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ –ø–æ—Ä–æ–≥–∞ –≤—Ä–µ–º–µ–Ω–∏
            orders = await db.pool.fetch(
                'SELECT transaction_number FROM "VSEPExchanger"."transactions" WHERE status = $1 AND created_at < $2',
                'created', timeout_threshold
            )
            
            if orders:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ timeout
                await db.pool.execute(
                    'UPDATE "VSEPExchanger"."transactions" SET status = $1, status_changed_at = $2 WHERE status = $3 AND created_at < $4',
                    'timeout', datetime.now(), 'created', timeout_threshold
                )
                log_system(f"[TIMEOUT] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å timeout (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ {timeout_threshold.strftime('%d.%m.%Y %H:%M')})")
                return len(orders), timeout_threshold.strftime('%d.%m.%Y %H:%M')
            else:
                log_system(f"[TIMEOUT] –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ timeout (—Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ {timeout_threshold.strftime('%d.%m.%Y %H:%M')})")
                return 0, timeout_threshold.strftime('%d.%m.%Y %H:%M')
                
        except Exception as e:
            log_system(f"[TIMEOUT] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ –∑–∞–∫–∞–∑–æ–≤ –≤ timeout: {e}", level=logging.ERROR)
            return 0, "–æ—à–∏–±–∫–∞"

    async def update_shift_times(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã –∏–∑ –±–∞–∑—ã"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
            shift_start_str = await db.get_system_setting('shift_start_time')
            shift_end_str = await db.get_system_setting('shift_end_time')
            
            if not shift_start_str or not shift_end_str:
                log_system("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞/–∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã –∏–∑ –±–∞–∑—ã", level=logging.ERROR)
                return False
                
            # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã time
            try:
                # –ü—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ä–º–∞—Ç —Å —Å–µ–∫—É–Ω–¥–∞–º–∏
                self.shift_start = datetime.strptime(shift_start_str, '%H:%M:%S').time()
                self.shift_end = datetime.strptime(shift_end_str, '%H:%M:%S').time()
            except ValueError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Å–µ–∫—É–Ω–¥
                self.shift_start = datetime.strptime(shift_start_str, '%H:%M').time()
                self.shift_end = datetime.strptime(shift_end_str, '%H:%M').time()
                
            log_system(f"–í—Ä–µ–º—è —Å–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: –Ω–∞—á–∞–ª–æ {self.shift_start}, –∫–æ–Ω–µ—Ü {self.shift_end}")
            return True
        except Exception as e:
            log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)
            return False

    def is_night_shift(self, current_time: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω–æ–π"""
        if not self.shift_start or not self.shift_end:
            return False
            
        # –¢–µ–ø–µ—Ä—å shift_start –∏ shift_end - —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã time
        start_time = self.shift_start
        end_time = self.shift_end
        current_time_only = current_time.time()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Å–º–µ–Ω—ã
        if start_time <= end_time:
            return not (start_time <= current_time_only <= end_time)
        else:
            return end_time <= current_time_only <= start_time

    async def scheduler_loop(self):
        global night_shift
        tz = pytz.timezone("Asia/Makassar")
        while self.is_running:
            try:
                now = datetime.now(tz)
                # log_system(f"[DEBUG] –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {now.strftime('%H:%M:%S')}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã
                is_night = self.is_night_shift(now)
                if is_night != night_shift:
                    night_shift = is_night
                    log_system(f"–°—Ç–∞—Ç—É—Å –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω: {night_shift}")
                
                # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
                # –¢–µ–ø–µ—Ä—å shift_start –∏ shift_end - —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã time
                start_hour = self.shift_start.hour
                start_minute = self.shift_start.minute
                # log_system(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–º–µ–Ω—ã: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {now.hour}:{now.minute}, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ {start_hour}:{start_minute}")
                if now.hour == start_hour and now.minute == start_minute and not self.sent_start_today:
                    log_system(f"[DEBUG] –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                    try:
                        await self.send_shift_start()
                        self.sent_start_today = True
                        self.sent_end_today = False
                        log_system("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)
                
                # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã
                end_hour = self.shift_end.hour
                end_minute = self.shift_end.minute
                # log_system(f"[DEBUG] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è {now.hour}:{now.minute}, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ {end_hour}:{end_minute}")
                if now.hour == end_hour and now.minute == end_minute and not self.sent_end_today:
                    log_system(f"[DEBUG] –£—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                    try:
                        await self.send_shift_end()
                        self.sent_end_today = True
                        log_system("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    except Exception as e:
                        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∫–æ–Ω—Ü–µ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)
                
                # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
                if now.hour == 0 and now.minute == 0:
                    self.sent_start_today = False
                    self.sent_end_today = False
                    log_system("–°–±—Ä–æ—Å —Ñ–ª–∞–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
                
                # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –º–∏–Ω—É—Ç—ã
                await asyncio.sleep(60 - now.second)
                
            except Exception as e:
                log_system(f"–û—à–∏–±–∫–∞ –≤ scheduler_loop: {e}", level=logging.ERROR)
                await asyncio.sleep(60)  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            self.is_running = True
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–º–µ–Ω—ã
            await self.update_shift_times()
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            asyncio.create_task(self.scheduler_loop())
            log_system("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        self.is_running = False
        log_system("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def reset_flags_and_night_shift(self):
        self.sent_start_today = False
        self.sent_end_today = False
        tz = pytz.timezone("Asia/Makassar")
        now = datetime.now(tz)
        global night_shift
        old_night_shift = night_shift
        night_shift = self.is_night_shift(now)
        log_system(f"[SCHEDULER] –§–ª–∞–≥–∏ —Å–±—Ä–æ—à–µ–Ω—ã, night_shift={night_shift}")
        if night_shift != old_night_shift:
            log_system(f"–°—Ç–∞—Ç—É—Å –Ω–æ—á–Ω–æ–π —Å–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω: {night_shift}")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = None

def init_scheduler(bot: Bot):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
    global scheduler
    scheduler = Scheduler(bot)
    return scheduler 