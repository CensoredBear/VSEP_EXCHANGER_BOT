"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –∑–∞—è–≤–æ–∫ –≤ Google Sheets –¥–ª—è VSEPExchangerBot —á–µ—Ä–µ–∑ gspread (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π).
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ run_in_executor
- –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ logs/google_sheets.log
- –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–∞–≤–∏–ª–∞ —Å–º. –≤ README –∏ RULES.md
"""
import gspread_asyncio
from google.oauth2.service_account import Credentials
import pandas as pd
import gspread
from gspread_dataframe import set_with_dataframe
import asyncio
from typing import List, Dict, Any, Optional, Tuple
import json
import logging
import os
from datetime import datetime
from decimal import Decimal
from config import system_settings, config
from logger import logger, log_system, log_func, log_db, log_warning, log_error
from db import db
from aiogram import Bot
from config import config
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è Google Sheets
log_dir = os.path.join(os.path.dirname(__file__), "logs")
os.makedirs(log_dir, exist_ok=True)
gs_logger = logging.getLogger("google_sheets")
gs_logger.setLevel(logging.INFO)
file_handler = logging.FileHandler(os.path.join(log_dir, "google_sheets.log"), encoding="utf-8")
file_handler.setFormatter(logging.Formatter('%(asctime)s | %(levelname)s | %(message)s'))
gs_logger.addHandler(file_handler)

def get_chat_table_map():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —á–∞—Ç–æ–≤ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        if not system_settings.google_sheets_chat_table_map:
            gs_logger.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –º–∞–ø–ø–∏–Ω–≥ —á–∞—Ç–æ–≤ –Ω–∞ —Ç–∞–±–ª–∏—Ü—ã")
            return {}
        return json.loads(system_settings.google_sheets_chat_table_map)
    except Exception as e:
        gs_logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–ø–ø–∏–Ω–≥–∞ —á–∞—Ç–æ–≤: {e}")
        return {}

async def get_worksheet_name_by_chat_id(chat_id: str) -> str:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–º—è worksheet –ø–æ chat_id —á–µ—Ä–µ–∑ nickneim –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å rang='group'"""
    user = None
    try:
        async with db.pool.acquire() as conn:
            user = await conn.fetchrow('''
                SELECT nickneim FROM "VSEPExchanger"."user" WHERE id = $1 AND rang = 'group'
            ''', int(chat_id))
    except Exception as e:
        gs_logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
        logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
        print(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ chat_id {chat_id}: {e}")
        return None
    if not user or not user['nickneim']:
        gs_logger.error(f"[GSheets] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –∏ rang='group'")
        logger.error(f"[GSheets] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –∏ rang='group'")
        print(f"[GSheets] –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å chat_id {chat_id} –∏ rang='group'")
        return None
    prefix = user['nickneim'].split('_')[0]
    worksheet = f"VSEP_{prefix}"
    return worksheet

class GSheetWriteResult:
    def __init__(self):
        self.success_count = 0
        self.error_count = 0
        self.errors = []

    def add_success(self):
        self.success_count += 1

    def add_error(self, error_msg: str):
        self.error_count += 1
        self.errors.append(error_msg)

    def get_summary_message(self) -> str:
        if self.success_count == 0 and self.error_count == 0:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∑–∞–ø–∏—Å–∏"
        
        message = []
        message.append(f"üü§ –ó–∞—è–≤–∫–∏ —Å –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω–Ω—ã–º —Ä–∞—Å—á—ë—Ç–æ–º –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
        if self.success_count > 0:
            message.append(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –∑–∞—è–≤–æ–∫: {self.success_count}")
        if self.error_count > 0:
            message.append(f"‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {self.error_count}")
            if self.errors:
                message.append("\n–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:")
                message.append(self.errors[-1])
        return "\n".join(message)

async def send_gsheet_summary(chat_id: str, result: GSheetWriteResult):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ –≤ Google Sheets
    """
    try:
        gs_logger.info(f"[GSheets] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}: {result.get_summary_message()}")
        bot = Bot(token=config.BOT_TOKEN)
        message = result.get_summary_message()
        await bot.send_message(chat_id=chat_id, text=message)
        await bot.session.close()
        gs_logger.info(f"[GSheets] –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
    except Exception as e:
        gs_logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")
        logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id}: {e}")

async def write_to_google_sheet_async(
    chat_id: str,
    row_data: list,
    worksheet_name: str = None,
    write_result: GSheetWriteResult = None
):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ Google Sheet –Ω–∞ –ª–∏—Å—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º—ã–π –ø–æ chat_id —á–µ—Ä–µ–∑ nickneim.
    """
    if worksheet_name is None:
        worksheet_name = await get_worksheet_name_by_chat_id(chat_id)
    if not worksheet_name:
        gs_logger.error(f"[GSheets] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å worksheet –¥–ª—è chat_id {chat_id}")
        logger.error(f"[GSheets] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å worksheet –¥–ª—è chat_id {chat_id}")
        print(f"[GSheets] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å worksheet –¥–ª—è chat_id {chat_id}")
        if write_result:
            write_result.add_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏—Å—Ç —Ç–∞–±–ª–∏—Ü—ã")
        return
    
    try:
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(
            None,
            write_to_google_sheet_sync,
            chat_id,
            row_data,
            worksheet_name
        )
        if write_result:
            write_result.add_success()
        gs_logger.info(f"[GSheets] –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –≤ —Ç–∞–±–ª–∏—Ü—É")
    except Exception as e:
        error_msg = str(e)
        gs_logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {error_msg}")
        logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {error_msg}")
        print(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {error_msg}")
        if write_result:
            write_result.add_error(error_msg)
        raise

async def write_multiple_to_google_sheet(
    chat_id: str,
    rows_data: list,
    worksheet_name: str = None
):
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –≤ Google Sheet –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    """
    write_result = GSheetWriteResult()
    for row_data in rows_data:
        try:
            await write_to_google_sheet_async(chat_id, row_data, worksheet_name, write_result)
        except Exception as e:
            continue
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await send_gsheet_summary(chat_id, write_result)
    # –ï—Å–ª–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø–∏—Å–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if write_result.success_count > 0:
        bot = Bot(token=config.BOT_TOKEN)
        await bot.send_message(
            chat_id=chat_id,
            text="–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –°–µ—Ä–≤–∏—Å–æ–º –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ –æ—Ç—á–µ—Ç–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –ü–∞—Ä—Ç–Ω–µ—Ä–∞"
        )
        await bot.session.close()

def format_value_for_gsheet(value):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets.
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –≤ —Å—Ç—Ä–æ–∫—É, Decimal –≤ float, –æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥—Ä—É–≥–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –µ—Å—Ç—å.
    """
    if isinstance(value, datetime):
        return value.strftime("%d.%m.%Y")
    if isinstance(value, Decimal):
        return float(value)
    return value

def prepare_row_for_gsheet(row_data):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets –ø–æ –Ω–æ–≤–æ–º—É –¢–ó:
    A: –¥–∞—Ç–∞ –≤—Ä–µ–º—è (—Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY)
    B: –°—É–º–º–∞ –≤ IDR
    C: –°—É–º–º–∞ –≤ RUB
    D: Note
    E: —á–µ–∫–±–æ–∫—Å (–ø—É—Å—Ç–æ)
    F: –ø—Ä–æ–ø—É—â–µ–Ω–æ
    G: –ø—Ä–æ–ø—É—â–µ–Ω–æ
    H: –ö—É—Ä—Å –æ–±–º–µ–Ω–∞
    I: –°—Ç–∞—Ç—É—Å
    J: –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞)
    K: –†–µ–∫–≤–∏–∑–∏—Ç—ã
    L: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
    M: —á–∞—Ç id
    N: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /transfer (—Å—Ç—Ä–æ–∫–∞)
    """
    # row_data: [transaction_number, user_nick, idr_amount, rub_amount, used_rate, status, note, acc_info, history, source_chat, now_str]
    # –ò–Ω–¥–µ–∫—Å—ã:      0               1         2          3         4         5      6     7        8        9         10
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    date_value = row_data[10]
    if isinstance(date_value, datetime):
        date_fmt = date_value.strftime("%d.%m.%Y")
    else:
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM:SS
            date_obj = datetime.strptime(date_value.split(' ')[0], "%Y-%m-%d")
            date_fmt = date_obj.strftime("%d.%m.%Y")
        except Exception:
            date_fmt = str(date_value)  # fallback, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Ç–æ—Ç

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ N (–¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /transfer)
    transfer_dt_value = row_data[11]
    if isinstance(transfer_dt_value, datetime):
        transfer_dt_fmt = transfer_dt_value.strftime("%d.%m.%Y")
    else:
        try:
            transfer_dt_fmt = datetime.strptime(transfer_dt_value.split(' ')[0], "%Y-%m-%d").strftime("%d.%m.%Y")
        except Exception:
            transfer_dt_fmt = str(transfer_dt_value)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è
    formatted_row = [
        date_fmt,           # A: –¥–∞—Ç–∞ –≤—Ä–µ–º—è (DD.MM.YYYY)
        format_value_for_gsheet(row_data[2]),  # B: –°—É–º–º–∞ –≤ IDR
        format_value_for_gsheet(row_data[3]),  # C: –°—É–º–º–∞ –≤ RUB
        row_data[6],        # D: Note
        False,              # E: —á–µ–∫–±–æ–∫—Å (–ø—É—Å—Ç–æ)
        None,               # F: –ø—Ä–æ–ø—É—â–µ–Ω–æ
        None,               # G: –ø—Ä–æ–ø—É—â–µ–Ω–æ
        format_value_for_gsheet(row_data[4]),  # H: –ö—É—Ä—Å –æ–±–º–µ–Ω–∞
        row_data[5],        # I: –°—Ç–∞—Ç—É—Å
        f"'{str(row_data[0]).zfill(6)}'",  # J: –ù–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (—Å—Ç—Ä–æ–∫–∞ —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏, –≤ –∫–∞–≤—ã—á–∫–∞—Ö)
        row_data[7],        # K: –†–µ–∫–≤–∏–∑–∏—Ç—ã
        row_data[8],        # L: –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
        row_data[9],        # M: —á–∞—Ç id
        transfer_dt_fmt,    # N: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /transfer (DD.MM.YYYY)
    ]
    return formatted_row

def write_to_google_sheet_sync(
    chat_id: str,
    row_data: list,
    worksheet_name: str = None
):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ Google Sheet –Ω–∞ –ª–∏—Å—Ç worksheet_name.
    :param chat_id: id —á–∞—Ç–∞ (—Å—Ç—Ä–æ–∫–æ–π)
    :param row_data: —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏
    :param worksheet_name: –∏–º—è –ª–∏—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    """
    try:
        creds_json = os.getenv("GOOGLE_TABLE_CREDS")
        if not creds_json:
            raise ValueError("GOOGLE_TABLE_CREDS –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ env!")
        creds_dict = json.loads(creds_json)
        gs_logger.info(f"[GSheets] –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ from_service_account_info (–±–µ–∑ —Ñ–∞–π–ª–æ–≤)")
        creds = Credentials.from_service_account_info(
            creds_dict,
            scopes=[
                "https://www.googleapis.com/auth/spreadsheets",
                "https://www.googleapis.com/auth/drive",
                "https://www.googleapis.com/auth/drive.file"
            ]
        )
        gc = gspread.authorize(creds)
        spreadsheet_name = "VSEP_EXCHANGER_PARTNERS"
        gs_logger.info(f"[GSheets] –û—Ç–∫—Ä—ã–≤–∞—é —Ç–∞–±–ª–∏—Ü—É –ø–æ –∏–º–µ–Ω–∏: {spreadsheet_name}")
        sh = gc.open(spreadsheet_name)
        gs_logger.info(f"[GSheets] –û—Ç–∫—Ä—ã–≤–∞—é –ª–∏—Å—Ç: {worksheet_name}")
        ws = sh.worksheet(worksheet_name)
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ Decimal –≤ float –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        row_data = [format_value_for_gsheet(item) for item in row_data]
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è Google Sheets –ø–æ –¢–ó
        gsheet_row = prepare_row_for_gsheet(row_data)
        gs_logger.info(f"[GSheets] –ü—ã—Ç–∞—é—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç—Ä–æ–∫—É: {gsheet_row}")
        ws.append_row(gsheet_row, value_input_option="USER_ENTERED")
        gs_logger.info(f"[GSheets] –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {gsheet_row}")
    except Exception as e:
        gs_logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        logger.error(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        print(f"[GSheets] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        raise 