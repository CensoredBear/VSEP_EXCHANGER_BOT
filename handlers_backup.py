"""
VSEPExchangerBot Handlers
=========================
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–º–µ–Ω–∞.
"""
from aiogram import Dispatcher, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, BotCommandScopeAllGroupChats, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram import Bot
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone, time, timedelta
import pytz
import traceback
from aiogram.utils.markdown import code
import sys
import logging
import re
from db import db
from logger import logger, log_system, log_user, log_func, log_db, log_warning, log_error
from db import db
from procedures.bank_handlers import register_bank_handlers
from permissions import is_admin_or_superadmin, is_operator_or_admin
from help_menu import build_pretty_help_text, get_bot_commands_for_status
from messages import (
    get_bali_and_msk_time_list,
    get_control_usage_message,
    get_control_notify_message,
    # get_control_success_message,
    get_control_error_message,
    send_message,
    get_control_confirm_message,
    get_control_no_attachment_message
)
from chat_logger import log_message
from procedures.input_sum import handle_input_sum
from scheduler import init_scheduler, scheduler, night_shift
from config import config, system_settings
from google_sync import write_to_google_sheet_async
import time
import asyncio
from aiogram.exceptions import TelegramBadRequest

BALI_TZ = timezone(timedelta(hours=8))

def fmt_0(val):
    """Format number with 0 decimal places"""
    if val is None:
        return "‚Äî"
    return f"{val:,.0f}".replace(",", " ").replace(".", ",")

def fmt_2(val):
    """Format number with 2 decimal places"""
    if val is None:
        return "‚Äî"
    return f"{val:,.2f}".replace(",", " ").replace(".", ",")

def fmt_delta(coef):
    """Format coefficient as percentage delta"""
    if coef is None:
        return "‚Äî"
    delta = (coef - 1) * 100
    if abs(delta) < 0.01:
        return "(–±–∞–∑–æ–≤—ã–π)"
    sign = "+" if delta > 0 else ""
    return f"({sign}{delta:.2f}%)".replace(".", ",")

"""üü° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
async def set_commands(bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∞–¥–º–∏–Ω–æ–≤, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ ‚Äî —Å—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–ª—è –≥—Ä—É–ø–ø ‚Äî —Ç–æ–ª—å–∫–æ help –∏ accept
    from aiogram.types import BotCommandScopeDefault, BotCommandScopeAllGroupChats
    from db import db
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–Ω–≥–∞–º–∏
    # (–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
    # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –î–ª—è –≥—Ä—É–ø–ø ‚Äî —Ç–æ–ª—å–∫–æ help –∏ accept
    # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ BotCommandScopeChat
    # –ü–æ—ç—Ç–æ–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî admin-–º–µ–Ω—é, –¥–ª—è –≥—Ä—É–ø–ø ‚Äî help –∏ accept
    admin_commands = get_bot_commands_for_status("admin")
    group_commands = [
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="report", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º")
        # BotCommand(command="accept", description="–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    ]
    await bot.set_my_commands(admin_commands, scope=BotCommandScopeDefault())
    await bot.set_my_commands(group_commands, scope=BotCommandScopeAllGroupChats())

"""üü° –û—Ç–±–∏–≤–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
async def cmd_in_development(message: Message, command_name: str, description: str):
    response = f"<b>{command_name}</b>\n{description}\n\n‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    await message.reply(response)
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command_name} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""üü° –ö–æ–º–∞–Ω–¥–∞ sos"""
async def cmd_sos(message: Message):
    chat = message.chat
    chat_title = chat.title or chat.full_name or str(chat.id)
    msg_id = message.message_id
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat.username:
        link = f"https://t.me/{chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat.id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    user = message.from_user
    user_name = user.full_name
    times = get_bali_and_msk_time_list()
    user_username = f"@{user.username}" if user.username else ""
    alert_text = (
        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        f"<b>–ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê üÜò!</b>\n\n"
        f"–æ—Ç {user_username} –≤ —á–∞—Ç–µ <b>{chat_title}</b>\n"
        f"üïí: {times[6]} (Bali) / {times[5]} (MSK)\n\n"
        f"<b>S‚≠ïÔ∏èS - –°–†–û–ß–ù–û –û–¢–ö–†–û–ô–¢–ï –°–û–û–ë–©–ï–ù–ò–ï!</b>\n\n"

        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{link}"
    )
    await message.bot.send_message(config.ADMIN_GROUP, alert_text, parse_mode="HTML")
    operators = await db.get_operators()
    admins = await db.get_admins()
    superadmins = [u for u in admins if u.get('rang') == 'superadmin']
    user_ids = set()
    for u in operators + admins:
        user_ids.add(u['id'])
    for u in superadmins:
        user_ids.add(u['id'])
    for uid in user_ids:
        try:
            await message.bot.send_message(uid, alert_text, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SOS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await message.reply("SOS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
"""üü° –ö–æ–º–∞–Ω–¥–∞ accept"""
async def cmd_accept(message: Message):
    reply = message.reply_to_message
    args = message.text.split()
    base_error = "<blockquote>–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π [control].</blockquote>"
    
    # 1. –ù–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ—à–∏–±–∫–∞
    if not reply:
        await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ù–ï –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π [control].")
        return

    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–º–∞–Ω–¥—É /control
    reply_text = (getattr(reply, 'text', None) or getattr(reply, 'caption', None) or "")
    if "/control" not in reply_text:
        await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π [control].")
        return

    # # 3. –ù–µ—Ç —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–∞ ‚Äî –æ—à–∏–±–∫–∞
    # if not (
    #     (getattr(message, "photo", None) or getattr(message, "document", None)) or
    #     (reply and (getattr(reply, "photo", None) or getattr(reply, "document", None)))
    # ):
    #     await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º (–∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç–æ–º).")
    #     return

    # 4. –ù–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏ ‚Äî –æ—à–∏–±–∫–∞
    if len(args) < 2:
        await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.")
        return

    transaction_number = args[1].strip()
    transaction = await db.get_transaction_by_number(transaction_number)
    if not transaction:
        await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    if transaction.get('status') not in ("created", "timeout"):
        await message.reply(f"{base_error}\nüö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ <b>'{transaction.get('status')}'</b> –Ω–µ –≤–∞–ª–∏–¥–µ–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    user_rank = await db.get_user_rank(message.from_user.id)
    if user_rank not in ("operator", "admin"):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É —Å–µ—Ä–≤–∏—Å–∞ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    user = message.from_user
    times = get_bali_and_msk_time_list()
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º note –∏–∑ –∫–æ–º–∞–Ω–¥—ã /control
    note_from_control = None
    idx = reply_text.find("/control")
    note_from_control = reply_text[idx + len("/control"):].strip()
    # –û–±–Ω–æ–≤–ª—è–µ–º note –∑–∞—è–≤–∫–∏
    await db.update_transaction_note(transaction_number, note_from_control)

    await db.update_transaction_status(transaction_number, "accept", now_utc)
    confirm_time = times[6]  # –¥–∞—Ç–∞+–≤—Ä–µ–º—è –ø–æ –ë–∞–ª–∏
    user_username = f"@{user.username}" if user.username else user.full_name
    rub = transaction.get('rub_amount', '-')
    idr = transaction.get('idr_amount', '-')
    acc_info = transaction.get('account_info', '-')
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞ —Å —Ä–∞–∑—Ä—è–¥–Ω–æ—Å—Ç—å—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
    try:
        rub_fmt = fmt_0(int(rub))
    except Exception:
        rub_fmt = str(rub)
    try:
        idr_fmt = fmt_0(int(idr))
    except Exception:
        idr_fmt = str(idr)
    caption = (f'''
‚úÖ –ü–ª–∞—Ç—ë–∂  ‚ùØ‚ùØ‚ùØ‚ùØ {rub_fmt} RUB ({idr_fmt} IDR)

<i>–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</i> 
<blockquote><i?{acc_info}</i></blockquote>
    
‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù –ü—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –°–µ—Ä–≤–∏—Å–∞ {user_username}
üïí –≤—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirm_time} (Bali)
üîµ –∑–∞—è–≤–∫–∞ {transaction_number}''')
    # # --- –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å ---
    # control_media = None
    # control_caption = None
    # # 1. –í–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å /control
    # if getattr(reply, 'photo', None):
    #     control_media = reply.photo[-1].file_id  # —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    #     control_caption = caption
    #     await message.reply_photo(control_media, caption=control_caption)
    # elif getattr(reply, 'document', None):
    #     control_media = reply.document.file_id
    #     control_caption = caption
    #     await message.reply_document(control_media, caption=control_caption)
    # # 2. –í–ª–æ–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è /control
    # elif getattr(reply, 'reply_to_message', None):
    #     orig = reply.reply_to_message
    #     if getattr(orig, 'photo', None):
    #         control_media = orig.photo[-1].file_id
    #         control_caption = caption
    #         await message.reply_photo(control_media, caption=control_caption)
    #     elif getattr(orig, 'document', None):
    #         control_media = orig.document.file_id
    #         control_caption = caption
    #         await message.reply_document(control_media, caption=control_caption)
    #     else:
    #         await message.reply(caption)
    # else:
    await message.reply(caption)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ history
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    user_nick = f"@{user.username}" if user.username else user.full_name
    chat_id = message.chat.id
    msg_id = message.message_id
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (accept)
    if message.chat.username:
        link_accept = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link_accept = f"https://t.me/c/{chat_id_num}/{msg_id}"
    # –î–∞–Ω–Ω—ã–µ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏-–∫–æ–Ω—Ç—Ä–æ–ª–µ (reply)
    reply_user = reply.from_user
    reply_nick = f"@{reply_user.username}" if reply_user and reply_user.username else (reply_user.full_name if reply_user else "unknown")
    reply_date = reply.date.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M:%S") if hasattr(reply, 'date') and reply.date else "unknown"
    reply_msg_id = reply.message_id if hasattr(reply, 'message_id') else None
    if message.chat.username and reply_msg_id:
        link_control = f"https://t.me/{message.chat.username}/{reply_msg_id}"
    elif reply_msg_id:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link_control = f"https://t.me/c/{chat_id_num}/{reply_msg_id}"
    else:
        link_control = "-"
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–≤–µ –∑–∞–ø–∏—Å–∏
    control_entry = f"{reply_date}${reply_nick}$control${link_control}"
    accept_entry = f"{now_str}${user_nick}$accept${link_accept}"
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é history
    old_history = transaction.get('history', '')
    if old_history:
        history = old_history + "%%%" + control_entry + "%%%" + accept_entry
    else:
        history = control_entry + "%%%" + accept_entry
    await db.update_transaction_history(transaction_number, history)
    # --- –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è ---
    key = f"{chat_id}_control_counter"
    counter = await db.get_control_counter(chat_id)
    if counter > 0:
        await db.set_control_counter(chat_id, counter - 1)
        log_func(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} (–∫–ª—é—á: {key}) —É–º–µ–Ω—å—à–µ–Ω: {counter} -> {counter-1}")
        log_db(f"[DB] set_system_setting: {key} = {counter-1}")
    else:
        await message.reply(f'''
        –í–ù–ò–ú–ê–ù–ò–ï!!!
                            
<b>üü° ACCEPT without CONTROL</b>

<u>–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞, –ø–æ–¥—Ç–≤—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.</u>

<blockquote><i>–§–ª–∞–≥ –ª–∏—à—å –æ—Ç–º–µ—á–∞–µ—Ç, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CONTROL –º–µ–Ω—å—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ACCEPT. –≠—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π ‚Äì –æ–¥–Ω–∞–∫–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤. –ï—Å–ª–∏ –Ω–∞–π–¥–µ—Ç–µ –æ—à–∏–±–∫—É ‚Äì –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É –¥–ª—è —Ä—É—á–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏.</i></blockquote>''')
        log_func(f"–ü–æ–ø—ã—Ç–∫–∞ —É–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø—Ä–∏ –Ω—É–ª–µ –¥–ª—è —á–∞—Ç–∞ {chat_id} (–∫–ª—é—á: {key})")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–µ—Ä–≤–∏—Å–∞
"""üü° –ö–æ–º–∞–Ω–¥–∞ bank_show"""
async def cmd_bank_show(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_operator_or_admin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—ã—à–µ.")
        return
    accounts = await db.get_active_bank_accounts()
    if not accounts:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
        return
    text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
    for acc in accounts:
        status = []
        if acc.get("is_actual"):
            status.append("üü¢ –ê–ö–¢–£–ê–õ–¨–ù–´–ï")
        if acc.get("is_special"):
            status.append("üî¥ –°–ü–ï–¶")
        status_str = ", ".join(status) if status else "—Ä–µ–∑–µ—Ä–≤"
        text += f"<b>{acc['account_number']}</b>: {acc['bank']}, {acc['card_number']}, {acc['recipient_name']}, {acc['sbp_phone']} ‚Äî {status_str}\n"
    await message.reply(text)

"""üü° –ö–æ–º–∞–Ω–¥–∞ rate_show"""
async def cmd_rate_show(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
        rate = await db.get_actual_rate()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {rate}")
        if not rate:
            logger.warning(f"–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.reply("‚ùå –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        limits = await db.get_rate_limits()
        coefs = await db.get_rate_coefficients()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ª–∏–º–∏—Ç—ã: {limits} –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coefs} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        header = '*‚ôªÔ∏è –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–º–µ–Ω–∞:*'
        lines = []
        coln1 = 15  # –æ—Ç
        coln2 = 12  # –¥–æ
        coln4 = 9  # –∫—É—Ä—Å
        coln5 = 9   # –Ω–∞–¥–±–∞–≤–∫–∞

        lines.append(code('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ'))
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        lines.append(
            code('–æ—Ç').ljust(coln1) +
            code('–¥–æ').ljust(coln2) +
            code('–ö—É—Ä—Å').ljust(coln4) +
            code('–ù–∞–¥–±–∞–≤–∫–∞').ljust(coln5)
        )
        lines.append(code('-' * (coln1 + coln2 + coln4 + coln5)))

        # –°—Ç—Ä–æ–∫–∏ —Å –∫—É—Ä—Å–∞–º–∏
        lines.append(
            '0'.ljust(coln1) +
            fmt_0(limits['main_rate']).ljust(coln2) +
            fmt_2(rate['main_rate']).ljust(coln4) +
            fmt_delta(coefs['main_rate']).ljust(coln5)
        )
        lines.append(
            fmt_0(limits['main_rate']).ljust(coln1) +
            fmt_0(limits['rate1']).ljust(coln2) +
            fmt_2(rate['rate1']).ljust(coln4) +
            fmt_delta(coefs['rate1']).ljust(coln5)
        )
        lines.append(
            fmt_0(limits['rate1']).ljust(coln1) +
            fmt_0(limits['rate2']).ljust(coln2) +
            fmt_2(rate['rate2']).ljust(coln4) +
            fmt_delta(coefs['rate2']).ljust(coln5)
        )
        lines.append(
            fmt_0(limits['rate2']).ljust(coln1) +
            fmt_0(limits['rate3']).ljust(coln2) +
            fmt_2(rate['rate3']).ljust(coln4) +
            fmt_delta(coefs['rate3']).ljust(coln5)
        )
        lines.append(
            fmt_0(limits['rate3']).ljust(coln1) +
            '‚àû'.ljust(coln2) +
            fmt_2(rate['rate4']).ljust(coln4) +
            fmt_delta(coefs['rate4']).ljust(coln5)
        )
        # –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ —Å–ø–µ—Ü. –ª–∏–º–∏—Ç
        lines.append('')
        lines.append(
            code('–û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–≤–æ–∑–≤—Ä–∞—Ç)....').ljust(coln1 + coln2) +
            fmt_2(rate['rate_back']).ljust(coln4) +
            fmt_delta(coefs['rate_back']).ljust(coln5)
        )
        lines.append(
            code('–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç...').ljust(coln1 + coln2) +
            code(fmt_0(rate['rate_special']) + ' —Ä—É–±').ljust(coln4) +
            ' '.ljust(coln5)
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        user_id = rate.get("created_by")
        from_user = "‚Äî"
        if user_id:
            admins = await db.get_admins()
            operators = await db.get_operators()
            users = {str(u['id']): u['nickneim'] for u in list(admins) + list(operators)}
            from_user = users.get(str(user_id), f"id{user_id}")

        created_at = rate.get("created_at")
        lines.append('')
        lines.append(code(f"–í–Ω–µ—Å–µ–Ω–æ: {from_user}"))
        if created_at:
            lines.append(code(f"–î–∞—Ç–∞: {created_at:%d.%m.%Y %H:%M}"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        text = header + '\n```' + '\n'.join(lines) + '\n```'
        
        await message.answer(text, parse_mode="MarkdownV2")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}\n{traceback.format_exc()}"
        logger.error(error_msg)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
async def is_superadmin(user_id: int) -> bool:
    rank = await db.get_user_rank(user_id)
    return rank in ("superadmin", "—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω")

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_show"""
async def cmd_admin_show(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_show –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    admins = await db.get_admins()
    if not admins:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤.")
        return
    text = "<b>–ê–¥–º–∏–Ω—ã —Å–µ—Ä–≤–∏—Å–∞:</b>\n"
    for row in admins:
        text += f"‚úß{row['nickneim']} | {row['id']} | {row['rang']}\n"
    await message.reply(text)
    logger.info(f"{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_add"""
async def cmd_admin_add(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_add –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_add –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –∞–¥–º–∏–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    # --- –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç ---
    user_rank = await db.get_user_rank(user.id)
    if not user_rank:
        await db.add_user_if_not_exists(user.id, username)
        await db.set_user_rank(user.id, "admin")
    text = (
        f"–Æ–∑–µ—Ä—É <b>{username}</b> –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–£ –∞–¥–º–∏–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_add_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_add_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –í –ë–ê–ó–£"""
async def admin_add_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_add_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {user_id} –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await db.set_user_rank(user_id, "admin")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            admins = await db.get_admins()
            for row in admins:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def admin_add_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_add_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_remove"""
async def cmd_admin_remove(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_remove –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_remove –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    text = (
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_remove_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_remove_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É {user.id} ({username}) –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –°–ù–Ø–¢–ò–Ø –ü–†–ê–í –í –ë–ê–ó–£"""
async def admin_remove_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_remove_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "user")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            admins = await db.get_admins()
            for row in admins:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")
        logger.info(f"{admin_id} ({admin_username}) —Å–Ω—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É {user_id} ({username}) –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def admin_remove_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_remove_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_add"""
async def cmd_operator_add(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_add –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_add –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    # --- –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç ---
    user_rank = await db.get_user_rank(user.id)
    if not user_rank:
        await db.add_user_if_not_exists(user.id, username)
        await db.set_user_rank(user.id, "operator")
    text = (
        f"–Æ–∑–µ—Ä—É <b>{username}</b> –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"operator_add_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"operator_add_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {user.id} ({username}) –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –í –ë–ê–ó–£"""
async def operator_add_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_add_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "operator")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            ops = await db.get_operators()
            for row in ops:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.")
        logger.info(f"{admin_id} ({admin_username}) –Ω–∞–∑–Ω–∞—á–∏–ª {user_id} ({username}) –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def operator_add_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_add_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_remove"""
async def cmd_operator_remove(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_remove –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_remove –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    text = (
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"operator_remove_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"operator_remove_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É {user.id} ({username}) –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –°–ù–Ø–¢–ò–Ø –ü–†–ê–í –í –ë–ê–ó–£"""
async def operator_remove_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_remove_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "user")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            ops = await db.get_operators()
            for row in ops:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –±–æ–ª—å—à–µ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.")
        logger.info(f"{admin_id} ({admin_username}) —Å–Ω—è–ª –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É {user_id} ({username}) –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def operator_remove_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_remove_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_show"""
async def cmd_operator_show(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_show –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    ops = await db.get_operators()
    if not ops:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    text = "<b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–∏—Å–∞:</b>\n"
    for row in ops:
        text += f"‚úß {row['nickneim']} | {row['id']} | {row['rang']}\n"
    await message.reply(text)
    logger.info(f"{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")

"""üü° –ö–æ–º–∞–Ω–¥–∞ help"""
async def cmd_help(message: Message):
    print(f"=== CMD_HELP CALLED by {message.from_user.id} ===")
    log_system(f"CMD_HELP CALLED by {message.from_user.id}")
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    help_text = build_pretty_help_text(user_rank)
    await message.reply(help_text)
    logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text={help_text[:200]}")

"""üü° –ö–æ–º–∞–Ω–¥–∞ start"""
async def cmd_start(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø VSEP –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text=–ü—Ä–∏–≤–µ—Ç! –Ø VSEP –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

"""üü° –ö–æ–º–∞–Ω–¥–∞ check"""
async def cmd_check(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    try:
        chat = message.chat
        log_message = f"""
–ö–û–ú–ê–ù–î–ê /CHECK –í–´–ü–û–õ–ù–ï–ù–ê
"""
        logger.info(log_message.upper())
        response = f"""
–ö–û–ú–ê–ù–î–ê /CHECK –í–´–ü–û–õ–ù–ï–ù–ê
–ß–ê–¢ ID: {chat.id}
–¢–ò–ü –ß–ê–¢–ê: {chat.type}
–ù–ê–ó–í–ê–ù–ò–ï –ß–ê–¢–ê: {chat.title if chat.title else '–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}
–ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message.from_user.full_name if message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
USERNAME: @{message.from_user.username if message.from_user and message.from_user.username else '–Ω–µ—Ç username'}
user id: {message.from_user.id if message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.reply_to_message:
            reply = message.reply_to_message
            # –§–æ—Ç–æ
            if reply.photo:
                photo_id = reply.photo[-1].file_id
                response += f"\nID —Ñ–æ—Ç–æ: <code>{photo_id}</code>"
            # –í–∏–¥–µ–æ
            elif reply.video:
                video_id = reply.video.file_id
                response += f"\nID –≤–∏–¥–µ–æ: <code>{video_id}</code>"
            # –î–æ–∫—É–º–µ–Ω—Ç
            elif reply.document:
                doc_id = reply.document.file_id
                response += f"\nID –¥–æ–∫—É–º–µ–Ω—Ç–∞: <code>{doc_id}</code>"
            # –ê–Ω–∏–º–∞—Ü–∏—è (GIF)
            elif reply.animation:
                anim_id = reply.animation.file_id
                response += f"\nID –∞–Ω–∏–º–∞—Ü–∏–∏: <code>{anim_id}</code>"
            # –°—Ç–∏–∫–µ—Ä
            elif reply.sticker:
                sticker_id = reply.sticker.file_id
                response += f"\nID —Å—Ç–∏–∫–µ—Ä–∞: <code>{sticker_id}</code>"
            # –ê—É–¥–∏–æ
            elif reply.audio:
                audio_id = reply.audio.file_id
                response += f"\nID –∞—É–¥–∏–æ: <code>{audio_id}</code>"
            # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif reply.voice:
                voice_id = reply.voice.file_id
                response += f"\nID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{voice_id}</code>"
            # –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif reply.video_note:
                video_note_id = reply.video_note.file_id
                response += f"\nID –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{video_note_id}</code>"

        await message.reply(response, parse_mode="HTML")
        logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text={response[:200]}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /check: {e}"
        logger.error(error_msg)
        await message.reply("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

"""üü° –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
async def send_startup_message(bot: Bot):
    try:
        message = "ü§ñ VSEP –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!"
        await bot.send_message(chat_id=config.ADMIN_GROUP, text=message)
        logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ: {e}")

# === –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ===
router = Router()

@router.message()
async def all_messages_handler(message: Message):
    # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –∏ –Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å, —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ middlewares
    print(f"[DEBUG] all_messages_handler –ø–æ–ª—É—á–∏–ª: {message.text}")
    pass

@router.edited_message()
async def all_edited_messages_handler(message: Message):
    from chat_logger import log_message
    log_message("edit", message.chat, message.from_user, old_text="[—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ]", new_text=message.text)

def register_handlers(dp: Dispatcher):
    print("[DEBUG] register_handlers: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    dp.message.register(cmd_start, CommandStart())
    dp.message.register(cmd_help, Command("help"))
    dp.message.register(cmd_check, Command("check"))
    dp.message.register(cmd_sos, Command("sos"))
    dp.message.register(cmd_accept, Command("accept"))
    dp.message.register(cmd_control, Command("control"))
    dp.message.register(cmd_bank_show, Command("bank_show"))
    dp.message.register(cmd_rate_show, Command("rate_show"))
    dp.message.register(cmd_admin_show, Command("admin_show"))
    dp.message.register(cmd_admin_add, Command("admin_add"))
    dp.message.register(cmd_admin_remove, Command("admin_remove"))
    dp.message.register(cmd_operator_add, Command("operator_add"))
    dp.message.register(cmd_operator_remove, Command("operator_remove"))
    dp.message.register(cmd_operator_show, Command("operator_show"))
    dp.message.register(cmd_cancel, Command("cancel"))
    dp.message.register(cmd_restart, Command("restart"))  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É restart
    register_bank_handlers(dp)
    dp.message.register(cmd_work_open, Command("work_open"))
    dp.message.register(cmd_work_close, Command("work_close"))
    dp.callback_query.register(force_open_callback, lambda c: c.data in ["force_open_yes", "force_open_no"])
    dp.callback_query.register(force_close_callback, lambda c: c.data in ["force_close_yes", "force_close_no"])
    dp.callback_query.register(admin_add_confirm_callback, F.data.startswith("admin_add_confirm:"))
    dp.callback_query.register(admin_add_cancel_callback, F.data.startswith("admin_add_cancel:"))
    dp.callback_query.register(admin_remove_confirm_callback, F.data.startswith("admin_remove_confirm:"))
    dp.callback_query.register(admin_remove_cancel_callback, F.data.startswith("admin_remove_cancel:"))
    dp.callback_query.register(operator_add_confirm_callback, F.data.startswith("operator_add_confirm:"))
    dp.callback_query.register(operator_add_cancel_callback, F.data.startswith("operator_add_cancel:"))
    dp.callback_query.register(operator_remove_confirm_callback, F.data.startswith("operator_remove_confirm:"))
    dp.callback_query.register(operator_remove_cancel_callback, F.data.startswith("operator_remove_cancel:"))
    dp.message.register(cmd_rate_change, Command("rate_change"))
    dp.message.register(rate_change_input, RateChangeStates.waiting_for_new_rate)
    dp.callback_query.register(rate_change_confirm, F.data=="rate_change_confirm")
    dp.callback_query.register(rate_change_cancel, F.data=="rate_change_cancel")
    dp.message.register(handle_input_sum, lambda m: m.text and m.text.strip().startswith("/") and (m.text[1:].isdigit() or (m.text[1:].startswith("-") and m.text[2:].isdigit())))
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(router)  # –í–ö–õ–Æ–ß–ò–¢–¨ –°–ê–ú–´–ú –ü–û–°–õ–ï–î–ù–ò–ú! 
    print("[DEBUG] register_handlers: —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    dp.message.register(cmd_report, Command("report"))
    dp.message.register(cmd_status, Command("status"))
    dp.message.register(cmd_order_show, Command("order_show"))
    dp.message.register(cmd_transfer, Command("transfer"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã control
    dp.message.register(cmd_control, Command("control"))
    dp.callback_query.register(control_callback_handler, F.data.startswith("control_"))
    dp.message.register(cmd_worktime, Command("worktime"))
    dp.message.register(process_shift_time, ShiftTimeStates.waiting_for_time)
    dp.message.register(cmd_work_open, Command("work_open"))
    dp.message.register(cmd_work_close, Command("work_close"))
    dp.callback_query.register(force_open_callback, lambda c: c.data in ["force_open_yes", "force_close_no"])
    dp.callback_query.register(force_close_callback, lambda c: c.data in ["force_close_yes", "force_close_no"])
    dp.message.register(cmd_info, Command("info"))
    dp.message.register(cmd_reset_control, Command("reset_control"))
    dp.message.register(cmd_check_control, Command("check_control"))
    dp.callback_query.register(report_callback_handler, F.data.regexp(r"^report_(bill|cancel)_"))

class RateChangeStates(StatesGroup):
    waiting_for_new_rate = State()
    waiting_for_confirm = State()

"""üü° –ö–æ–º–∞–Ω–¥–∞ rate_change"""
async def cmd_rate_change(message: Message, state: FSMContext):
    """üü° –ö–æ–º–∞–Ω–¥–∞ rate_change"""
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—ã—à–µ.")
        return
    await cmd_rate_show(message)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 177.00):")
    await state.set_state(RateChangeStates.waiting_for_new_rate)
"""üü© –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ /rate_change/"""
async def rate_change_input(message: Message, state: FSMContext):
    text = message.text.replace(",", ".").strip()
    try:
        new_rate = float(text)
    except ValueError:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 177.00")
        return
    rate = await db.get_actual_rate()
    if not rate:
        await message.reply("–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ –∫—É—Ä—Å —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞.")
        await state.clear()
        return
    old_rate = float(rate['main_rate'])
    diff = abs(new_rate - old_rate) / old_rate
    await state.update_data(new_rate=new_rate, old_rate=old_rate)
    if diff > 0.05:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="rate_change_confirm")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="rate_change_cancel")]
        ])
        await message.reply(f"–í–ù–ò–ú–ê–ù–ò–ï: –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 5%!\n–ë—ã–ª–æ: {old_rate:.2f}, —Å—Ç–∞–Ω–µ—Ç: {new_rate:.2f}\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=kb)
        await state.set_state(RateChangeStates.waiting_for_confirm)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="rate_change_confirm")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="rate_change_cancel")]
        ])
        await message.reply(f"–ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å –±—ã–ª: {old_rate:.2f}, —Å—Ç–∞–Ω–µ—Ç: {new_rate:.2f}. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?", reply_markup=kb)
        await state.set_state(RateChangeStates.waiting_for_confirm)
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –ë–ê–ó–£"""
async def rate_change_confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å
    if call.from_user.id != call.message.reply_to_message.from_user.id if call.message.reply_to_message else call.from_user.id:
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    if 'new_rate' not in data:
        try:
            await call.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        except Exception:
            pass
        await call.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    new_rate = float(data['new_rate'])
    coefs = await db.get_rate_coefficients()
    main_coef = float(coefs['main_rate'])
    rate1 = new_rate * float(coefs['rate1']) / main_coef
    rate2 = new_rate * float(coefs['rate2']) / main_coef
    rate3 = new_rate * float(coefs['rate3']) / main_coef
    rate4 = new_rate * float(coefs['rate4']) / main_coef
    rate_back = new_rate * float(coefs['rate_back']) / main_coef
    old_rate_row = await db.get_actual_rate()
    old_rate_special = old_rate_row['rate_special'] if old_rate_row else None
    rate_special = old_rate_special
    await db.pool.execute('UPDATE "VSEPExchanger"."rate" SET is_actual=FALSE WHERE is_actual=TRUE')
    await db.pool.execute('''
        INSERT INTO "VSEPExchanger"."rate" (main_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, created_by, created_at, is_actual)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), TRUE)
    ''', new_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, call.from_user.id)
    await call.message.edit_text("–ö—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã!")
    await cmd_rate_show(call.message)
    await state.clear()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def rate_change_cancel(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å
    if call.from_user.id != call.message.reply_to_message.from_user.id if call.message.reply_to_message else call.from_user.id:
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


  

class ControlStates(StatesGroup):
    waiting_for_crm = State()

async def cmd_control(message: Message, state: FSMContext = None):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /control –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–ø–ª–∞—Ç—ã"""
    log_user(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /control –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /control: {message.text or message.caption}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
    has_attachment = bool(message.photo or message.document or message.video or message.animation)
    is_reply = bool(message.reply_to_message)
    reply_has_attachment = is_reply and bool(
        message.reply_to_message.photo or 
        message.reply_to_message.document or 
        message.reply_to_message.video
    )
    
    if not (has_attachment or reply_has_attachment):
        log_func(f"–ö–æ–º–∞–Ω–¥–∞ /control –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è")
        await message.reply(get_control_no_attachment_message())
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å
    command_text = message.text or message.caption
    if not command_text:
        log_func(f"–ö–æ–º–∞–Ω–¥–∞ /control –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏")
        await message.reply(get_control_no_attachment_message())
        return
    
    args = command_text.strip().split()
    chat = message.chat
    chat_title = chat.title or chat.full_name or str(chat.id)
    
    if len(args) >= 2 and args[1].isdigit():
        # –ö–æ–º–∞–Ω–¥–∞ —Å CRM-–Ω–æ–º–µ—Ä–æ–º
        crm_number = " ".join(args[1:])
        log_func(f"/control —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º: {crm_number}")
    else:
        # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        crm_number = "-"
        log_func(f"/control –±–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {command_text}")
    await message.reply(get_control_confirm_message(crm_number))
    log_func("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—è")
    await process_control_request(message, crm_number)



async def process_control_request(message: Message, crm_number: str):
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å  {crm_number}")
    user = message.from_user
    user_nick = f"@{user.username}" if user.username else user.full_name
    chat_id = message.chat.id
    msg_id = message.message_id
    chat_title = message.chat.title or message.chat.full_name or str(chat_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    log_func(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operators = await db.get_operators()
        log_func(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators)}")
        log_func(f"–°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {operators}")
        # --- –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è ---
        key = f"{chat_id}_control_counter"
        counter = await db.get_control_counter(chat_id)
        new_counter = counter + 1
        await db.set_control_counter(chat_id, new_counter)
        log_func(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} (–∫–ª—é—á: {key}) —É–≤–µ–ª–∏—á–µ–Ω: {counter} -> {new_counter}")
        log_db(f"[DB] set_system_setting: {key} = {new_counter}")
        # ---
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        notify_text = get_control_notify_message(chat_title, user_nick, link, operators, new_counter)
        log_func(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_group = config.ADMIN_GROUP
        await message.bot.send_message(admin_group, notify_text, parse_mode="HTML")
        log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {admin_group}")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        for operator in operators:
            try:
                operator_id = operator['id']
                operator_nick = operator.get('nickneim', '')
                log_func(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick}):\n{notify_text}")
                await message.bot.send_message(
                    operator_id,
                    notify_text,
                    parse_mode="HTML"
                )
                log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick})")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
        log_func("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
        log_func("–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.reply(get_control_error_message("notify_error"))

async def control_callback_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥—ã control"""
    log_user(f"–ü–æ–ª—É—á–µ–Ω callback {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    if call.data == "control_without_crm":
        log_func("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ–∑ CRM'")
        # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        await call.message.edit_reply_markup(reply_markup=None)
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ CRM
        await process_control_request(call.message, "–±–µ–∑ CRM")
    elif call.data == "control_cancel":
        log_func("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        await call.message.delete()
        log_func("–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    log_func("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

async def cmd_cancel(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    args = message.text.strip().split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /cancel <–Ω–æ–º–µ—Ä_–æ—Ä–¥–µ—Ä–∞>")
        return
    transaction_number = args[1]
    transaction = await db.get_transaction_by_number(transaction_number)
    if not transaction:
        await message.reply("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ cancel
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
    await db.update_transaction_status(transaction_number, "cancel", now_utc)
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ history
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    user = message.from_user
    user_nick = f"@{user.username}" if user.username else user.full_name
    chat_id = message.chat.id
    msg_id = message.message_id
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    old_history = transaction.get('history', '')
    new_entry = f"{now_str}${user_nick}$cancel${link}"
    if old_history:
        history = old_history + "%%%" + new_entry
    else:
        history = new_entry
    await db.update_transaction_history(transaction_number, history)
    await message.reply(f"–ó–∞—è–≤–∫–∞ {transaction_number} –æ—Ç–º–µ–Ω–µ–Ω–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º.") 

# def is_night_time():
#     tz = pytz.timezone('Asia/Makassar')
#     now = datetime.now(tz).time()
#     return not (time(9, 0) <= now < time(22, 30))


    


async def cmd_report(message: Message):
    user_id = message.from_user.id
    # if not await is_operator_or_admin(user_id):
    #     await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
    #     return
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    async with db.pool.acquire() as conn:
        created_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'created'
            ORDER BY status_changed_at
        ''', str(chat_id))
        
        accept_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'accept'
            ORDER BY status_changed_at
        ''', str(chat_id))
        
        bill_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'bill'
            ORDER BY status_changed_at
        ''', str(chat_id))

    col1 = 15
    col2 = 12
    col3 = 12
    # –í—Ä–µ–º—è
    times = get_bali_and_msk_time_list()
    dt_line = f"REPORT fromüïí {times[6]} (Bali) / {times[5]} (MSK)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_parts = []
    
    # 1. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created
    header = f"<b>üìã CREATED</b>\n"
    header += f"–í—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –∑–∞—è–≤–∫–∏ —Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(created_rows):<5}</code>\n"
    
    if created_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in created_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(created_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # 2. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept
    header = f"<b>üí∞ ACCEPT</b>\n"
    header += f"–û—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏\n"
    header += f"(–µ—â–µ <u>–Ω–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Å—á–µ—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</u>):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(accept_rows):<5}</code>\n"
    
    if accept_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in accept_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(accept_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # 3. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º bill
    header = f"<b>‚ôªÔ∏è BILL</b>\n"
    header += f"–û—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏,\n–æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω—ë—Ä—É\n"
    header += f"(<u>–≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Å—á–µ—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</u>):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(bill_rows):<5}</code>\n"
    
    if bill_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in bill_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(bill_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_report = dt_line + '\n\n' + '\n\n'.join(report_parts)
    final_report += f'''<i>>>> –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /order_show „Ää–Ω–æ–º–µ—Ä_–æ—Ä–¥–µ—Ä–∞„Äã
>>> –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É „Ää–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç„Äã
<u>–í —Å—á–µ—Ç –≤–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `ACCEPT` –∏ `BILL`</u></i>'''

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
    keyboard = None
    if await is_admin_or_superadmin(user_id):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç üí∞+‚ôªÔ∏è", callback_data=f"report_bill_{user_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data=f"report_cancel_{user_id}")
            ]
        ])
    
    await message.reply(final_report, parse_mode="HTML", reply_markup=keyboard)

async def report_callback_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
    parts = call.data.split('_')
    action = parts[1]  # 'bill' –∏–ª–∏ 'cancel'
    creator_id = int(parts[2])  # user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –µ—ë —Å–æ–∑–¥–∞–ª
    if call.from_user.id != creator_id:
        await call.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
        
    if action == "cancel":
        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest as e:
            if "query is too old" in e.message:
                await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
            else:
                raise
        return

    if action == "bill":
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
         if not await is_admin_or_superadmin(call.from_user.id):
            try:
                 await call.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.", show_alert=True)
            except TelegramBadRequest as e:
                 if "query is too old" in e.message:
                     await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
                 else:
                     raise
            return

         chat_id = call.message.chat.id
         now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
         user = call.from_user
         user_nick = f"@{user.username}" if user.username else user.full_name
         now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
         
         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
         msg_id = call.message.message_id
         if call.message.chat.username:
             link = f"https://t.me/{call.message.chat.username}/{msg_id}"
         else:
             chat_id_num = str(chat_id)
             if chat_id_num.startswith('-100'):
                 chat_id_num = chat_id_num[4:]
             elif chat_id_num.startswith('-'):
                 chat_id_num = chat_id_num[1:]
             link = f"https://t.me/c/{chat_id_num}/{msg_id}"
         
         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
         async with db.pool.acquire() as conn:
             rows = await conn.fetch('''
                 SELECT transaction_number, rub_amount, idr_amount
                 FROM "VSEPExchanger"."transactions"
                 WHERE source_chat = $1 AND status = 'accept'
                 ORDER BY status_changed_at
             ''', str(chat_id))
         
         if not rows:
            try:
                 await call.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.", show_alert=True)
            except TelegramBadRequest as e:
                 if "query is too old" in e.message:
                     await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
                 else:
                     raise
            return

         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
         total_idr = 0
         for row in rows:
             transaction_number = row['transaction_number']
             idr = int(row['idr_amount']) if row['idr_amount'] else 0
             total_idr += idr
             
             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
             transaction = await db.get_transaction_by_number(transaction_number)
             old_history = transaction.get('history', '')
             new_entry = f"{now_str}&{user_nick}&bill&{link}"
             history = old_history + "%%%" + new_entry if old_history else new_entry
             
             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é
             await db.update_transaction_status(transaction_number, "bill", now_utc)
             await db.update_transaction_history(transaction_number, history)
         
         # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         col1 = 15
         col2 = 12
         col3 = 12
         header = '<b>–°–§–û–†–ú–ò–†–û–í–ê–ù –°–ß–ï–¢ –ù–ê –í–´–ü–õ–ê–¢–£:</b>\n'
         header += f"<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(rows)}</code>\n"
         header += f"<code>–°—É–º–º–∞: {fmt_0(total_idr)} IDR</code>\n\n"
         header += '<b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n'
         header += f"<code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
         header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
         
         lines = []
         total_rub = 0
         for row in rows:
             num = str(row['transaction_number'])
             rub = int(row['rub_amount']) if row['rub_amount'] else 0
             idr = int(row['idr_amount']) if row['idr_amount'] else 0
             lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
             total_rub += rub
         
         table = header + '\n'.join(lines)
         table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
         table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code>"
         
         try:
              await call.message.edit_text(table, parse_mode="HTML", reply_markup=None)
              await call.answer("–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", show_alert=True)
         except TelegramBadRequest as e:
              if "query is too old" in e.message:
                  await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
              else:
                  raise

async def cmd_status(message: Message):
    user_id = message.from_user.id
    if not await is_operator_or_admin(user_id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        return
    chat_id = message.chat.id
    async with db.pool.acquire() as conn:
        rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'created'
            ORDER BY created_at
        ''', str(chat_id))
    if not rows:
        await message.reply("–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ –ø–æ —ç—Ç–æ–º—É —á–∞—Ç—É.")
        return
    col1 = 15
    col2 = 12
    col3 = 12
    header = '<b>üü° –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n'
    header += f"<code>{'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    lines = []
    total_rub = 0
    total_idr = 0
    for row in rows:
        num = str(row['transaction_number'])
        rub = int(row['rub_amount']) if row['rub_amount'] else 0
        idr = int(row['idr_amount']) if row['idr_amount'] else 0
        lines.append(f"<code>{num.ljust(col1)}{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
        total_rub += rub
        total_idr += idr
    table = header + '\n'.join(lines)
    table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
    table += f"\n<code>–ò—Ç–æ–≥–æ: {len(rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code>"
    await message.reply(table, parse_mode="HTML")

async def cmd_order_show(message: Message):
    args = message.text.strip().split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order_show <–Ω–æ–º–µ—Ä_–æ—Ä–¥–µ—Ä–∞>")
        return
    order_number = args[1]
    transaction = await db.get_transaction_by_number(order_number)
    if not transaction:
        await message.reply("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞
    is_refund = int(transaction.get('idr_amount', 0)) < 0 or int(transaction.get('rub_amount', 0)) < 0
    idr = abs(int(transaction.get('idr_amount', 0)))
    rub = abs(int(transaction.get('rub_amount', 0)))
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = []
    lines.append(f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏ ‚Ññ <code>{order_number}</code></b>")
    if is_refund:
        lines.append(f"\n<b>–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> {fmt_0(rub)} RUB ‚èÆ {fmt_0(idr)} IDR")
    else:
        lines.append(f"\n<b>–°—É–º–º–∞:</b> {fmt_0(idr)} IDR ‚èÆ {fmt_0(rub)} RUB")
    lines.append(f"\n<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {transaction.get('status','-')}")
    # –î–æ–±–∞–≤–ª—è—é Note
    note = transaction.get('note')
    if not note:
        note = '-'
    lines.append(f"<b>Note:</b> {note}")
    # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    history = transaction.get('history', '')
    hist_lines = []
    if history:
        events = history.split('%%%')
        prev_time = None
        for idx, ev in enumerate(events):
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ $ –∏ & –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            if '$' in ev:
                parts = ev.split('$', 3)
            else:
                parts = ev.split('&', 3)
            if len(parts) < 4:
                if idx == 0 and ev.strip():
                    hist_lines.append(f"{ev.strip()} (—Å–æ–∑–¥–∞–Ω–æ)")
                continue
            dt_str, user, status, link = [p.strip() for p in parts]
            try:
                dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
                dt_bali = dt.replace(tzinfo=timezone.utc).astimezone(BALI_TZ)
            except Exception:
                dt = None
                dt_bali = None
            status_map = {
                'night': 'night',
                'control': 'control',
                'accept': 'accept',
                'accounted': 'accounted',
                'created': 'created',
                '—Å–æ–∑–¥–∞–Ω': '—Å–æ–∑–¥–∞–Ω',
                'cancel': 'cancel',
                # ... –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã ...
            }
            status_disp = status_map.get(status, status)
            time_str = dt_bali.strftime("%H:%M") if dt_bali else "--:--"
            if idx == 0:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–∞—Ç–∞ –¥–¥.–º–º.–≥–≥
                date_str = dt_bali.strftime("%d.%m.%y") if dt_bali else "--.--.--"
                hist_lines.append(f"{date_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            else:
                # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º (–ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –≤ UTC)
                if prev_time and dt:
                    delta = dt - prev_time
                    total_seconds = int(delta.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    seconds = total_seconds % 60
                    delta_str = f"+{hours:02}:{minutes:02}:{seconds:02}"
                else:
                    delta_str = "+--:--:--"
                hist_lines.append(f"{delta_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            prev_time = dt
    if hist_lines:
        lines.append("\n<b>–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è}:</b>")
        lines.extend(hist_lines)
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    acc_info = transaction.get('account_info', '-')
    lines.append(f"\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {acc_info}")
    await message.reply('\n'.join(lines), parse_mode="HTML")

async def cmd_transfer(message: Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    has_attachment = bool(message.photo or message.document or message.video or message.animation)
    is_reply = bool(message.reply_to_message)
    reply_has_attachment = is_reply and bool(
        message.reply_to_message.photo or 
        message.reply_to_message.document or 
        message.reply_to_message.video or 
        message.reply_to_message.animation
    )
    if not (has_attachment or reply_has_attachment):
        await message.reply("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ /transfer [—Å—É–º–º–∞_–≤_IDR] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—É
    command_text = message.text or message.caption
    if not command_text:
        await message.reply("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É: /transfer [—Å—É–º–º–∞_–≤_IDR]")
        return

    progress_msg = await message.reply("‚è≥ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ...")

    # --- –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ ---
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_id = message.from_user.id
    if not await is_admin_or_superadmin(user_id):
        await progress_msg.edit_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        args = command_text.split()
        if len(args) != 2:
            await progress_msg.edit_text("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /transfer [—Å—É–º–º–∞_–≤_IDR] (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)", parse_mode="HTML")
            return
        transfer_amount = float(args[1])
    except ValueError:
        await progress_msg.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º bill –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    async with db.pool.acquire() as conn:
        rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount, status
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 
            AND status = 'bill'
            ORDER BY status_changed_at
        ''', str(chat_id))

    if not rows:
        await progress_msg.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'bill'.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
    total_idr = sum(row['idr_amount'] for row in rows)
    order_count = len(rows)
    tolerance = 1000
    if abs(total_idr - transfer_amount) > tolerance:  # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1000 IDR
        msg = (
            f"üö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n"
            f"–ü–†–ò–ß–ò–ù–ê: —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—á–µ—Ç–æ–º.\n\n"
            f"üîπ –í –ò–ú–ï–Æ–©–ï–ú–°–Ø –°–ß–ï–¢–ï –ù–ê –í–´–ü–õ–ê–¢–£: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'bill', –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –æ–ø–ª–∞—Ç–µ: <b>{order_count}</b> –Ω–∞ —Å—É–º–º—É: <b>{fmt_0(total_idr)} IDR</b>\n"
            f"üî∏ –í –ö–û–ú–ê–ù–î–ï –£–ö–ê–ó–ê–ù–û: <b>{fmt_0(transfer_amount)} IDR</b>\n"
            f"\n–†–∞–∑–Ω–∏—Ü–∞: <b>{fmt_0(abs(total_idr - transfer_amount))} IDR</b>\n"
            f"üí≠ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞."
        )
        await progress_msg.edit_text(msg, parse_mode="HTML")
        return

    # --- –ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä ---
    total = len(rows)
    progress = {'done': 0, 'total': total, 'finished': False}

    async def progress_updater():
        while not progress['finished']:
            percent = int(progress['done'] / total * 100) if total else 100
            try:
                await progress_msg.edit_text(f"‚è≥ –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø–∏—Å—å –≤ –†–ï–ï–°–¢–† –ü–ê–†–¢–ù–ï–†–ê...\n‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {percent}% ({progress['done']} –∏–∑ {total})")
            except Exception:
                pass
            await asyncio.sleep(5)

    # --- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤ (–±—ã—Å—Ç—Ä–æ, –±–µ–∑ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞) ---
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
    user = message.from_user
    user_nick = f"@{user.username}" if user.username else user.full_name
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    chat_id = message.chat.id
    msg_id = message.message_id
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"

    for row in rows:
        transaction_number = row['transaction_number']
        transaction = await db.get_transaction_by_number(transaction_number)
        old_history = transaction.get('history', '')
        new_entry = f"{now_str}&{user_nick}&accounted&{link}"
        history = old_history + "%%%" + new_entry if old_history else new_entry
        await db.update_transaction_status(transaction_number, "accounted", now_utc)
        await db.update_transaction_history(transaction_number, history)

    # --- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets ---
    updater_task = asyncio.create_task(progress_updater())
    for i, row in enumerate(rows):
        transaction = await db.get_transaction_by_number(row['transaction_number'])
        row_data = [
            transaction.get('transaction_number'),
            transaction.get('user_id'),
            transaction.get('idr_amount'),
            transaction.get('rub_amount'),
            transaction.get('rate_used'),
            transaction.get('status'),
            transaction.get('note'),
            transaction.get('account_info'),
            transaction.get('history'),
            transaction.get('source_chat'),
            transaction.get('created_at'),
            now_str
        ]
        chat_id_safe = str(message.chat.id)
        try:
            await write_to_google_sheet_async(chat_id_safe, row_data)
        except Exception as e:
            pass
        progress['done'] = i + 1
    progress['finished'] = True
    await updater_task

    msg = (
        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
        f"–°—É–º–º–∞: <b>{fmt_0(transfer_amount)} IDR</b>\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤: <b>{order_count}</b>\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: <b>{user_nick}</b>\n"
        f"–í—Ä–µ–º—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{now_str}</b>"
    )
    await progress_msg.edit_text(msg, parse_mode="HTML")

"""üü° –ö–æ–º–∞–Ω–¥–∞ restart"""
async def cmd_restart(message: Message):
    """üîµ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
        user_id = message.from_user.id
        user_rank = await db.get_user_rank(user_id)
        
        if user_rank != "superadmin":
            log_system(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—Ä–∞–Ω–≥: {user_rank})", level=logging.WARNING)
            await message.reply("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É")
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
        await message.reply("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        log_system(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ sys.exit(0)
        import sys
        sys.exit(0)
        
    except Exception as e:
        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}", level=logging.ERROR)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

class ShiftTimeStates(StatesGroup):
    waiting_for_time = State()

@router.message(Command("worktime"))
async def cmd_shift_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
        user = await db.get_user(message.from_user.id)
        if not user or user['rang'] != 'superadmin':
            await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "00:00 - 15:00"
        )
        await state.set_state(ShiftTimeStates.waiting_for_time)
        
    except Exception as e:
        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /worktime: {e}", level=logging.ERROR)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

@router.message(ShiftTimeStates.waiting_for_time)
async def process_shift_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        time_pattern = r'^([01]?[0-9]|2[0-3]):[0-5][0-9] - ([01]?[0-9]|2[0-3]):[0-5][0-9]$'
        if not re.match(time_pattern, message.text):
            await message.reply(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n"
                "00:00 - 15:00"
            )
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Ä–µ–º—è
        start_time, end_time = message.text.split(' - ')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_system_setting('shift_start_time', start_time)
        await db.set_system_setting('shift_end_time', end_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        scheduler = init_scheduler(message.bot)
        await scheduler.update_shift_times()
        scheduler.reset_flags_and_night_shift()
        
        await message.reply(
            f"‚úÖ –í—Ä–µ–º—è —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
            f"–ù–∞—á–∞–ª–æ: {start_time}\n"
            f"–ö–æ–Ω–µ—Ü: {end_time}"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã: {e}", level=logging.ERROR)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã.")
        await state.clear()

class ShiftTimeStates(StatesGroup):
    waiting_for_time = State()

async def cmd_worktime(message: Message, state: FSMContext):
    try:
        user_rank = await db.get_user_rank(message.from_user.id)
        if user_rank != 'superadmin':
            await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        shift_start = await db.get_system_setting('shift_start_time')
        shift_end = await db.get_system_setting('shift_end_time')
        await message.reply(
            f"–¢–µ–∫—É—â–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {shift_start} - {shift_end}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å–º–µ–Ω—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "—á—á:–º–º - —á—á:–º–º (–Ω–∞–ø—Ä–∏–º–µ—Ä 09:00 - 22:00)"
        )
        await state.set_state(ShiftTimeStates.waiting_for_time)
    except Exception as e:
        log_system(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /worktime: {e}", level=logging.ERROR)
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã.")

async def cmd_work_open(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    if user_rank != 'superadmin':
        await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    status = "–æ—Ç–∫—Ä—ã—Ç–∞" if not night_shift else "–∑–∞–∫—Ä—ã—Ç–∞"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="force_open_yes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="force_open_no")]
        ]
    )
    await message.reply(f"–°–µ–π—á–∞—Å —Å–º–µ–Ω–∞ {status}.\n–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É?", reply_markup=kb)

async def cmd_work_close(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    if user_rank != 'superadmin':
        await message.reply("‚ö†Ô∏è –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    status = "–æ—Ç–∫—Ä—ã—Ç–∞" if not night_shift else "–∑–∞–∫—Ä—ã—Ç–∞"
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ó–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="force_close_yes")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="force_close_no")]
        ]
    )
    await message.reply(f"–°–µ–π—á–∞—Å —Å–º–µ–Ω–∞ {status}.\n–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É?", reply_markup=kb)

# Callback handlers
async def force_open_callback(call: CallbackQuery, data: dict):
    print("DATA IN force_open_callback:", data)
    if call.data == "force_open_yes":
        await scheduler.send_shift_start()
        scheduler.sent_start_today = True
        scheduler.sent_end_today = False
        await call.message.edit_text("–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞.")
    else:
        await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def force_close_callback(call: CallbackQuery, data: dict):
    print("DATA IN force_close_callback:", data)
    if call.data == "force_close_yes":
        await scheduler.send_shift_end()
        scheduler.sent_end_today = True
        await call.message.edit_text("–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
    else:
        await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –∏ callback'–æ–≤

async def cmd_info(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    if user_rank != "superadmin":
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    # –°–±–æ—Ä —Ñ–ª–∞–≥–æ–≤
    info = [
        f"<b>night_shift</b>: <code>{night_shift}</code>",
        f"<b>scheduler.is_running</b>: <code>{getattr(scheduler, 'is_running', None)}</code>",
        f"<b>scheduler.sent_start_today</b>: <code>{getattr(scheduler, 'sent_start_today', None)}</code>",
        f"<b>scheduler.sent_end_today</b>: <code>{getattr(scheduler, 'sent_end_today', None)}</code>",
        f"<b>scheduler.shift_start</b>: <code>{getattr(scheduler, 'shift_start', None)}</code>",
        f"<b>scheduler.shift_end</b>: <code>{getattr(scheduler, 'shift_end', None)}</code>",
        f"<b>system_settings.shift_start_time</b>: <code>{getattr(system_settings, 'shift_start_time', None)}</code>",
        f"<b>system_settings.shift_end_time</b>: <code>{getattr(system_settings, 'shift_end_time', None)}</code>",
    ]
    await message.reply("<b>–¢–µ–∫—É—â–∏–µ —Ñ–ª–∞–≥–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n" + "\n".join(info), parse_mode="HTML")

async def cmd_bank_new(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

async def cmd_bank_change(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

async def cmd_rate_zone_change(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

async def cmd_rate_coef(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ ...

async def cmd_reset_control(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        return
    chat_id = message.chat.id
    await db.set_control_counter(chat_id, 0)
    await message.reply("–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0).")

async def report_bill_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    if not await is_admin_or_superadmin(user_id):
        await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not callback_query.data.endswith(str(user_id)):
        await callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    async with db.pool.acquire() as conn:
        accept_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'accept'
            ORDER BY status_changed_at
        ''', str(chat_id))
        
        bill_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'bill'
            ORDER BY status_changed_at
        ''', str(chat_id))

    if not accept_rows and not bill_rows:
        await callback_query.answer("–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.", show_alert=True)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—á–µ—Ç
    col1 = 15
    col2 = 12
    col3 = 12
    times = get_bali_and_msk_time_list()
    dt_line = f"BILL fromüïí {times[6]} (Bali) / {times[5]} (MSK)"

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫
    all_rows = list(accept_rows) + list(bill_rows)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
    header = f"<b>–°—á–µ—Ç –∫ –≤—ã–ø–ª–∞—Ç–µ</b>\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(all_rows):<5}</code>\n"
    
    lines = []
    total_rub = 0
    total_idr = 0
    for row in all_rows:
        num = str(row['transaction_number'])
        rub = int(row['rub_amount']) if row['rub_amount'] else 0
        idr = int(row['idr_amount']) if row['idr_amount'] else 0
        lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
        total_rub += rub
        total_idr += idr
    
    table = header + '\n'.join(lines)
    table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
    table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(all_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∫–≤–∏–∑–∏—Ç–∞—Ö
    table += f'''

<i>
>>> –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É „Ää–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã„Äã
<u>–í —Å—á–µ—Ç –≤–Ω–µ—Å–µ–Ω—ã –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π `ACCEPT` –∏ `BILL`</u>
</i>'''

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã üí≥", callback_data=f"report_requisites_{user_id}"),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data=f"report_cancel_{user_id}")
        ]
    ])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å—á–µ—Ç
    await callback_query.message.reply(table, parse_mode="HTML", reply_markup=keyboard)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    try:
        old_text = callback_query.message.text
        await callback_query.message.edit_text(old_text, parse_mode="HTML", reply_markup=None)
    except Exception as e:
        print(f"Error editing message: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    await callback_query.answer("–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω.")

async def report_requisites_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    chat_id = callback_query.message.chat.id
    message_id = callback_query.message.message_id  # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è

    if not await is_admin_or_superadmin(user_id):
        await callback_query.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback_data —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not callback_query.data.endswith(str(user_id)):
        await callback_query.answer("–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤–∞–º.", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with db.pool.acquire() as conn:
        row = await conn.fetchrow('''
            SELECT requisites
            FROM "VSEPExchanger"."requisites"
            WHERE chat_id = $1
        ''', str(chat_id))

    if not row or not row['requisites']:
        await callback_query.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
    await callback_query.message.reply(f"<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã:</b>\n\n<code>{row['requisites']}</code>", parse_mode="HTML")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—á–µ—Ç–æ–º, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
    try:
        old_text = callback_query.message.text
        await callback_query.message.edit_text(old_text, parse_mode="HTML", reply_markup=None)
    except Exception as e:
        print(f"Error editing message: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    await callback_query.answer("–†–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")

async def cmd_check_control(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    try:
        chat_id = message.chat.id
        counter = await db.get_control_counter(chat_id)
        await message.reply(f"üìä –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {counter}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç—á–∏–∫–∞.")

@router.message(Command("set_photo_mbt"))
async def cmd_set_photo_mbt(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ photo_id_mbt –¥–ª—è MBT"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    reply = message.reply_to_message
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        file_id = message.photo[-1].file_id
    elif reply and reply.photo:
        file_id = reply.photo[-1].file_id
    else:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/set_photo_mbt</code>\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ: <code>/set_photo_mbt</code>",
            parse_mode="HTML"
        )
        return
    try:
        await db.set_system_setting('photo_id_mbt', file_id)
        system_settings.photo_id_mbt = file_id
        await system_settings.save_settings(db)
        
        response = (
            f"‚úÖ photo_id_mbt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"ID —Ñ–æ—Ç–æ: <code>{file_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ —Ñ–æ—Ç–æ."
        )
        await message.reply(response, parse_mode="HTML")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω photo_id_mbt: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_mbt: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_mbt")

@router.message(Command("set_photo_start"))
async def cmd_set_photo_start(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ photo_id_start"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    photo_message = None
    if message.photo:
        photo_message = message
    elif message.reply_to_message and message.reply_to_message.photo:
        photo_message = message.reply_to_message
    else:
        await message.reply(
            "üì∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é `/set_photo_start`\n"
            "2Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/set_photo_start` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ"
        )
        return
    try:
        photo = photo_message.photo[-1]
        file_id = photo.file_id
        await db.set_system_setting('photo_id_start', file_id)
        system_settings.photo_id_start = file_id
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await system_settings.load_settings(db)
        await message.reply(
            f"‚úÖ photo_id_start —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"üìã –ù–æ–≤—ã–π file_id: <code>{file_id}</code>\n"
            f"üì∏ –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: {photo.width}x{photo.height}\n"
            f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {photo.file_size:,} –±–∞–π—Ç",
            parse_mode="HTML"
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω photo_id_start: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_start: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_start")

@router.message(Command("set_photo_end"))
async def cmd_set_photo_end(message: Message):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ photo_id_end"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    photo_message = None
    if message.photo:
        photo_message = message
    elif message.reply_to_message and message.reply_to_message.photo:
        photo_message = message.reply_to_message
    else:
        await message.reply(
            "üì∏ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é `/set_photo_end`\n"
            "2Ô∏è‚É£ –û—Ç–≤–µ—Ç—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π `/set_photo_end` –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ"
        )
        return
    try:
        photo = photo_message.photo[-1]
        file_id = photo.file_id
        await db.set_system_setting('photo_id_end', file_id)
        system_settings.photo_id_end = file_id
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await system_settings.load_settings(db)
        await message.reply(
            f"‚úÖ photo_id_end —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"üìã –ù–æ–≤—ã–π file_id: <code>{file_id}</code>\n"
            f"üì∏ –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ: {photo.width}x{photo.height}\n"
            f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {photo.file_size:,} –±–∞–π—Ç",
            parse_mode="HTML"
        )
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω photo_id_end: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_end: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ photo_id_end")

@router.message(Command("set_media_mbt"))
async def cmd_set_media_mbt(message: Message):
    print(f"[DEBUG] cmd_set_media_mbt –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç {message.from_user.id}")
    logger.info(f"[CMD] /set_media_mbt –æ—Ç {message.from_user.id} ({getattr(message.from_user, 'username', None)}) –≤ —á–∞—Ç–µ {message.chat.id}")
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ media_mbt –¥–ª—è MBT"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    reply = message.reply_to_message
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        file_id = message.photo[-1].file_id
    elif reply and reply.photo:
        file_id = reply.photo[-1].file_id
    else:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/set_media_mbt</code>\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ: <code>/set_media_mbt</code>",
            parse_mode="HTML"
        )
        return

    try:
        await db.set_system_setting('media_mbt', file_id)
        system_settings.media_mbt = file_id
        await system_settings.save_settings(db)
        
        response = (
            f"‚úÖ media_mbt —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"ID –º–µ–¥–∏–∞: <code>{file_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ –º–µ–¥–∏–∞."
        )
        await message.reply(response, parse_mode="HTML")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω media_mbt: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_mbt: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_mbt")

@router.message(Command("set_media_start"))
async def cmd_set_media_start(message: Message):
    print(f"[DEBUG] cmd_set_media_start –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç {message.from_user.id}")
    logger.info(f"[CMD] /set_media_start –æ—Ç {message.from_user.id} ({getattr(message.from_user, 'username', None)}) –≤ —á–∞—Ç–µ {message.chat.id}")
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ media_start"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    reply = message.reply_to_message
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        file_id = message.photo[-1].file_id
    elif reply and reply.photo:
        file_id = reply.photo[-1].file_id
    else:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/set_media_start</code>\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ: <code>/set_media_start</code>",
            parse_mode="HTML"
        )
        return

    try:
        await db.set_system_setting('media_start', file_id)
        system_settings.media_start = file_id
        await system_settings.save_settings(db)
        
        response = (
            f"‚úÖ media_start —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"ID –º–µ–¥–∏–∞: <code>{file_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Å–º–µ–Ω—ã –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ –º–µ–¥–∏–∞."
        )
        await message.reply(response, parse_mode="HTML")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω media_start: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_start: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_start")

@router.message(Command("set_media_finish"))
async def cmd_set_media_finish(message: Message):
    print(f"[DEBUG] cmd_set_media_finish –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç {message.from_user.id}")
    logger.info(f"[CMD] /set_media_finish –æ—Ç {message.from_user.id} ({getattr(message.from_user, 'username', None)}) –≤ —á–∞—Ç–µ {message.chat.id}")
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ media_finish"""
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    reply = message.reply_to_message
    file_id = None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if message.photo:
        file_id = message.photo[-1].file_id
    elif reply and reply.photo:
        file_id = reply.photo[-1].file_id
    else:
        await message.reply(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ.\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
            "‚Ä¢ –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é: <code>/set_media_finish</code>\n"
            "‚Ä¢ –û—Ç–≤–µ—Ç –Ω–∞ —Ñ–æ—Ç–æ: <code>/set_media_finish</code>",
            parse_mode="HTML"
        )
        return

    try:
        await db.set_system_setting('media_finish', file_id)
        system_settings.media_finish = file_id
        await system_settings.save_settings(db)
        
        response = (
            f"‚úÖ media_finish —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"ID –º–µ–¥–∏–∞: <code>{file_id}</code>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å–º–µ–Ω—ã –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ –º–µ–¥–∏–∞."
        )
        await message.reply(response, parse_mode="HTML")
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω media_finish: {file_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_finish: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ media_finish")

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
print(f"[DEBUG] handlers.py –∑–∞–≥—Ä—É–∂–µ–Ω, router —Å–æ–¥–µ—Ä–∂–∏—Ç {len(router.message.handlers)} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
for handler in router.message.handlers:
    print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç—á–∏–∫: {handler}")
