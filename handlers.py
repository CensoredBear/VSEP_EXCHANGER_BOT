"""
VSEPExchangerBot Handlers
=========================
–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞ –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –æ–±–º–µ–Ω–∞.
"""
from aiogram import Dispatcher, Router
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message, BotCommand, BotCommandScopeDefault, BotCommandScopeAllGroupChats, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, User
from aiogram import Bot
from aiogram import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timezone, time, timedelta
import pytz
import traceback
from aiogram.utils.markdown import code
import sys
import logging
import re
from db import db
from logger import logger, log_system, log_user, log_func, log_db, log_warning, log_error
from db import db
from procedures.bank_handlers import bank_router
from procedures.shift_handlers import force_open_callback, force_close_callback
from procedures.rate_handlers import rate_change_confirm, rate_change_cancel
from permissions import is_admin_or_superadmin, is_operator_or_admin
from help_menu import build_pretty_help_text, get_bot_commands_for_status
from messages import (
    get_bali_and_msk_time_list,
    get_control_usage_message,
    get_control_notify_message,
    # get_control_success_message,
    get_control_error_message,
    send_message,
    get_control_confirm_message,
    get_control_no_attachment_message,
    send_to_admin_group_safe
)
from chat_logger import log_message
from procedures.input_sum import handle_input_sum
from scheduler import init_scheduler, scheduler, night_shift
from config import config, system_settings
from google_sync import write_to_google_sheet_async, write_multiple_to_google_sheet, read_sum_all_report
from utils import fmt_0, fmt_2, fmt_delta
from commands.accept import router as accept_router
from commands.joke import router as joke_router
from commands.dice import router as dice_router
from commands.coin import router as coin_router
from commands.meme import router as meme_router
from commands.order_change import router as order_change_router
import time
import asyncio
from aiogram.exceptions import TelegramBadRequest, TelegramMigrateToChat
import json
from collections import defaultdict
from joke_parser import get_joke, get_joke_with_source
from commands.joke import router as joke_router
from bybit_api import get_idr_usdt_rate
from bybit_p2p import get_p2p_idr_usdt_avg_rate

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
class RateChangeStates(StatesGroup):
    waiting_for_new_rate = State()

class ShiftTimeStates(StatesGroup):
    waiting_for_time = State()

class ControlStates(StatesGroup):
    waiting_for_order_selection = State()

class VsepReportStates(StatesGroup):
    waiting_for_month = State()
    waiting_for_rate = State()

BALI_TZ = timezone(timedelta(hours=8))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π dict: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π control message_id
active_control_message = defaultdict(lambda: None)

# –ö–∞—Å—Ç–æ–º–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
class MonthYearCalendar:
    """–ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ–ª—å–∫–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞"""
    
    def __init__(self, locale='ru_RU'):
        self.locale = locale
        self.months = {
            'ru_RU': [
                '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
            ],
            'en_US': [
                'January', 'February', 'March', 'April', 'May', 'June',
                'July', 'August', 'September', 'October', 'November', 'December'
            ]
        }
        self.months_short = {
            'ru_RU': [
                '—è–Ω–≤.', '—Ñ–µ–≤.', '–º–∞—Ä.', '–∞–ø—Ä.', '–º–∞–π', '–∏—é–Ω.',
                '–∏—é–ª.', '–∞–≤–≥.', '—Å–µ–Ω—Ç.', '–æ–∫—Ç.', '–Ω–æ—è–±.', '–¥–µ–∫.'
            ],
            'en_US': [
                'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
                'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
            ]
        }
    
    def create_month_year_keyboard(self, year: int, month: int = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞"""
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        
        builder = InlineKeyboardBuilder()
        
        # –ï—Å–ª–∏ –º–µ—Å—è—Ü –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Å—è—Ü—ã
        if month is None:
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥–æ–¥–æ–º
            builder.row(InlineKeyboardButton(
                text=f"üìÖ {year}",
                callback_data=f"my_year_{year}"
            ))
            
            # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –≥–æ–¥–∞–º
            nav_row = []
            nav_row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"my_year_{year-1}"
            ))
            nav_row.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"my_year_{year+1}"
            ))
            builder.row(*nav_row)
            
            # –ú–µ—Å—è—Ü—ã (3 –≤ —Ä—è–¥)
            months = self.months.get(self.locale, self.months['en_US'])
            for i in range(0, 12, 3):
                row = []
                for j in range(3):
                    if i + j < 12:
                        month_num = i + j + 1
                        row.append(InlineKeyboardButton(
                            text=months[i + j],
                            callback_data=f"my_month_{year}_{month_num}"
                        ))
                builder.row(*row)
            
            # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            builder.row(InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="my_cancel"
            ))
        
        return builder.as_markup()
    
    def process_selection(self, callback_data: str) -> tuple[bool, dict]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ"""
        if callback_data == "my_cancel":
            return True, {"action": "cancel"}
        
        if callback_data.startswith("my_year_"):
            year = int(callback_data.split("_")[2])
            return False, {"year": year, "month": None}
        
        if callback_data.startswith("my_month_"):
            parts = callback_data.split("_")
            year = int(parts[2])
            month = int(parts[3])
            return True, {"year": year, "month": month}
        
        return False, {}

"""üü° –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
async def set_commands(bot: Bot):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–∞–¥–º–∏–Ω–æ–≤, –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: –¥–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ ‚Äî —Å—Ç–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç–∞—Ç—É—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # –î–ª—è –≥—Ä—É–ø–ø ‚Äî —Ç–æ–ª—å–∫–æ help –∏ accept
    from aiogram.types import BotCommandScopeDefault, BotCommandScopeAllGroupChats
    from db import db
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–Ω–≥–∞–º–∏
    # (–í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å)
    # –î–ª—è –ª–∏—á–Ω—ã—Ö —á–∞—Ç–æ–≤ ‚Äî –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # –î–ª—è –≥—Ä—É–ø–ø ‚Äî —Ç–æ–ª—å–∫–æ help –∏ accept
    # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ Telegram API –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –º–µ–Ω—é ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ BotCommandScopeChat
    # –ü–æ—ç—Ç–æ–º—É –¥–ª—è –≤—Å–µ—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî admin-–º–µ–Ω—é, –¥–ª—è –≥—Ä—É–ø–ø ‚Äî help –∏ accept
    admin_commands = get_bot_commands_for_status("admin")
    group_commands = [
        BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"),
        BotCommand(command="report", description="–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º")
        # BotCommand(command="accept", description="–û—Ç–º–µ—Ç–∫–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    ]
    await bot.set_my_commands(admin_commands, scope=BotCommandScopeDefault())
    await bot.set_my_commands(group_commands, scope=BotCommandScopeAllGroupChats())

"""üü° –û—Ç–±–∏–≤–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"""
async def cmd_in_development(message: Message, command_name: str, description: str):
    response = f"<b>{command_name}</b>\n{description}\n\n‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    await message.reply(response)
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ {command_name} (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# === CALLBACK HANDLERS –î–õ–Ø –°–ú–ï–ù ===
async def force_open_callback(call: CallbackQuery, data: dict):
    print("DATA IN force_open_callback:", data)
    if call.data == "force_open_yes":
        await scheduler.send_shift_start()
        scheduler.sent_start_today = True
        scheduler.sent_end_today = False
        await call.message.edit_text("–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞.")
    else:
        await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

async def force_close_callback(call: CallbackQuery, data: dict):
    print("DATA IN force_close_callback:", data)
    if call.data == "force_close_yes":
        await scheduler.send_shift_end()
        scheduler.sent_end_today = True
        await call.message.edit_text("–°–º–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞.")
    else:
        await call.message.edit_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# === CALLBACK HANDLERS –î–õ–Ø –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ö–£–†–°–û–í ===
async def rate_change_confirm(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å
    if call.from_user.id != call.message.reply_to_message.from_user.id if call.message.reply_to_message else call.from_user.id:
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    if 'new_rate' not in data:
        try:
            await call.answer("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        except Exception:
            pass
        await call.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    new_rate = float(data['new_rate'])
    coefs = await db.get_rate_coefficients()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã
    if not coefs:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    main_coef = float(coefs['main_rate'])
    rate1 = new_rate * float(coefs['rate1']) / main_coef
    rate2 = new_rate * float(coefs['rate2']) / main_coef
    rate3 = new_rate * float(coefs['rate3']) / main_coef
    rate4 = new_rate * float(coefs['rate4']) / main_coef
    rate_back = new_rate * float(coefs['rate_back']) / main_coef
    old_rate_row = await db.get_actual_rate()
    old_rate_special = old_rate_row['rate_special'] if old_rate_row else None
    rate_special = old_rate_special
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω
    if not db.pool:
        await call.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    await db.pool.execute('UPDATE "VSEPExchanger"."rate" SET is_actual=FALSE WHERE is_actual=TRUE')
    await db.pool.execute('''
        INSERT INTO "VSEPExchanger"."rate" (main_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, created_by, created_at, is_actual)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW(), TRUE)
    ''', new_rate, rate1, rate2, rate3, rate4, rate_back, rate_special, call.from_user.id)
    await call.message.edit_text("–ö—É—Ä—Å—ã –∏–∑–º–µ–Ω–µ–Ω—ã!")
    await cmd_rate_show(call.message)
    await state.clear()

async def rate_change_cancel(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    # –ó–∞—â–∏—Ç–∞: —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å
    if call.from_user.id != call.message.reply_to_message.from_user.id if call.message.reply_to_message else call.from_user.id:
        try:
            await call.answer("–¢–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞!", show_alert=True)
        except Exception:
            pass
        return
    await call.message.edit_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# === CALLBACK HANDLERS –î–õ–Ø CONTROL ===
async def process_control_request(message: Message, crm_number: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è"""
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å {crm_number}")
    user = message.from_user
    user_nick = f"@{user.username}" if user.username else user.full_name
    chat_id = message.chat.id
    msg_id = message.message_id
    chat_title = message.chat.title or message.chat.full_name or str(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    
    log_func(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operators = await db.get_operators()
        if not operators:
            await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.")
            return
        log_func(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators)}")
        
        # –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        counter = await db.get_control_counter(chat_id)
        if counter is None:
            counter = 0
        new_counter = counter + 1
        await db.set_control_counter(chat_id, new_counter)
        log_func(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–≤–µ–ª–∏—á–µ–Ω: {counter} -> {new_counter}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        all_counters = await db.get_all_control_counters()
        if not all_counters:
            all_counters = []
        log_func(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è: {len(all_counters)} —á–∞—Ç–æ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        operator_nicks = []
        for op in operators:
            nick = op.get('nickneim', str(op['id']))
            if nick.startswith('@'):
                operator_nicks.append(nick)
            else:
                operator_nicks.append(f"@{nick}")
        operators_text = ", ".join(operator_nicks) if operator_nicks else "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
        counter_lines = []
        for chat_counter in all_counters:
            if chat_counter['counter'] > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã —Å —Å—á–µ—Ç—á–∏–∫–æ–º > 0
                counter_emoji = "üü®" if chat_counter['counter'] == 1 else "üü•" * chat_counter['counter']
                counter_lines.append(f"{counter_emoji} –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è <code>{chat_counter['chat_title']}</code>: {chat_counter['counter']}")
        
        counters_text = "\n".join(counter_lines) if counter_lines else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è"
        
        notify_text = f"""<b>‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–Æ –û–ü–ï–†–ê–¢–û–†–û–í:</b> 
üë®‚Äçüíª {operators_text}

‚öúÔ∏è <b>–ó–ê–ü–†–û–° –ö–û–ù–¢–†–û–õ–Ø –û–ü–õ–ê–¢–´</b>
    –∏–∑ —á–∞—Ç–∞: <code>{chat_title}</code>
üë§ <b>–ê–≤—Ç–æ—Ä:</b> <code>{user_nick}</code>
üîó <b>–°—Å—ã–ª–∫–∞:</b> <b><a href='{link}'>–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–ü–†–û–°–£</a></b>

üìù <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> <code>{crm_number}</code>

{counters_text}
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        await send_to_admin_group_safe(message.bot, notify_text)
        log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {config.ADMIN_GROUP}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        for operator in operators:
            try:
                operator_id = operator['id']
                operator_nick = operator.get('nickneim', '')
                log_func(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick})")
                await message.bot.send_message(
                    operator_id,
                    notify_text,
                    parse_mode="HTML"
                )
                log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick})")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
        
        log_func("–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.")

async def process_control_request_with_order(message: Message, crm_number: str, transaction_number: str, order: dict, user: User = None):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–æ–π"""
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞—è–≤–∫–∏ {transaction_number} —Å {crm_number}")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user is None:
        user = message.from_user
    
    user_nick = f"@{user.username}" if user.username else user.full_name
    chat_id = message.chat.id
    msg_id = message.message_id + 1
    chat_title = message.chat.title or message.chat.full_name or str(chat_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    
    log_func(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {link}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        operators = await db.get_operators()
        if not operators:
            await message.reply("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è.")
            return
        log_func(f"–ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators)}")
        
        # –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        counter = await db.get_control_counter(chat_id)
        if counter is None:
            counter = 0
        new_counter = counter + 1
        await db.set_control_counter(chat_id, new_counter)
        log_func(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É–≤–µ–ª–∏—á–µ–Ω: {counter} -> {new_counter}")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–æ –≤—Å–µ–º —á–∞—Ç–∞–º
        all_counters = await db.get_all_control_counters()
        if not all_counters:
            all_counters = []
        log_func(f"–ü–æ–ª—É—á–µ–Ω—ã —Å—á–µ—Ç—á–∏–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è: {len(all_counters)} —á–∞—Ç–æ–≤")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        operator_nicks = []
        for op in operators:
            nick = op.get('nickneim', str(op['id']))
            if nick.startswith('@'):
                operator_nicks.append(nick)
            else:
                operator_nicks.append(f"@{nick}")
        operators_text = ", ".join(operator_nicks) if operator_nicks else "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏ –∫–æ–Ω—Ç—Ä–æ–ª—è
        counter_lines = []
        for chat_counter in all_counters:
            if chat_counter['counter'] > 0:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Ç—ã —Å —Å—á–µ—Ç—á–∏–∫–æ–º > 0
                counter_emoji = "üü®" if chat_counter['counter'] == 1 else "üü•" * chat_counter['counter']
                counter_lines.append(f"{counter_emoji} –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è <code>{chat_counter['chat_title']}</code>: {chat_counter['counter']}")
        
        counters_text = "\n".join(counter_lines) if counter_lines else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª—è"
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rub_amount = int(order['rub_amount']) if order['rub_amount'] else 0
        idr_amount = int(order['idr_amount']) if order['idr_amount'] else 0
        rub_formatted = f"{rub_amount:,}".replace(",", " ")
        idr_formatted = f"{idr_amount:,}".replace(",", " ")
        
        notify_text = f"""<b>‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–Æ –û–ü–ï–†–ê–¢–û–†–û–í ‚ö†Ô∏è:</b> {operators_text}

‚ñí‚ñë <b>–ó–ê–ü–†–û–° –ö–û–ù–¢–†–û–õ–Ø –û–ü–õ–ê–¢–´</b> ‚ñë‚ñí
‚Ä¢ –∏–∑ —á–∞—Ç–∞: <code>{chat_title}</code>
‚Ä¢ <b>–ê–≤—Ç–æ—Ä:</b> <code>{user_nick}</code>

‚Ä¢ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>#{transaction_number}</code>
‚Ä¢ <b>–°—É–º–º–∞:</b> <code>{rub_formatted} RUB | {idr_formatted} IDR</code>
‚Ä¢ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> <code>{crm_number}</code>
‚Ä¢ <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏:</b> –ù–ê –ö–û–ù–¢–†–û–õ–ï

{counters_text}

‚Ä¢ <b>–°—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å:</b>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
‚òë <b><a href='{link}'>–ü–ï–†–ï–ô–¢–ò –ö –ó–ê–ü–†–û–°–£</a></b> ‚òë
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
(–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã –∞–∫—Ü–µ–ø—Ç–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É)
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        await send_to_admin_group_safe(message.bot, notify_text)
        log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç {config.ADMIN_GROUP}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∂–¥–æ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
        for operator in operators:
            try:
                operator_id = operator['id']
                operator_nick = operator.get('nickneim', '')
                log_func(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick})")
                await message.bot.send_message(
                    operator_id,
                    notify_text,
                    parse_mode="HTML"
                )
                log_system(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id} ({operator_nick})")
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä—É {operator_id}: {e}")
        
        log_func("–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª—è —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º.")

async def control_callback_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥—ã control"""
    log_user(f"–ü–æ–ª—É—á–µ–Ω callback {call.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (–≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    state_data = await state.get_data()
    owner_id = state_data.get('owner_id')
    
    if not owner_id:
        await call.answer("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —É—Å—Ç–∞—Ä–µ–ª–∏.", show_alert=True)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∏–ª–∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    is_owner = call.from_user.id == owner_id
    is_superadmin_user = await is_superadmin(call.from_user.id)
    
    if not (is_owner or is_superadmin_user):
        await call.answer("‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞. –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.", show_alert=True)
        return
    
    if call.data == "control_cancel":
        log_func("–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞'")
        
        # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
        state_data = await state.get_data()
        expire_task = state_data.get('expire_task')
        base_text = state_data.get('base_text', '')
        if expire_task and not expire_task.done():
            expire_task.cancel()
            log_func("–ó–∞–¥–∞—á–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        new_text = base_text + "\n\n** ‚ÑπÔ∏è –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨ –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–û–ú ‚ÑπÔ∏è. –ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê –û–¢–ú–ï–ù–ê**"
        
        await call.message.edit_text(
            text=new_text,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        )
        # –û—á–∏—â–∞–µ–º message_id
        active_control_message[call.message.chat.id] = None
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        log_func("–ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã, –¥–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –æ–± –æ—Ç–º–µ–Ω–µ")
        return
    
    if call.data.startswith("control_order_"):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞—è–≤–∫–∏
        parts = call.data.split("_")
        if len(parts) >= 3:
            transaction_number = parts[2]
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            crm_number = state_data.get('crm_number', '-')
            
            log_func(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏ {transaction_number} —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º: {crm_number}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ "–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ"
            if not db.pool:
                await call.answer("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
                return
            
            try:
                async with db.pool.acquire() as conn:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å "—Å–æ–∑–¥–∞–Ω–∞"
                    order = await conn.fetchrow('''
                        SELECT transaction_number, rub_amount, idr_amount, status
                        FROM "VSEPExchanger"."transactions"
                        WHERE transaction_number = $1 AND source_chat = $2
                    ''', transaction_number, str(call.message.chat.id))
                    
                    if not order:
                        await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                        return
                    
                    if order['status'] != 'created':
                        await call.answer(f"‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å: {order['status']}", show_alert=True)
                        return
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ"
                    await conn.execute('''
                        UPDATE "VSEPExchanger"."transactions"
                        SET status = 'control', status_changed_at = NOW()
                        WHERE transaction_number = $1
                    ''', transaction_number)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
                    user_nick = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if call.message.chat.username:
                        link = f"https://t.me/{call.message.chat.username}/{call.message.message_id}"
                    else:
                        chat_id_num = str(call.message.chat.id)
                        if chat_id_num.startswith('-100'):
                            chat_id_num = chat_id_num[4:]
                        elif chat_id_num.startswith('-'):
                            chat_id_num = chat_id_num[1:]
                        link = f"https://t.me/c/{chat_id_num}/{call.message.message_id}"
                    
                    control_entry = f"{now_str}${user_nick}$–∫–æ–Ω—Ç—Ä–æ–ª—å${link}"
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ä—É—é –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                    old_history = await conn.fetchval('''
                        SELECT history FROM "VSEPExchanger"."transactions"
                        WHERE transaction_number = $1
                    ''', transaction_number)
                    
                    if old_history:
                        history = old_history + "%%%" + control_entry
                    else:
                        history = control_entry
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
                    await conn.execute('''
                        UPDATE "VSEPExchanger"."transactions"
                        SET history = $2
                        WHERE transaction_number = $1
                    ''', transaction_number, history)
                    
                    log_func(f"–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ {transaction_number} –∏–∑–º–µ–Ω–µ–Ω: created -> control")
                
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await call.message.delete()
                
                # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
                state_data = await state.get_data()
                expire_task = state_data.get('expire_task')
                if expire_task and not expire_task.done():
                    expire_task.cancel()
                    log_func("–ó–∞–¥–∞—á–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞—è–≤–∫–∏")
                # –û—á–∏—â–∞–µ–º message_id
                active_control_message[call.message.chat.id] = None
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å
                rub_amount = int(order['rub_amount']) if order['rub_amount'] else 0
                idr_amount = int(order['idr_amount']) if order['idr_amount'] else 0
                rub_formatted = f"{rub_amount:,}".replace(",", " ")
                idr_formatted = f"{idr_amount:,}".replace(",", " ")
                
                control_message = (
                    f"üü° –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å!\n\n"
                    f"‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>{transaction_number}</code>\n"
                    f"‚Ä¢ –°—É–º–º–∞: {rub_formatted} RUB | {idr_formatted} IDR\n"
                    f"‚Ä¢ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {crm_number}\n"
                    f"üü° –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–ù–ê –ö–û–ù–¢–†–û–õ–ï</b>\n\n"
                    f"–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏–Ω—è—Ç—å" –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–≤
                from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                accept_keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (accept)", callback_data=f"accept_order_{transaction_number}")]
                    ]
                )
                control_msg = await call.message.answer(control_message, reply_markup=accept_keyboard)
                log_func("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ —Å –∫–Ω–æ–ø–∫–æ–π –ü—Ä–∏–Ω—è—Ç—å")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ accept callback
                await state.update_data(control_message_id=control_msg.message_id)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
                await process_control_request_with_order(call.message, crm_number, transaction_number, order, call.from_user)
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ {transaction_number}: {e}")
                await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.", show_alert=True)
                return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    log_func("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ")

# === CALLBACK HANDLERS –î–õ–Ø REPORT ===
async def report_callback_handler(call: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤ –æ—Ç—á–µ—Ç–µ"""
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
    parts = call.data.split('_')
    action = parts[1]  # 'bill' –∏–ª–∏ 'cancel'
    creator_id = int(parts[2])  # user_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∂–∏–º–∞–µ—Ç —Ç–æ—Ç, –∫—Ç–æ –µ—ë —Å–æ–∑–¥–∞–ª
    if call.from_user.id != creator_id:
        await call.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
        
    if action == "cancel":
        try:
            await call.message.edit_reply_markup(reply_markup=None)
        except TelegramBadRequest as e:
            if "query is too old" in e.message:
                await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
            else:
                raise
        return

    if action == "bill":
         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
         if not await is_admin_or_superadmin(call.from_user.id):
            try:
                 await call.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.", show_alert=True)
            except TelegramBadRequest as e:
                 if "query is too old" in e.message:
                     await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
                 else:
                     raise
            return

         chat_id = call.message.chat.id
         now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
         user = call.from_user
         user_nick = f"@{user.username}" if user.username else user.full_name
         now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
         
         # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
         msg_id = call.message.message_id
         if call.message.chat.username:
             link = f"https://t.me/{call.message.chat.username}/{msg_id}"
         else:
             chat_id_num = str(chat_id)
             if chat_id_num.startswith('-100'):
                 chat_id_num = chat_id_num[4:]
             elif chat_id_num.startswith('-'):
                 chat_id_num = chat_id_num[1:]
             link = f"https://t.me/c/{chat_id_num}/{msg_id}"
         
         # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
         if not db.pool:
             await call.answer("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)
             return
         async with db.pool.acquire() as conn:
             rows = await conn.fetch('''
                 SELECT transaction_number, rub_amount, idr_amount
                 FROM "VSEPExchanger"."transactions"
                 WHERE source_chat = $1 AND status = 'accept'
                 ORDER BY status_changed_at
             ''', str(chat_id))
         
         if not rows:
            try:
                 await call.answer("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞.", show_alert=True)
            except TelegramBadRequest as e:
                 if "query is too old" in e.message:
                     await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
                 else:
                     raise
            return

         # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
         total_idr = 0
         for row in rows:
             transaction_number = row['transaction_number']
             idr = int(row['idr_amount']) if row['idr_amount'] else 0
             total_idr += idr
             
             # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Å—Ç–æ—Ä–∏—é
             transaction = await db.get_transaction_by_number(transaction_number)
             old_history = transaction.get('history', '') if transaction else ''
             new_entry = f"{now_str}&{user_nick}&bill&{link}"
             history = old_history + "%%%" + new_entry if old_history else new_entry
             
             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é
             await db.update_transaction_status(transaction_number, "bill", now_utc)
             await db.update_transaction_history(transaction_number, history)
         
         # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
         col1 = 15
         col2 = 12
         col3 = 12
         header = '<b>üü£ –°–§–û–†–ú–ò–†–û–í–ê–ù –°–ß–ï–¢ –ù–ê –í–´–ü–õ–ê–¢–£:</b>\n'
         header += f"<code>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: {len(rows)}</code>\n"
         header += f"<code>–°—É–º–º–∞: {fmt_0(total_idr)} IDR</code>\n\n"
         header += '<b>–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:</b>\n'
         header += f"<code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
         header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
         
         lines = []
         total_rub = 0
         for row in rows:
             num = str(row['transaction_number'])
             rub = int(row['rub_amount']) if row['rub_amount'] else 0
             idr = int(row['idr_amount']) if row['idr_amount'] else 0
             lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
             total_rub += rub
         
         table = header + '\n'.join(lines)
         table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
         table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code>"
         
         try:
              await call.message.edit_text(table, parse_mode="HTML", reply_markup=None)
              await call.answer("–°—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", show_alert=True)
         except TelegramBadRequest as e:
              if "query is too old" in e.message:
                  await call.message.edit_text("–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é", reply_markup=None)
              else:
                  raise

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
"""üü° –ö–æ–º–∞–Ω–¥–∞ sos"""
@router.message(Command("sos"))
async def cmd_sos(message: Message):
    chat = message.chat
    chat_title = chat.title or chat.full_name or str(chat.id)
    msg_id = message.message_id
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if chat.username:
        link = f"https://t.me/{chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat.id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"
    user = message.from_user
    user_name = user.full_name
    times = get_bali_and_msk_time_list()
    user_username = f"@{user.username}" if user.username else ""
    alert_text = (
        f"üö® <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n\n"
        f"<b>–ù–ê–ñ–ê–¢–ê –ö–ù–û–ü–ö–ê üÜò!</b>\n\n"
        f"–æ—Ç {user_username} –≤ —á–∞—Ç–µ <b>{chat_title}</b>\n"
        f"üïí: {times[6]} (Bali) / {times[5]} (MSK)\n\n"
        f"<b>S‚≠ïÔ∏èS - –°–†–û–ß–ù–û –û–¢–ö–†–û–ô–¢–ï –°–û–û–ë–©–ï–ù–ò–ï!</b>\n\n"

        f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{link}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫—É—é –≥—Ä—É–ø–ø—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
    await send_to_admin_group_safe(message.bot, alert_text)
    
    operators = await db.get_operators()
    if not operators:
        operators = []
    admins = await db.get_admins()
    if not admins:
        admins = []
    superadmins = [u for u in admins if u.get('rang') == 'superadmin']
    user_ids = set()
    for u in operators + admins:
        user_ids.add(u['id'])
    for u in superadmins:
        user_ids.add(u['id'])
    for uid in user_ids:
        try:
            await message.bot.send_message(uid, alert_text, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SOS –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await message.reply("SOS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å–µ—Ä–≤–∏—Å–∞
"""üü° –ö–æ–º–∞–Ω–¥–∞ bank_show"""
@router.message(Command("bank_show"))
async def cmd_bank_show(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    if not await is_operator_or_admin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –∏ –≤—ã—à–µ.")
        return
    accounts = await db.get_active_bank_accounts()
    if not accounts:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤.")
        return
    text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n"
    for acc in accounts:
        status = []
        if acc.get("is_actual"):
            status.append("üü¢ –ê–ö–¢–£–ê–õ–¨–ù–´–ï")
        if acc.get("is_special"):
            status.append("üî¥ –°–ü–ï–¶")
        status_str = ", ".join(status) if status else "—Ä–µ–∑–µ—Ä–≤"
        text += f"<b>{acc['account_number']}</b>: {acc['bank']}, {acc['card_number']}, {acc['recipient_name']}, {acc['sbp_phone']} ‚Äî {status_str}\n"
    await message.reply(text)

"""üü° –ö–æ–º–∞–Ω–¥–∞ rate_show"""
@router.message(Command("rate_show"))
async def cmd_rate_show(message: Message):
    if str(message.chat.id) != config.ADMIN_GROUP:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.")
        return
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–∞—Ö
        rate = await db.get_actual_rate()
        logger.info(f"–ó–∞–ø—Ä–æ—Å –∫—É—Ä—Å–æ–≤ –æ–±–º–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}. –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {rate}")
        if not rate:
            logger.warning(f"–ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await message.reply("‚ùå –ö—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç—ã –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        limits = await db.get_rate_limits()
        coefs = await db.get_rate_coefficients()
        logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –ª–∏–º–∏—Ç—ã: {limits} –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {coefs} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        header = '*‚ôªÔ∏è –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–º–µ–Ω–∞:*'
        lines = []
        coln1 = 15  # –æ—Ç
        coln2 = 12  # –¥–æ
        coln4 = 9  # –∫—É—Ä—Å
        coln5 = 9   # –Ω–∞–¥–±–∞–≤–∫–∞

        lines.append(code('–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ'))
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        lines.append(
            code('–æ—Ç').ljust(coln1) +
            code('–¥–æ').ljust(coln2) +
            code('–ö—É—Ä—Å').ljust(coln4) +
            code('–ù–∞–¥–±–∞–≤–∫–∞').ljust(coln5)
        )
        lines.append(code('-' * (coln1 + coln2 + coln4 + coln5)))

        # –°—Ç—Ä–æ–∫–∏ —Å –∫—É—Ä—Å–∞–º–∏
        if not limits or not rate or not coefs:
            await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –∏–ª–∏ –ª–∏–º–∏—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
        def safe_get(d, key, default="‚Äî"):
            return d[key] if d and key in d and d[key] is not None else default
        lines.append(
            '0'.ljust(coln1) +
            fmt_0(safe_get(limits, 'main_rate')).ljust(coln2) +
            fmt_2(safe_get(rate, 'main_rate')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'main_rate')).ljust(coln5)
        )
        lines.append(
            fmt_0(safe_get(limits, 'main_rate')).ljust(coln1) +
            fmt_0(safe_get(limits, 'rate1')).ljust(coln2) +
            fmt_2(safe_get(rate, 'rate1')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'rate1')).ljust(coln5)
        )
        lines.append(
            fmt_0(safe_get(limits, 'rate1')).ljust(coln1) +
            fmt_0(safe_get(limits, 'rate2')).ljust(coln2) +
            fmt_2(safe_get(rate, 'rate2')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'rate2')).ljust(coln5)
        )
        lines.append(
            fmt_0(safe_get(limits, 'rate2')).ljust(coln1) +
            fmt_0(safe_get(limits, 'rate3')).ljust(coln2) +
            fmt_2(safe_get(rate, 'rate3')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'rate3')).ljust(coln5)
        )
        lines.append(
            fmt_0(safe_get(limits, 'rate3')).ljust(coln1) +
            '‚àû'.ljust(coln2) +
            fmt_2(safe_get(rate, 'rate4')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'rate4')).ljust(coln5)
        )
        # –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å –∏ —Å–ø–µ—Ü. –ª–∏–º–∏—Ç
        lines.append('')
        lines.append(
            code('–û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å (–≤–æ–∑–≤—Ä–∞—Ç)....').ljust(coln1 + coln2) +
            fmt_2(safe_get(rate, 'rate_back')).ljust(coln4) +
            fmt_delta(safe_get(coefs, 'rate_back')).ljust(coln5)
        )
        lines.append(
            code('–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ—Ç...').ljust(coln1 + coln2) +
            code(fmt_0(safe_get(rate, 'rate_special')) + ' —Ä—É–±').ljust(coln4) +
            ' '.ljust(coln5)
        )

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        user_id = rate.get("created_by")
        from_user = "‚Äî"
        if user_id:
            admins = await db.get_admins() or []
            if not admins:
                admins = []
            operators = await db.get_operators() or []
            if not operators:
                operators = []
            users = {str(u['id']): u['nickneim'] for u in list(admins) + list(operators)}
            from_user = users.get(str(user_id), f"id{user_id}")

        created_at = rate.get("created_at")
        lines.append('')
        lines.append(code(f"–í–Ω–µ—Å–µ–Ω–æ: {from_user}"))
        if created_at:
            lines.append(code(f"–î–∞—Ç–∞: {created_at:%d.%m.%Y %H:%M}"))

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        text = header + '\n```' + '\n'.join(lines) + '\n```'
        
        await message.answer(text, parse_mode="MarkdownV2")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Ç–µ–∫—É—â–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞")
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}\n{traceback.format_exc()}"
        logger.error(error_msg)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∞
async def is_superadmin(user_id: int) -> bool:
    rank = await db.get_user_rank(user_id)
    return rank in ("superadmin", "—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω")

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_show"""
@router.message(Command("admin_show"))
async def cmd_admin_show(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_show –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    admins = await db.get_admins() or []
    if not admins:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –∞–¥–º–∏–Ω–æ–≤.")
        return
    text = "<b>–ê–¥–º–∏–Ω—ã —Å–µ—Ä–≤–∏—Å–∞:</b>\n"
    for row in admins:
        text += f"‚úß{row['nickneim']} | {row['id']} | {row['rang']}\n"
    await message.reply(text)
    logger.info(f"{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤")

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_add"""
@router.message(Command("admin_add"))
async def cmd_admin_add(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_add –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_add –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –∞–¥–º–∏–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    # --- –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç ---
    user_rank = await db.get_user_rank(user.id)
    if not user_rank:
        await db.add_user_if_not_exists(user.id, username)
        await db.set_user_rank(user.id, "admin")
    text = (
        f"–Æ–∑–µ—Ä—É <b>{username}</b> –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–£ –∞–¥–º–∏–Ω–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ä–∞–±–æ—Ç–µ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_add_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_add_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –í –ë–ê–ó–£"""
async def admin_add_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_add_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {user_id} –∞–¥–º–∏–Ω–æ–º –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await db.set_user_rank(user_id, "admin")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            admins = await db.get_admins() or []
            for row in admins:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞.")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def admin_add_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_add_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ admin_remove"""
@router.message(Command("admin_remove"))
async def cmd_admin_remove(message: Message):
    if not await is_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_remove –±–µ–∑ –ø—Ä–∞–≤ superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /admin_remove –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    text = (
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"admin_remove_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"admin_remove_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ —É {user.id} ({username}) –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –°–ù–Ø–¢–ò–Ø –ü–†–ê–í –í –ë–ê–ó–£"""
async def admin_remove_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_remove_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "user")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            admins = await db.get_admins() or []
            for row in admins:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω.")
        logger.info(f"{admin_id} ({admin_username}) —Å–Ω—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ —É {user_id} ({username}) –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def admin_remove_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("admin_remove_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞
"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_add"""
@router.message(Command("operator_add"))
async def cmd_operator_add(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_add –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_add –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–µ—Ä–≤–∏—Å–∞.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –±—É–¥—É—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    # --- –î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç ---
    user_rank = await db.get_user_rank(user.id)
    if not user_rank:
        await db.add_user_if_not_exists(user.id, username)
        await db.set_user_rank(user.id, "operator")
    text = (
        f"–Æ–∑–µ—Ä—É <b>{username}</b> –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"operator_add_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"operator_add_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ {user.id} ({username}) –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –ù–ê–ó–ù–ê–ß–ï–ù–ò–Ø –í –ë–ê–ó–£"""
async def operator_add_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_add_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "operator")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            ops = await db.get_operators() or []
            for row in ops:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.")
        logger.info(f"{admin_id} ({admin_username}) –Ω–∞–∑–Ω–∞—á–∏–ª {user_id} ({username}) –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def operator_add_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_add_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_remove"""
@router.message(Command("operator_remove"))
async def cmd_operator_remove(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_remove –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    if not message.reply_to_message or not message.reply_to_message.from_user:
        logger.info(f"{message.from_user.id} ({message.from_user.username}) –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_remove –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ {message.chat.id}")
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n\n"
            "–í–Ω–∏–º–∞–Ω–∏–µ ‚Äî —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."
        )
        await message.reply(text)
        return
    user = message.reply_to_message.from_user
    username = user.username or user.full_name or f"id{user.id}"
    initiator_id = message.from_user.id
    text = (
        f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{username}</b> –±—É–¥—É—Ç —Å–Ω—è—Ç—ã –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞.\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ."
    )
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"operator_remove_confirm:{user.id}:{initiator_id}"),
                InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data=f"operator_remove_cancel:{initiator_id}")
            ]
        ]
    )
    await message.reply(text, reply_markup=keyboard)
    logger.info(f"{message.from_user.id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É {user.id} ({username}) –≤ —á–∞—Ç–µ {message.chat.id}")
"""‚úÖ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –°–ù–Ø–¢–ò–Ø –ü–†–ê–í –í –ë–ê–ó–£"""
async def operator_remove_confirm_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_remove_confirm:"):
        parts = data.split(":")
        user_id = int(parts[1])
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        await db.set_user_rank(user_id, "user")
        username = None
        if call.message.reply_to_message and call.message.reply_to_message.from_user.id == user_id:
            username = call.message.reply_to_message.from_user.username or call.message.reply_to_message.from_user.full_name or f"id{user_id}"
        else:
            ops = await db.get_operators() or []
            for row in ops:
                if row['id'] == user_id:
                    username = row['nickneim']
                    break
            if not username:
                username = f"id{user_id}"
        await call.message.edit_text(f"<b>{username}</b> –±–æ–ª—å—à–µ –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–∏—Å–∞.")
        logger.info(f"{admin_id} ({admin_username}) —Å–Ω—è–ª –ø—Ä–∞–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É {user_id} ({username}) –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.answer()
"""‚ùå —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω–∞"""
async def operator_remove_cancel_callback(call: CallbackQuery):
    data = call.data
    if data.startswith("operator_remove_cancel:"):
        admin_id = call.from_user.id
        admin_username = call.from_user.username or call.from_user.full_name or f"id{admin_id}"
        logger.info(f"{admin_id} ({admin_username}) –æ—Ç–º–µ–Ω–∏–ª —Å–Ω—è—Ç–∏–µ –ø—Ä–∞–≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –≤ —á–∞—Ç–µ {call.message.chat.id}")
        await call.message.delete()
        log_message("delete", call.message.chat, call.from_user, text="[—É–¥–∞–ª–µ–Ω–æ –±–æ—Ç–æ–º]")
        await call.answer()

"""üü° –ö–æ–º–∞–Ω–¥–∞ operator_show"""
@router.message(Command("operator_show"))
async def cmd_operator_show(message: Message):
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        logger.warning(f"{message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –≤—ã–∑–≤–∞—Ç—å /operator_show –±–µ–∑ –ø—Ä–∞–≤ admin/superadmin")
        return
    ops = await db.get_operators() or []
    if not ops:
        await message.reply("–í –±–∞–∑–µ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    text = "<b>–û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–∏—Å–∞:</b>\n"
    for row in ops:
        text += f"‚úß {row['nickneim']} | {row['id']} | {row['rang']}\n"
    await message.reply(text)
    logger.info(f"{message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤")

"""üü° –ö–æ–º–∞–Ω–¥–∞ help"""
@router.message(Command("help"))
async def cmd_help(message: Message):
    print(f"=== CMD_HELP CALLED by {message.from_user.id} ===")
    log_system(f"CMD_HELP CALLED by {message.from_user.id}")
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    help_text = build_pretty_help_text(user_rank)
    await message.reply(help_text)
    logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text={help_text[:200]}")

"""üü° –ö–æ–º–∞–Ω–¥–∞ start"""
@router.message(CommandStart())
async def cmd_start(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø VSEP –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")
    logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text=–ü—Ä–∏–≤–µ—Ç! –Ø VSEP –±–æ—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")

"""üü° –ö–æ–º–∞–Ω–¥–∞ check"""
@router.message(Command("check"))
async def cmd_check(message: Message):
    user_rank = await db.get_user_rank(message.from_user.id)
    logger.info(f"[MSG] chat_id={message.chat.id}; user_id={message.from_user.id}; username={message.from_user.username}; rank={user_rank}; action=received; text={message.text}")
    try:
        chat = message.chat
        log_message = f"""
–ö–û–ú–ê–ù–î–ê /CHECK –í–´–ü–û–õ–ù–ï–ù–ê
"""
        logger.info(log_message.upper())
        response = f"""
–ö–û–ú–ê–ù–î–ê /CHECK –í–´–ü–û–õ–ù–ï–ù–ê
–ß–ê–¢ ID: {chat.id}
–¢–ò–ü –ß–ê–¢–ê: {chat.type}
–ù–ê–ó–í–ê–ù–ò–ï –ß–ê–¢–ê: {chat.title if chat.title else '–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è'}
–ò–ú–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {message.from_user.full_name if message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
USERNAME: @{message.from_user.username if message.from_user and message.from_user.username else '–Ω–µ—Ç username'}
user id: {message.from_user.id if message.from_user else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}
"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if message.reply_to_message:
            reply = message.reply_to_message
            # –§–æ—Ç–æ
            if reply.photo:
                photo_id = reply.photo[-1].file_id
                response += f"\nID —Ñ–æ—Ç–æ: <code>{photo_id}</code>"
            # –í–∏–¥–µ–æ
            elif reply.video:
                video_id = reply.video.file_id
                response += f"\nID –≤–∏–¥–µ–æ: <code>{video_id}</code>"
            # –î–æ–∫—É–º–µ–Ω—Ç
            elif reply.document:
                doc_id = reply.document.file_id
                response += f"\nID –¥–æ–∫—É–º–µ–Ω—Ç–∞: <code>{doc_id}</code>"
            # –ê–Ω–∏–º–∞—Ü–∏—è (GIF)
            elif reply.animation:
                anim_id = reply.animation.file_id
                response += f"\nID –∞–Ω–∏–º–∞—Ü–∏–∏: <code>{anim_id}</code>"
            # –°—Ç–∏–∫–µ—Ä
            elif reply.sticker:
                sticker_id = reply.sticker.file_id
                response += f"\nID —Å—Ç–∏–∫–µ—Ä–∞: <code>{sticker_id}</code>"
            # –ê—É–¥–∏–æ
            elif reply.audio:
                audio_id = reply.audio.file_id
                response += f"\nID –∞—É–¥–∏–æ: <code>{audio_id}</code>"
            # –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif reply.voice:
                voice_id = reply.voice.file_id
                response += f"\nID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{voice_id}</code>"
            # –í–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elif reply.video_note:
                video_note_id = reply.video_note.file_id
                response += f"\nID –≤–∏–¥–µ–æ —Å–æ–æ–±—â–µ–Ω–∏—è: <code>{video_note_id}</code>"
        
        await message.reply(response, parse_mode="HTML")
        logger.info(f"[BOT_MSG] chat_id={message.chat.id}; to_user={message.from_user.id}; action=bot_send; text={response[:200]}")
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /check: {e}"
        logger.error(error_msg)
        await message.reply("–ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@router.message(Command("order_show"))
async def cmd_order_show(message: Message):
    """üü° –ö–æ–º–∞–Ω–¥–∞ order_show"""
    args = message.text.strip().split()
    if len(args) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /order_show <–Ω–æ–º–µ—Ä_–æ—Ä–¥–µ—Ä–∞>")
        return
    order_number = args[1]
    transaction = await db.get_transaction_by_number(order_number)
    if not transaction:
        await message.reply("–ó–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –∑–∞—è–≤–∫–∞
    is_refund = int(transaction.get('idr_amount', 0)) < 0 or int(transaction.get('rub_amount', 0)) < 0
    idr = abs(int(transaction.get('idr_amount', 0)))
    rub = abs(int(transaction.get('rub_amount', 0)))
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    lines = []
    lines.append(f"<b>–ö–∞—Ä—Ç–æ—á–∫–∞ –∑–∞—è–≤–∫–∏ ‚Ññ <code>{order_number}</code></b>")
    if is_refund:
        lines.append(f"\n<b>–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:</b> {fmt_0(rub)} RUB ‚èÆ {fmt_0(idr)} IDR")
    else:
        lines.append(f"\n<b>–°—É–º–º–∞:</b> {fmt_0(idr)} IDR ‚èÆ {fmt_0(rub)} RUB")
    lines.append(f"\n<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {transaction.get('status','-')}")
    # –î–æ–±–∞–≤–ª—è—é Note
    note = transaction.get('note')
    if not note:
        note = '-'
    lines.append(f"<b>Note:</b> {note}")
    # –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    history = transaction.get('history', '')
    hist_lines = []
    if history:
        events = history.split('%%%')
        prev_time = None
        for idx, ev in enumerate(events):
            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ $ –∏ & –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
            if '$' in ev:
                parts = ev.split('$', 3)
            else:
                parts = ev.split('&', 3)
            if len(parts) < 4:
                if idx == 0 and ev.strip():
                    hist_lines.append(f"{ev.strip()} (—Å–æ–∑–¥–∞–Ω–æ)")
                continue
            dt_str, user, status, link = [p.strip() for p in parts]
            try:
                dt = datetime.strptime(dt_str, "%Y-%m-%d %H:%M:%S")
                dt_bali = dt.replace(tzinfo=timezone.utc).astimezone(BALI_TZ)
            except Exception:
                dt = None
                dt_bali = None
            status_map = {
                'night': 'night',
                'control': 'control',
                'accept': 'accept',
                'accounted': 'accounted',
                'created': 'created',
                '—Å–æ–∑–¥–∞–Ω': '—Å–æ–∑–¥–∞–Ω',
                'cancel': 'cancel',
            }
            status_disp = status_map.get(status, status)
            time_str = dt_bali.strftime("%H:%M") if dt_bali else "--:--"
            if idx == 0:
                # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –¥–∞—Ç–∞ –¥–¥.–º–º.–≥–≥
                date_str = dt_bali.strftime("%d.%m.%y") if dt_bali else "--.--.--"
                hist_lines.append(f"{date_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            else:
                # –†–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å—Ç–∞—Ç—É—Å–æ–º
                if prev_time and dt:
                    delta = dt - prev_time
                    total_seconds = int(delta.total_seconds())
                    hours = total_seconds // 3600
                    minutes = (total_seconds % 3600) // 60
                    seconds = total_seconds % 60
                    delta_str = f"+{hours:02}:{minutes:02}:{seconds:02}"
                else:
                    delta_str = "+--:--:--"
                hist_lines.append(f"{delta_str} {status_disp}: {time_str} {user} (<a href='{link}'>link</a>)")
            prev_time = dt
    if hist_lines:
        lines.append("\n<b>–•—Ä–æ–Ω–æ–ª–æ–≥–∏—è:</b>")
        lines.extend(hist_lines)
    # –†–µ–∫–≤–∏–∑–∏—Ç—ã
    acc_info = transaction.get('account_info', '-')
    lines.append(f"\n<b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {acc_info}")
    await message.reply('\n'.join(lines), parse_mode="HTML")

@router.message(Command("transfer"))
async def cmd_transfer(message: Message):
    """üü° –ö–æ–º–∞–Ω–¥–∞ transfer"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, –ª–∏–±–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º
    has_attachment = bool(message.photo or message.document or message.video or message.animation)
    is_reply = bool(message.reply_to_message)
    reply_has_attachment = is_reply and bool(
        message.reply_to_message.photo or 
        message.reply_to_message.document or 
        message.reply_to_message.video or 
        message.reply_to_message.animation
    )
    if not (has_attachment or reply_has_attachment):
        await message.reply("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ /transfer [—Å—É–º–º–∞_–≤_IDR] –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—É
    command_text = message.text or message.caption
    if not command_text:
        await message.reply("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—É–º–º—É: /transfer [—Å—É–º–º–∞_–≤_IDR]")
        return

    progress_msg = await message.reply("‚è≥ –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞, –≤—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ...")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_id = message.from_user.id
    if not await is_admin_or_superadmin(user_id):
        await progress_msg.edit_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    try:
        args = command_text.split()
        if len(args) != 2:
            await progress_msg.edit_text("\nüö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /transfer [—Å—É–º–º–∞_–≤_IDR] (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)", parse_mode="HTML")
            return
        transfer_amount = float(args[1])
    except ValueError:
        await progress_msg.edit_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        return

    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º bill –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if not db.pool:
        await progress_msg.edit_text("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    async with db.pool.acquire() as conn:
        rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount, status
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 
            AND status = 'bill'
            ORDER BY status_changed_at
        ''', str(chat_id))

    if not rows:
        await progress_msg.edit_text("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'bill'.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
    total_idr = sum(row['idr_amount'] for row in rows)
    order_count = len(rows)
    tolerance = 1000
    if abs(total_idr - transfer_amount) > tolerance:  # –î–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –≤ 1000 IDR
        msg = (
            f"üö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n"
            f"–ü–†–ò–ß–ò–ù–ê: —Å—É–º–º–∞ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—á–µ—Ç–æ–º.\n\n"
            f"üîπ –í –ò–ú–ï–Æ–©–ï–ú–°–Ø –°–ß–ï–¢–ï –ù–ê –í–´–ü–õ–ê–¢–£: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ä–¥–µ—Ä–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'bill', –ø–æ–¥–ª–µ–∂–∞—â–∏—Ö –æ–ø–ª–∞—Ç–µ: <b>{order_count}</b> –Ω–∞ —Å—É–º–º—É: <b>{fmt_0(total_idr)} IDR</b>\n"
            f"üî∏ –í –ö–û–ú–ê–ù–î–ï –£–ö–ê–ó–ê–ù–û: <b>{fmt_0(transfer_amount)} IDR</b>\n"
            f"\n–†–∞–∑–Ω–∏—Ü–∞: <b>{fmt_0(abs(total_idr - transfer_amount))} IDR</b>\n"
            f"üí≠ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞."
        )
        await progress_msg.edit_text(msg, parse_mode="HTML")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–ø–ª–∞—Ç—É –¥–ª—è –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
    user = message.from_user
    user_nick = f"@{user.username}" if user.username else user.full_name
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")

    chat_id = message.chat.id
    msg_id = message.message_id
    if message.chat.username:
        link = f"https://t.me/{message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link = f"https://t.me/c/{chat_id_num}/{msg_id}"

    # –°–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Google Sheets
    gsheet_rows = []

    for row in rows:
        transaction_number = row['transaction_number']
        transaction = await db.get_transaction_by_number(transaction_number)
        if not transaction:
            continue  # –µ—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        old_history = transaction.get('history', '') if transaction else ''
        new_entry = f"{now_str}&{user_nick}&accounted&{link}"
        history = old_history + "%%%" + new_entry if old_history else new_entry
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        await db.update_transaction_status(transaction_number, "accounted", now_utc)
        await db.update_transaction_history(transaction_number, history)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Google Sheets
        # –§–æ—Ä–º–∞—Ç: [transaction_number, user_nick, idr_amount, rub_amount, used_rate, status, note, acc_info, history, source_chat, now_str, transfer_dt]
        gsheet_row = [
            transaction_number,
            user_nick,
            row['idr_amount'],
            row['rub_amount'],
            transaction.get('used_rate', 0) if transaction else 0,
            'accounted',
            transaction.get('note', '') if transaction else '',
            transaction.get('acc_info', '') if transaction else '',
            history,
            str(chat_id),
            transaction.get('created_at', now_utc) if transaction else now_utc,
            now_utc  # –¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è /transfer
        ]
        gsheet_rows.append(gsheet_row)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –≤ Google Sheets
    try:
        await write_multiple_to_google_sheet(str(chat_id), gsheet_rows)
        log_func(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ {len(gsheet_rows)} –æ—Ä–¥–µ—Ä–æ–≤ –≤ Google Sheets")
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ Google Sheets –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω

    await progress_msg.edit_text(f"üü¢ –¢–†–ê–ù–°–§–ï–† –í–´–ü–û–õ–ù–ï–ù!\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤—ã–ø–ª–∞—Ç–∞ {order_count} –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ —Å—É–º–º—É {fmt_0(total_idr)} IDR", parse_mode="HTML")

@router.message(Command("rate_change"))
async def cmd_rate_change(message: Message, state: FSMContext):
    """üü° –ö–æ–º–∞–Ω–¥–∞ rate_change"""
    user_id = message.from_user.id
    if not await is_admin_or_superadmin(user_id):
        await message.reply("üö´ –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞–º.")
        return
    
    await state.set_state(RateChangeStates.waiting_for_new_rate)
    await message.reply(
        "üí± <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ–±–º–µ–Ω–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å (RUB/IDR):\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.0045</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        parse_mode="HTML"
    )

@router.message(RateChangeStates.waiting_for_new_rate)
async def rate_change_input(message: Message, state: FSMContext):
    """üü© –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∫—É—Ä—Å–∞ /rate_change/"""
    if message.text.lower() == '/cancel':
        await state.clear()
        await message.reply("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    try:
        new_rate = float(message.text.replace(',', '.'))
        if new_rate <= 0:
            raise ValueError("–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
    except ValueError:
        await message.reply(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫—É—Ä—Å–∞!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –∑–∞–ø—è—Ç–æ–π.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>0.0045</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    coefs = await db.get_rate_coefficients()
    if not coefs:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∫—É—Ä—Å–∞.")
        return
    main_coef = float(coefs['main_rate']) if 'main_rate' in coefs and coefs['main_rate'] is not None else 1
    rate1 = new_rate * float(coefs['rate1']) / main_coef if 'rate1' in coefs and coefs['rate1'] is not None else 0
    rate2 = new_rate * float(coefs['rate2']) / main_coef if 'rate2' in coefs and coefs['rate2'] is not None else 0
    rate3 = new_rate * float(coefs['rate3']) / main_coef if 'rate3' in coefs and coefs['rate3'] is not None else 0
    rate4 = new_rate * float(coefs['rate4']) / main_coef if 'rate4' in coefs and coefs['rate4'] is not None else 0
    rate_back = new_rate * float(coefs['rate_back']) / main_coef if 'rate_back' in coefs and coefs['rate_back'] is not None else 0
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å
    old_rate_row = await db.get_actual_rate()
    old_rate = old_rate_row['main_rate'] if old_rate_row and 'main_rate' in old_rate_row and old_rate_row['main_rate'] is not None else 0
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(new_rate=new_rate)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    response = (
        f"üí± <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞</b>\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> {fmt_2(old_rate)} RUB/IDR\n"
        f"<b>–ù–æ–≤—ã–π –∫—É—Ä—Å:</b> {fmt_2(new_rate)} RUB/IDR\n\n"
        f"<b>–ù–æ–≤—ã–µ –∫—É—Ä—Å—ã –ø–æ –∑–æ–Ω–∞–º:</b>\n"
        f"‚Ä¢ –ó–æ–Ω–∞ 1: {fmt_2(rate1)} RUB/IDR {fmt_delta(float(coefs['rate1']))}\n"
        f"‚Ä¢ –ó–æ–Ω–∞ 2: {fmt_2(rate2)} RUB/IDR {fmt_delta(float(coefs['rate2']))}\n"
        f"‚Ä¢ –ó–æ–Ω–∞ 3: {fmt_2(rate3)} RUB/IDR {fmt_delta(float(coefs['rate3']))}\n"
        f"‚Ä¢ –ó–æ–Ω–∞ 4: {fmt_2(rate4)} RUB/IDR {fmt_delta(float(coefs['rate4']))}\n"
        f"‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç: {fmt_2(rate_back)} RUB/IDR {fmt_delta(float(coefs['rate_back']))}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞:"
    )
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="rate_change_confirm")],
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="rate_change_cancel")]
    ])
    
    await message.reply(response, reply_markup=keyboard, parse_mode="HTML")

@router.message(Command("rate_zone_change"))
async def cmd_rate_zone_change(message: Message):
    """üü° –ö–æ–º–∞–Ω–¥–∞ rate_zone_change (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    await cmd_in_development(message, "/rate_zone_change", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–æ–Ω (–∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤) –æ–±–º–µ–Ω–∞")

@router.message(Command("rate_coef_change"))
async def cmd_rate_coef_change(message: Message):
    """üü° –ö–æ–º–∞–Ω–¥–∞ rate_coef_change (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"""
    await cmd_in_development(message, "/rate_coef_change", "–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∫—É—Ä—Å–æ–≤")

@router.message(Command("worktime"))
async def cmd_worktime(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /worktime –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[WORKTIME] –ö–æ–º–∞–Ω–¥–∞ /worktime –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user.id):
        logger.warning(f"[WORKTIME] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    logger.info(f"[WORKTIME] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    await state.set_state(ShiftTimeStates.waiting_for_time)
    
    response = (
        "‚è∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>HH:MM-HH:MM</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "<code>09:00-22:30</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    
    await message.reply(response, parse_mode="HTML")
    logger.info(f"[WORKTIME] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

@router.message(ShiftTimeStates.waiting_for_time)
async def process_shift_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–º–µ–Ω—ã"""
    user = message.from_user
    chat_id = message.chat.id
    time_text = message.text.strip()
    
    logger.info(f"[WORKTIME] –ü–æ–ª—É—á–µ–Ω–æ –≤—Ä–µ–º—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {time_text}")
    
    if time_text.lower() == '/cancel':
        await state.clear()
        await message.reply("‚ùå –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        logger.info(f"[WORKTIME] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
    try:
        if '-' not in time_text:
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å '-'")
        
        start_time, end_time = time_text.split('-')
        start_hour, start_minute = map(int, start_time.split(':'))
        end_hour, end_minute = map(int, end_time.split(':'))
        
        if not (0 <= start_hour <= 23 and 0 <= start_minute <= 59 and 
                0 <= end_hour <= 23 and 0 <= end_minute <= 59):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await db.set_system_setting("shift_start_time", start_time)
        await db.set_system_setting("shift_end_time", end_time)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        from config import system_settings
        system_settings.shift_start_time = start_time
        system_settings.shift_end_time = end_time
        
        response = (
            f"‚úÖ <b>–í—Ä–µ–º—è —Å–º–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"üïê –ù–æ–≤–æ–µ –≤—Ä–µ–º—è: <code>{start_time} - {end_time}</code>\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
        )
        
        await message.reply(response, parse_mode="HTML")
        logger.info(f"[WORKTIME] –í—Ä–µ–º—è —Å–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {start_time}-{end_time} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        
    except (ValueError, IndexError) as e:
        logger.warning(f"[WORKTIME] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {time_text}")
        await message.reply(
            "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: <code>HH:MM-HH:MM</code>\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>09:00-22:30</code>\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <code>/cancel</code> –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"[WORKTIME] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.message(Command("work_open"))
async def cmd_work_open(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[WORK_OPEN] –ö–æ–º–∞–Ω–¥–∞ /work_open –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user.id):
        logger.warning(f"[WORK_OPEN] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    logger.info(f"[WORK_OPEN] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="force_open_yes"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="force_open_no")
        ]
    ])
    
    response = (
        "‚ö†Ô∏è <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    
    await message.reply(response, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"[WORK_OPEN] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

@router.message(Command("work_close"))
async def cmd_work_close(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[WORK_CLOSE] –ö–æ–º–∞–Ω–¥–∞ /work_close –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user.id):
        logger.warning(f"[WORK_CLOSE] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    logger.info(f"[WORK_CLOSE] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞, –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É", callback_data="force_close_yes"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="force_close_no")
        ]
    ])
    
    response = (
        "‚ö†Ô∏è <b>–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–º–µ–Ω—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."
    )
    
    await message.reply(response, parse_mode="HTML", reply_markup=keyboard)
    logger.info(f"[WORK_CLOSE] –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–º–µ–Ω—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

@router.message(Command("reset_control"))
async def cmd_reset_control(message: Message):
    """–°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[RESET_CONTROL] –ö–æ–º–∞–Ω–¥–∞ /reset_control –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user.id):
        logger.warning(f"[RESET_CONTROL] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    logger.info(f"[RESET_CONTROL] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è
        await db.set_control_counter(chat_id, 0)
        
        response = f"‚úÖ <b>–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–±—Ä–æ—à–µ–Ω!</b>\n\n–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 0."
        await message.reply(response, parse_mode="HTML")
        logger.info(f"[RESET_CONTROL] –°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        
    except Exception as e:
        logger.error(f"[RESET_CONTROL] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è.")

@router.message(Command("check_control"))
async def cmd_check_control(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[CHECK_CONTROL] –ö–æ–º–∞–Ω–¥–∞ /check_control –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—à–µ)
    if not await is_operator_or_admin(user.id):
        logger.warning(f"[CHECK_CONTROL] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.")
        return
    
    logger.info(f"[CHECK_CONTROL] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è
        counter = await db.get_control_counter(chat_id)
        
        response = (
            f"üìä <b>–û—Ç—á–µ—Ç –ø–æ –∫–æ–Ω—Ç—Ä–æ–ª—é</b>\n\n"
            f"üîÑ <b>–ó–∞—è–≤–æ–∫ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ:</b> {counter}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/reset_control</code> –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)."
        )
        
        await message.reply(response, parse_mode="HTML")
        logger.info(f"[CHECK_CONTROL] –ü–æ–∫–∞–∑–∞–Ω —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è {counter} –¥–ª—è —á–∞—Ç–∞ {chat_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
        
    except Exception as e:
        logger.error(f"[CHECK_CONTROL] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—á–µ—Ç—á–∏–∫–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω—Ç—Ä–æ–ª–µ.")

@router.message(Command("status"))
async def cmd_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
    user = message.from_user
    chat_id = message.chat.id
    
    logger.info(f"[STATUS] –ö–æ–º–∞–Ω–¥–∞ /status –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (–æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ –≤—ã—à–µ)
    if not await is_operator_or_admin(user.id):
        logger.warning(f"[STATUS] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞–º.")
        return
    
    logger.info(f"[STATUS] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
    
    try:
        logger.info(f"[STATUS] –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
        if not db.pool:
            logger.error("[STATUS] –û–®–ò–ë–ö–ê: db.pool —Ä–∞–≤–µ–Ω None - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!")
            await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            return
        
        logger.info(f"[STATUS] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å...")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏
        if not db.pool:
            await message.reply("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return
        async with db.pool.acquire() as conn:
            created_rows = await conn.fetch('''
                SELECT transaction_number, rub_amount, idr_amount
                FROM "VSEPExchanger"."transactions"
                WHERE source_chat = $1 AND status = 'created'
                ORDER BY status_changed_at
            ''', str(chat_id))
            
            accept_rows = await conn.fetch('''
                SELECT transaction_number, rub_amount, idr_amount
                FROM "VSEPExchanger"."transactions"
                WHERE source_chat = $1 AND status = 'accept'
                ORDER BY status_changed_at
            ''', str(chat_id))
            
            bill_rows = await conn.fetch('''
                SELECT transaction_number, rub_amount, idr_amount
                FROM "VSEPExchanger"."transactions"
                WHERE source_chat = $1 AND status = 'bill'
                ORDER BY status_changed_at
            ''', str(chat_id))

        if not created_rows and not accept_rows and not bill_rows:
            logger.info(f"[STATUS] –í —á–∞—Ç–µ {chat_id} –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫")
            await message.reply("üìä <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏</b>\n\n–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫.")
            return
        
        logger.info(f"[STATUS] –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {len(created_rows)} –∑–∞—è–≤–æ–∫...")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É
        col1 = 15
        col2 = 12
        col3 = 12
        header = '<b>üü° –û—Ç–∫—Ä—ã—Ç—ã–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n'
        header += f"<code>{'–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
        header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
        
        lines = []
        total_rub = 0
        total_idr = 0
        
        for row in created_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        
        for row in accept_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        
        for row in bill_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–ò—Ç–æ–≥–æ: {len(created_rows) + len(accept_rows) + len(bill_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code>"
        
        await message.reply(table, parse_mode="HTML")
        logger.info(f"[STATUS] –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {len(created_rows) + len(accept_rows) + len(bill_rows)} –∑–∞—è–≤–æ–∫, RUB={total_rub}, IDR={total_idr}")
        
    except Exception as e:
        logger.error(f"[STATUS] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
        logger.error(f"[STATUS] Traceback: {traceback.format_exc()}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.")

@router.message(Command("restart"))
async def cmd_restart(message: Message):
    """üîÑ –ö–æ–º–∞–Ω–¥–∞ restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    logger.info(f"[RESTART] –ö–æ–º–∞–Ω–¥–∞ /restart –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user_id):
        logger.warning(f"[RESTART] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    logger.info(f"[RESTART] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        await message.reply("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        logger.info(f"[RESTART] –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏–≥–Ω–∞–ª –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        
    except Exception as e:
        logger.error(f"[RESTART] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ.")

@router.message(Command("control"))
async def cmd_control(message: Message, state: FSMContext = None):
    """üü° –ö–æ–º–∞–Ω–¥–∞ control - –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–ø–ª–∞—Ç—ã"""
    log_user(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /control –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /control: {message.text or message.caption}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
    has_attachment = bool(message.photo or message.document or message.video or message.animation)
    is_reply = bool(message.reply_to_message)
    reply_has_attachment = is_reply and bool(
        message.reply_to_message.photo or 
        message.reply_to_message.document or 
        message.reply_to_message.video
    )
    
    if not (has_attachment or reply_has_attachment):
        log_func(f"–ö–æ–º–∞–Ω–¥–∞ /control –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è")
        await message.reply("üö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ /control –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.\n\n–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:\n/control [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ] - —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º\n/control [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ] - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º")
        return
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø–æ–¥–ø–∏—Å—å
    command_text = message.text or message.caption
    if not command_text:
        log_func(f"–ö–æ–º–∞–Ω–¥–∞ /control –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∏")
        await message.reply("üö´ –ù–ï –í–´–ü–û–õ–ù–ï–ù–û!\n\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ /control –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º.\n\n–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:\n/control [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ] - —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º\n/control [–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ] - –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º")
        return
    
    args = command_text.strip().split()
    chat = message.chat
    chat_title = chat.title or chat.full_name or str(chat.id)
    
    if len(args) >= 2:
        # –ö–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º (–ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º –ø–æ—Å–ª–µ /control)
        crm_number = " ".join(args[1:])
        log_func(f"/control —Å –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ–º: {crm_number}")
    else:
        # –ë–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π
        crm_number = "-"
        log_func(f"/control –±–µ–∑ –ø—Ä–∏–º–µ—á–∞–Ω–∏–π: {command_text}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—Å–æ–∑–¥–∞–Ω–∞" –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    if not db.pool:
        await message.reply("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    
    # –î–µ–ª–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ control –≤ —ç—Ç–æ–º —á–∞—Ç–µ
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤ —á–∞—Ç–µ –∏ –¥–µ–ª–∞–µ–º –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–µ, —á—Ç–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫–Ω–æ–ø–∫–∏ control
        async for msg in message.bot.get_chat_history(chat_id=message.chat.id, limit=10):
            if (msg.from_user and msg.from_user.id == message.bot.id and 
                msg.reply_markup and any(btn.callback_data and btn.callback_data.startswith("control_") 
                                       for row in msg.reply_markup.inline_keyboard for btn in row)):
                try:
                    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
                    current_text = msg.text or msg.caption or ""
                    new_text = current_text + "\n\n** ‚ÑπÔ∏è –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨ –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–û–ú ‚ÑπÔ∏è –í–´–ó–í–ê–ù–ê –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨**"
                    await message.bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=msg.message_id,
                        text=new_text,
                        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
                    )
                    log_func(f"–°–¥–µ–ª–∞–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ control: {msg.message_id}")
                except Exception as e:
                    log_func(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.message_id}: {e}")
    except Exception as e:
        log_func(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    async with db.pool.acquire() as conn:
        created_orders = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'created'
            ORDER BY status_changed_at
        ''', str(chat.id))
    
    if not created_orders:
        text = f'''‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É.

‚ò¢Ô∏è <b><i>'—Ç–æ, —á–µ–≥–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –±—ã–ª–æ –∏ –≤–æ—Ç –æ–ø—è—Ç—å'</i></b>
–ï—Å–ª–∏ —Å–ª—É—á–∏–ª—Å—è —Ç–∞–∫–æ–π —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª—É—á–∞–π:–ø—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞ –ø–æ –∑–∞—è–≤–∫–µ –∏–∑ –ø—Ä–æ—à–ª–æ–π —Å–º–µ–Ω—ã - –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É –°–µ—Ä–≤–∏—Å–∞ (–º–æ–∂–µ—Ç–µ –¥–∞–∂–µ –∫–æ–º–∞–Ω–¥–æ–π /sos) –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ —Ä–µ–∞–Ω–∏–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É (–ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –≤ –±–ª–∞–Ω–∫–µ —Ä–∞—Å—á—ë—Ç–∞ —Å –ø—Ä–æ—à–ª–æ–π —Å–º–µ–Ω—ã)
        '''
        await message.reply(text)
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏
    keyboard_buttons = []
    for order in created_orders:
        transaction_number = order['transaction_number']
        rub_amount = int(order['rub_amount']) if order['rub_amount'] else 0
        idr_amount = int(order['idr_amount']) if order['idr_amount'] else 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        rub_formatted = f"{rub_amount:,}".replace(",", " ")
        idr_formatted = f"{idr_amount:,}".replace(",", " ")
        
        button_text = f"üí∞ {rub_formatted} RUB | {idr_formatted} IDR | #{transaction_number}"
        callback_data = f"control_order_{transaction_number}"
        
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard_buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="control_cancel")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    base_text = (
        f"üü° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è:\n\n"
        f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {crm_number}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∑–∞—è–≤–∫–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∞—à–µ–º—É —á–µ–∫—É:")
    await state.set_state(ControlStates.waiting_for_order_selection)
    await state.update_data(crm_number=crm_number, original_message_id=message.message_id, owner_id=message.from_user.id, base_text=base_text)
    
    msg = await message.reply(
        base_text,
        reply_markup=keyboard
    )
    log_func("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∑–∞—è–≤–∫–∏")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∏ —É–±–∏—Ä–∞–µ–º –∏–∑ dict
    old_msg_id = active_control_message[message.chat.id]
    if old_msg_id and old_msg_id != msg.message_id:
        try:
            old_msg = await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=old_msg_id,
                text=base_text + "\n\n** ‚ÑπÔ∏è –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨ –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–û–ú ‚ÑπÔ∏è –í–´–ó–í–ê–ù–ê –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨**",
                reply_markup=None
            )
            log_func(f"–°–¥–µ–ª–∞–Ω–æ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ control: {old_msg_id}")
        except Exception as e:
            log_func(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {old_msg_id}: {e}")

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π message_id
    active_control_message[message.chat.id] = msg.message_id
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
    task = asyncio.create_task(expire_control_buttons(message.bot, message.chat.id, message.message_id + 1, 60, base_text=base_text))  # +1 –ø–æ—Ç–æ–º—É —á—Ç–æ reply
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–º–µ–Ω—ã
    await state.update_data(expire_task=task)

@router.message(Command("report"))
async def cmd_report(message: Message):
    """üü° –ö–æ–º–∞–Ω–¥–∞ report - –æ—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –≥—Ä—É–ø–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    log_user(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /report –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}")
    log_func(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /report")

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏
    if not db.pool:
        await message.reply("–û—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return
    async with db.pool.acquire() as conn:
        created_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'created'
            ORDER BY status_changed_at
        ''', str(chat_id))
        
        accept_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'accept'
            ORDER BY status_changed_at
        ''', str(chat_id))
        
        bill_rows = await conn.fetch('''
            SELECT transaction_number, rub_amount, idr_amount
            FROM "VSEPExchanger"."transactions"
            WHERE source_chat = $1 AND status = 'bill'
            ORDER BY status_changed_at
        ''', str(chat_id))

    col1 = 15
    col2 = 12
    col3 = 12
    # –í—Ä–µ–º—è
    times = get_bali_and_msk_time_list()
    dt_line = f"REPORT fromüïí {times[6]} (Bali) / {times[5]} (MSK)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    report_parts = []
    
    # 1. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º created
    header = f"<b>üìã CREATED</b>\n"
    header += f"–í—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –∑–∞—è–≤–∫–∏ —Å –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ (–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ —Ç–∞–π–º–∞—É—Ç—É):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(created_rows):<5}</code>\n"
    
    if created_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in created_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(created_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # 2. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept
    header = f"<b>üí∞ ACCEPT</b>\n"
    header += f"–û—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏\n"
    header += f"(–µ—â–µ <u>–Ω–µ –≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Å—á–µ—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</u>):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(accept_rows):<5}</code>\n"
    
    if accept_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in accept_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(accept_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # 3. –û—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º bill
    header = f"<b>‚ôªÔ∏è BILL</b>\n"
    header += f"–û—Ä–¥–µ—Ä–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏,\n–æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –ü–∞—Ä—Ç–Ω—ë—Ä—É\n"
    header += f"(<u>–≤–Ω–µ—Å–µ–Ω–Ω—ã–µ –≤ —Å—á–µ—Ç –Ω–∞ –≤—ã–ø–ª–∞—Ç—É</u>):\n"
    header += f"<blockquote expandable><code>{'–ù–æ–º–µ—Ä –æ—Ä–¥–µ—Ä–∞'.ljust(col1)}{'RUB'.rjust(col2)}{'IDR'.rjust(col3)}</code>\n"
    header += f"<code>{'-' * (col1 + col2 + col3)}</code>\n"
    header += f"<code>–í—Å–µ–≥–æ –æ—Ä–¥–µ—Ä–æ–≤: {len(bill_rows):<5}</code>\n"
    
    if bill_rows:
        lines = []
        total_rub = 0
        total_idr = 0
        for row in bill_rows:
            num = str(row['transaction_number'])
            rub = int(row['rub_amount']) if row['rub_amount'] else 0
            idr = int(row['idr_amount']) if row['idr_amount'] else 0
            lines.append(f"<code>{num.ljust(col1)}</code><code>{fmt_0(rub).rjust(col2)}{fmt_0(idr).rjust(col3)}</code>")
            total_rub += rub
            total_idr += idr
        table = header + '\n'.join(lines)
        table += f"\n<code>{'-'*(col1+col2+col3)}</code>"
        table += f"\n<code>–æ—Ä–¥–µ—Ä–æ–≤: {len(bill_rows):<5}{fmt_0(total_rub).rjust(col2)}{fmt_0(total_idr).rjust(col3)}</code></blockquote>"
    else:
        table = header + f"\n<code>{'–ù–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤'.center(col1+col2+col3)}</code></blockquote>"
    report_parts.append(table)

    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    final_report = dt_line + '\n\n' + '\n\n'.join(report_parts)
    final_report += f'''<i>>>> –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ä–¥–µ—Ä–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /order_show „Ää–Ω–æ–º–µ—Ä_–æ—Ä–¥–µ—Ä–∞„Äã
>>> –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞ –∫ –≤—ã–ø–ª–∞—Ç–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É „Ää–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç„Äã
<u>–í —Å—á–µ—Ç –≤–Ω–æ—Å—è—Ç—Å—è –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ `ACCEPT` –∏ `BILL`</u></i>'''

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    reply_markup = None
    if await is_admin_or_superadmin(user_id):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ä–¥–µ—Ä–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º accept –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞
        if accept_rows:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å—á–µ—Ç", 
                        callback_data=f"report_bill_{user_id}"
                    ),
                    InlineKeyboardButton(
                        text="–û—Ç–º–µ–Ω–∞", 
                        callback_data=f"report_cancel_{user_id}"
                    )
                ]
            ])
            reply_markup = keyboard

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await message.reply(final_report, parse_mode="HTML", reply_markup=reply_markup)

@router.message(Command("report_vsep"))
async def cmd_report_vsep(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞/—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ –∏ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤
    if str(message.chat.id) != str(config.ADMIN_GROUP):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
    calendar = MonthYearCalendar()
    current_year = datetime.now().year
    keyboard = calendar.create_month_year_keyboard(current_year)
    
    await state.set_state(VsepReportStates.waiting_for_month)
    await message.reply(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥ –¥–ª—è –æ—Ç—á—ë—Ç–∞:",
        reply_markup=keyboard
    )

@router.message(VsepReportStates.waiting_for_month)
async def report_vsep_month_input(message: Message, state: FSMContext):
    if str(message.chat.id) != str(config.ADMIN_GROUP):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.")
        await state.clear()
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
        await state.clear()
        return
    month = message.text.strip()
    await state.update_data(selected_month=month)
    await state.set_state(VsepReportStates.waiting_for_rate)
    await message.reply(
        "üí± –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å IDR –∫ USDT –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16000)",
        parse_mode="HTML"
    )

@router.message(VsepReportStates.waiting_for_rate)
async def report_vsep_rate_input(message: Message, state: FSMContext):
    if str(message.chat.id) != str(config.ADMIN_GROUP):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.")
        await state.clear()
        return
    if not await is_admin_or_superadmin(message.from_user.id):
        await message.reply("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.")
        await state.clear()
        return
    rate_text = message.text.strip().replace(",", ".")
    try:
        rate = float(rate_text)
        if rate <= 0:
            raise ValueError
    except Exception:
        await message.reply("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16000)")
        return
    data = await state.get_data()
    month = data.get("selected_month")
    await message.reply(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ <b>{month}</b> –ø–æ –∫—É—Ä—Å—É <b>{rate}</b>...", parse_mode="HTML")
    try:
        report_data = await asyncio.get_event_loop().run_in_executor(None, read_sum_all_report, month)
        print(f"[DEBUG] report_data: {report_data}")
        if not report_data:
            await message.reply(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month} –Ω–∞ –ª–∏—Å—Ç–µ SUM_ALL.")
            await state.clear()
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á—ë—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
        lines = []
        total_turnover = {}
        total_commission = {}
        import re
        def parse_num(val, currency):
            if not val:
                return 0.0
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ (–¥–ª—è –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö —á–∏—Å–µ–ª)
            val = re.sub(r",", ".", str(val))
            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã (–≤–∫–ª—é—á–∞—è –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ)
            val = re.sub(r"\s", "", val)
            if currency:
                val = val.replace(currency, "")
            try:
                return float(val)
            except Exception:
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±–æ–µ —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫–µ
                m = re.search(r"([\d.]+)", val)
                return float(m.group(1)) if m else 0.0
        for row in report_data:
            name = row['project']
            count = row['count']
            turnover = row['turnover']
            commission = row['commission']
            percent = row['commission_percent']
            currency = row['currency']
            comm_currency = row['commission_currency']
            # –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            if not currency:
                if 'SAL' in name.upper():
                    currency = 'USDT'
                else:
                    currency = 'IDR'
            if not comm_currency:
                comm_currency = currency
            tval = parse_num(turnover, currency)
            cval = parse_num(commission, comm_currency)
            print(f"[DEBUG] {name}: –æ–±–æ—Ä–æ—Ç={tval} {currency}, –∫–æ–º–∏—Å—Å–∏—è={cval} {comm_currency}")
            total_turnover[currency] = total_turnover.get(currency, 0) + tval
            total_commission[comm_currency] = total_commission.get(comm_currency, 0) + cval
            # –§–æ—Ä–º–∞—Ç –±–ª–æ–∫–∞ –ø–æ –ø—Ä–æ–µ–∫—Ç—É
            lines.append(f"<b>{name}</b>\n–ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: <b>{count}</b>\n–û–±–æ—Ä–æ—Ç: <b>{turnover}</b>\n–£—á–∞—Å—Ç–∏–µ: <b>{commission}</b> (<code>{percent}</code>)\n")
        print(f"[DEBUG] total_turnover: {total_turnover}")
        print(f"[DEBUG] total_commission: {total_commission}")
        # –ò—Ç–æ–≥–∏ –ø–æ –≤–∞–ª—é—Ç–∞–º
        lines.append("<b>–ò—Ç–æ–≥: –û–±–æ—Ä–æ—Ç</b>")
        for cur, val in total_turnover.items():
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Å—Ç–∏–ª–µ: –ø—Ä–æ–±–µ–ª—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ
            formatted = f"{val:,.2f}".replace(",", " ").replace(".", ",")
            lines.append(f"<b>{formatted} {cur}</b>")
        lines.append("\n<b>–ò—Ç–æ–≥: –£—á–∞—Å—Ç–∏–µ</b>")
        for cur, val in total_commission.items():
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Å—Ç–∏–ª–µ: –ø—Ä–æ–±–µ–ª—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ —Ç—ã—Å—è—á, –∑–∞–ø—è—Ç—ã–µ –∫–∞–∫ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ
            formatted = f"{val:,.2f}".replace(",", " ").replace(".", ",")
            lines.append(f"<b>{formatted} {cur}</b>")
        # –ü–µ—Ä–µ—Å—á—ë—Ç –≤ USDT
        idr_total = total_turnover.get('IDR', 0)
        idr_comm = total_commission.get('IDR', 0)
        usdt_total = total_turnover.get('USDT', 0)
        usdt_comm = total_commission.get('USDT', 0)
        usdt_total_sum = usdt_total + (idr_total / rate if rate else 0)
        usdt_comm_sum = usdt_comm + (idr_comm / rate if rate else 0)
        lines.append(f"\n<b>–ü–µ—Ä–µ—Å—á—ë—Ç –ø–æ –∫—É—Ä—Å—É {rate:,.2f}:</b>")
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–º —Å—Ç–∏–ª–µ
        usdt_total_formatted = f"{usdt_total_sum:,.2f}".replace(",", " ").replace(".", ",")
        usdt_comm_formatted = f"{usdt_comm_sum:,.2f}".replace(",", " ").replace(".", ",")
        lines.append(f"–û–±–æ—Ä–æ—Ç –≤ USDT: <b>{usdt_total_formatted}</b>")
        lines.append(f"–£—á–∞—Å—Ç–∏–µ –≤ USDT: <b>{usdt_comm_formatted}</b>")
        report_text = '\n'.join(lines)
        await message.reply(report_text, parse_mode="HTML")
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
    await state.clear()

@router.callback_query(lambda c: c.data.startswith("use_bybit_rate_") or c.data == "enter_rate_manually")
async def report_vsep_bybit_rate_choice(call: CallbackQuery, state: FSMContext):
    if str(call.message.chat.id) != str(config.ADMIN_GROUP):
        await call.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.", show_alert=True)
        await state.clear()
        return
    if not await is_admin_or_superadmin(call.from_user.id):
        await call.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.", show_alert=True)
        await state.clear()
        return
    data = await state.get_data()
    month = data.get("selected_month")
    if call.data.startswith("use_bybit_rate_"):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É—Ä—Å Bybit
        rate = float(call.data.split("_")[-1])
        await call.message.edit_text(f"‚è≥ –§–æ—Ä–º–∏—Ä—É—é –æ—Ç—á—ë—Ç –∑–∞ <b>{month}</b> –ø–æ –∫—É—Ä—Å—É <b>{rate:,.2f}</b>...", parse_mode="HTML")
        # –î—É–±–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ report_vsep_rate_input
        try:
            report_data = await asyncio.get_event_loop().run_in_executor(None, read_sum_all_report, month)
            print(f"[DEBUG] report_data: {report_data}")
            if not report_data:
                await call.message.reply(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ {month} –Ω–∞ –ª–∏—Å—Ç–µ SUM_ALL.")
                await state.clear()
                return
            # ... (–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á—ë—Ç–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            # --- –ö–û–ü–ò–†–£–ï–ú –ë–õ–û–ö –§–û–†–ú–ò–†–û–í–ê–ù–ò–Ø –û–¢–ß–Å–¢–ê –∏–∑ report_vsep_rate_input ---
            lines = []
            total_turnover = {}
            total_commission = {}
            import re
            def parse_num(val, currency):
                if not val:
                    return 0.0
                val = re.sub(r",", ".", str(val))
                val = re.sub(r"\s", "", val)
                if currency:
                    val = val.replace(currency, "")
                try:
                    return float(val)
                except Exception:
                    m = re.search(r"([\d.]+)", val)
                    return float(m.group(1)) if m else 0.0
            for row in report_data:
                name = row['project']
                count = row['count']
                turnover = row['turnover']
                commission = row['commission']
                percent = row['commission_percent']
                currency = row['currency']
                comm_currency = row['commission_currency']
                if not currency:
                    if 'SAL' in name.upper():
                        currency = 'USDT'
                    else:
                        currency = 'IDR'
                if not comm_currency:
                    comm_currency = currency
                tval = parse_num(turnover, currency)
                cval = parse_num(commission, comm_currency)
                print(f"[DEBUG] {name}: –æ–±–æ—Ä–æ—Ç={tval} {currency}, –∫–æ–º–∏—Å—Å–∏—è={cval} {comm_currency}")
                total_turnover[currency] = total_turnover.get(currency, 0) + tval
                total_commission[comm_currency] = total_commission.get(comm_currency, 0) + cval
                lines.append(f"<b>{name}</b>\n–ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫: <b>{count}</b>\n–û–±–æ—Ä–æ—Ç: <b>{turnover}</b>\n–£—á–∞—Å—Ç–∏–µ: <b>{commission}</b> (<code>{percent}</code>)\n")
            print(f"[DEBUG] total_turnover: {total_turnover}")
            print(f"[DEBUG] total_commission: {total_commission}")
            lines.append("<b>–ò—Ç–æ–≥: –û–±–æ—Ä–æ—Ç</b>")
            for cur, val in total_turnover.items():
                formatted = f"{val:,.2f}".replace(",", " ").replace(".", ",")
                lines.append(f"<b>{formatted} {cur}</b>")
            lines.append("\n<b>–ò—Ç–æ–≥: –£—á–∞—Å—Ç–∏–µ</b>")
            for cur, val in total_commission.items():
                formatted = f"{val:,.2f}".replace(",", " ").replace(".", ",")
                lines.append(f"<b>{formatted} {cur}</b>")
            idr_total = total_turnover.get('IDR', 0)
            idr_comm = total_commission.get('IDR', 0)
            usdt_total = total_turnover.get('USDT', 0)
            usdt_comm = total_commission.get('USDT', 0)
            usdt_total_sum = usdt_total + (idr_total / rate if rate else 0)
            usdt_comm_sum = usdt_comm + (idr_comm / rate if rate else 0)
            lines.append(f"\n<b>–ü–µ—Ä–µ—Å—á—ë—Ç –ø–æ –∫—É—Ä—Å—É {rate:,.2f}:</b>")
            usdt_total_formatted = f"{usdt_total_sum:,.2f}".replace(",", " ").replace(".", ",")
            usdt_comm_formatted = f"{usdt_comm_sum:,.2f}".replace(",", " ").replace(".", ",")
            lines.append(f"–ò—Ç–æ–≥ –æ–±–æ—Ä–æ—Ç –≤ USDT: <b>{usdt_total_formatted}</b>")
            lines.append(f"–ò—Ç–æ–≥ —É—á–∞—Å—Ç–∏–µ –≤ USDT: <b>{usdt_comm_formatted}</b>")
            report_text = '\n'.join(lines)
            await call.message.reply(report_text, parse_mode="HTML")
        except Exception as e:
            await call.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
        await state.clear()
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≤–≤–µ—Å—Ç–∏ –∫—É—Ä—Å –≤—Ä—É—á–Ω—É—é
        await call.message.edit_text(
            "üí± –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å IDR –∫ USDT –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16000)",
            parse_mode="HTML"
        )
        await state.set_state(VsepReportStates.waiting_for_rate)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    print("[DEBUG] register_handlers: –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(router)
    print("[DEBUG] register_handlers: –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(bank_router)
    print("[DEBUG] register_handlers: –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã accept
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é accept —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(accept_router)
    print("[DEBUG] register_handlers: accept —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã joke
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é joke —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(joke_router)
    print("[DEBUG] register_handlers: joke —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã dice
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é dice —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(dice_router)
    print("[DEBUG] register_handlers: dice —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã coin
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é coin —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(coin_router)
    print("[DEBUG] register_handlers: coin —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã meme
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é meme —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(meme_router)
    print("[DEBUG] register_handlers: meme —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã order_change
    print("[DEBUG] register_handlers: –ø–æ–¥–∫–ª—é—á–∞—é order_change —Ä–æ—É—Ç–µ—Ä")
    dp.include_router(order_change_router)
    print("[DEBUG] register_handlers: order_change —Ä–æ—É—Ç–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    dp.callback_query.register(force_open_callback, lambda c: c.data in ["force_open_yes", "force_open_no"])
    dp.callback_query.register(force_close_callback, lambda c: c.data in ["force_close_yes", "force_close_no"])
    dp.callback_query.register(admin_add_confirm_callback, F.data.startswith("admin_add_confirm:"))
    dp.callback_query.register(admin_add_cancel_callback, F.data.startswith("admin_add_cancel:"))
    dp.callback_query.register(admin_remove_confirm_callback, F.data.startswith("admin_remove_confirm:"))
    dp.callback_query.register(admin_remove_cancel_callback, F.data.startswith("admin_remove_cancel:"))
    dp.callback_query.register(operator_add_confirm_callback, F.data.startswith("operator_add_confirm:"))
    dp.callback_query.register(operator_add_cancel_callback, F.data.startswith("operator_add_cancel:"))
    dp.callback_query.register(operator_remove_confirm_callback, F.data.startswith("operator_remove_confirm:"))
    dp.callback_query.register(operator_remove_cancel_callback, F.data.startswith("operator_remove_cancel:"))
    dp.callback_query.register(rate_change_confirm, F.data=="rate_change_confirm")
    dp.callback_query.register(rate_change_cancel, F.data=="rate_change_cancel")
    dp.callback_query.register(report_callback_handler, F.data.regexp(r"^report_(bill|cancel)_"))
    dp.callback_query.register(control_callback_handler, F.data.startswith("control_"))
    dp.callback_query.register(zombie_callback_handler, F.data.startswith("zombie_"))
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    dp.message.register(handle_input_sum, lambda m: m.text and m.text.strip().startswith("/") and (m.text[1:].isdigit() or (m.text[1:].startswith("-") and m.text[2:].isdigit())))
    
    print("[DEBUG] register_handlers: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

async def _toggle_info_flag(message: Message, flag_name: str, chat_type: str):
    """(Superadmin) –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞."""
    user = message.from_user
    chat_id = message.chat.id

    logger.info(f"[{flag_name.upper()}] –ö–æ–º–∞–Ω–¥–∞ /toggle_info_{chat_type.lower()} –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} (@{user.username}) –≤ —á–∞—Ç–µ {chat_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ (—Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω)
    if not await is_superadmin(user.id):
        logger.warning(f"[{flag_name.upper()}] –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return

    logger.info(f"[{flag_name.upper()}] –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        new_state = await db.toggle_system_setting(flag_name)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø–∞–º—è—Ç–∏
        await system_settings.load()
        
        status_text = "–≤–∫–ª—é—á–µ–Ω ‚úÖ" if new_state else "–≤—ã–∫–ª—é—á–µ–Ω ‚ùå"
        response_text = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —á–∞—Ç–∞ {chat_type} —É—Å–ø–µ—à–Ω–æ {status_text}"
        
        await message.reply(response_text)
        logger.info(f"[{flag_name.upper()}] –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_state} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

    except Exception as e:
        logger.error(f"[{flag_name.upper()}] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")


@router.message(Command("toggle_info_mbt"))
async def cmd_toggle_info_mbt(message: Message):
    """(Superadmin) –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è MBT"""
    await _toggle_info_flag(message, "send_info_mbt", "MBT")

@router.message(Command("toggle_info_lgi"))
async def cmd_toggle_info_lgi(message: Message):
    """(Superadmin) –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è LGI"""
    await _toggle_info_flag(message, "send_info_lgi", "LGI")

@router.message(Command("toggle_info_tct"))
async def cmd_toggle_info_tct(message: Message):
    """(Superadmin) –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è TCT"""
    await _toggle_info_flag(message, "send_info_tct", "TCT")

async def expire_control_buttons(bot: Bot, chat_id: int, message_id: int, delay_seconds: int, base_text: str = ""):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ control —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    await asyncio.sleep(delay_seconds)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º base_text –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç
        if not base_text:
            base_text = "üü° –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è:\n\nüìù –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ...\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∑–∞—è–≤–∫–æ–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –≤–∞—à–µ–º—É —á–µ–∫—É:"
        base_text = str(base_text)
        new_text = base_text + "\n\n** ‚ÑπÔ∏è –ö–û–ú–ê–ù–î–ê –ö–û–ù–¢–†–û–õ–¨ –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê –ú–ï–ù–ï–î–ñ–ï–†–û–ú ‚ÑπÔ∏è –°–†–û–ö –ñ–ò–ó–ù–ò –ö–ù–û–ü–û–ö –ó–ê–ö–û–ù–ß–ò–õ–°–Ø**"
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=new_text,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏
        )
        # –û—á–∏—â–∞–µ–º message_id
        active_control_message[chat_id] = None
        
        log_func(f"–ö–Ω–æ–ø–∫–∏ control –∏—Å—Ç–µ–∫–ª–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id} –≤ —á–∞—Ç–µ {chat_id}")
        
    except Exception as e:
        error_msg = str(e).lower()
        if "message to edit not found" in error_msg or "message not found" in error_msg:
            log_func(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        else:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ control: {e}")

# === CALLBACK HANDLER –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ü—Ä–∏–Ω—è—Ç—å ===
@router.callback_query(lambda c: c.data.startswith("accept_order_"))
async def accept_order_callback(call: CallbackQuery, state: FSMContext):
    transaction_number = call.data.split("_")[-1]
    user_id = call.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    user_rank = await db.get_user_rank(user_id)
    if user_rank not in ("operator", "admin", "superadmin"):
        await call.answer("–¢–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä –∏ –∞–¥–º–∏–Ω –°–µ—Ä–≤–∏—Å–∞ –º–æ–≥—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!", show_alert=True)
        return
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
    transaction = await db.get_transaction_by_number(transaction_number)
    if not transaction:
        await call.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    if transaction.get('status') != "control":
        await call.answer(f"–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ (—Å—Ç–∞—Ç—É—Å: {transaction.get('status')})", show_alert=True)
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∏—Å—Ç–æ—Ä–∏—é
    from datetime import datetime, timezone
    now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
    await db.update_transaction_status(transaction_number, "accept", now_utc)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –≤ history
    now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
    user_nick = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Å—ã–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏
    msg_id = call.message.message_id
    chat_id = call.message.chat.id
    if call.message.chat.username:
        link_accept = f"https://t.me/{call.message.chat.username}/{msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link_accept = f"https://t.me/c/{chat_id_num}/{msg_id}"
    accept_entry = f"{now_str}${user_nick}$accept${link_accept}"
    old_history = transaction.get('history', '')
    history = old_history + "%%%" + accept_entry if old_history else accept_entry
    await db.update_transaction_history(transaction_number, history)
    
    # --- –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è ---
    counter = await db.get_control_counter(chat_id)
    if counter > 0:
        await db.set_control_counter(chat_id, counter - 1)
        from logger import log_func, log_db
        key = f"{chat_id}_control_counter"
        log_func(f"–°—á–µ—Ç—á–∏–∫ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–ª—è —á–∞—Ç–∞ {chat_id} (–∫–ª—é—á: {key}) —É–º–µ–Ω—å—à–µ–Ω: {counter} -> {counter-1}")
        log_db(f"[DB] set_system_setting: {key} = {counter-1}")
    
    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–∫—Ç–∏–≤–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
    operator_name = call.from_user.full_name
    operator_username = f"@{call.from_user.username}" if call.from_user.username else ""
    operator_info = f"{operator_username}".strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    rub_amount = int(transaction['rub_amount']) if transaction['rub_amount'] else 0
    idr_amount = int(transaction['idr_amount']) if transaction['idr_amount'] else 0
    rub_formatted = f"{rub_amount:,}".replace(",", " ")
    idr_formatted = f"{idr_amount:,}".replace(",", " ")
    
    notification_text = (
        f"‚úÖ **–¢–†–ê–ù–ó–ê–ö–¶–ò–Ø –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê!**\n\n"
        f"‚Ä¢ –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>{transaction_number}</code>\n"
        f"‚Ä¢ –°—É–º–º–∞: {rub_formatted} RUB | {idr_formatted} IDR\n"
        f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª: {operator_info}\n"
        f"‚Ä¢ –í—Ä–µ–º—è: {now_str}\n\n"
        f"üîµ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏: <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê</b>"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    notification_msg = await call.message.answer(notification_text, parse_mode="HTML")
    notification_msg_id = notification_msg.message_id
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if call.message.chat.username:
        link_to_notification = f"https://t.me/{call.message.chat.username}/{notification_msg_id}"
    else:
        chat_id_num = str(chat_id)
        if chat_id_num.startswith('-100'):
            chat_id_num = chat_id_num[4:]
        elif chat_id_num.startswith('-'):
            chat_id_num = chat_id_num[1:]
        link_to_notification = f"https://t.me/c/{chat_id_num}/{notification_msg_id}"
    
    # –°–æ–∑–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    active_link_text = f"‚úÖ <a href=\"{link_to_notification}\">–ó–∞—è–≤–∫–∞ –±—ã–ª–∞ –∞–∫—Ü–µ–ø—Ç–æ–≤–∞–Ω–∞</a>"
    
    new_text = call.message.text + f"\n\n{active_link_text}"
    await call.message.edit_text(new_text, reply_markup=None, parse_mode="HTML")
    await call.answer("–ó–∞—è–≤–∫–∞ –∞–∫—Ü–µ–ø—Ç–æ–≤–∞–Ω–∞!")

# === –ö–û–ú–ê–ù–î–ê –†–ï–ê–ù–ò–ú–ê–¶–ò–ò –ó–ê–Ø–í–û–ö ===
@router.message(Command("zombie"))
async def cmd_zombie(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫ –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ timeout –≤ created"""
    args = message.text.split()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∫–æ–º–∞–Ω–¥—ã
    if len(args) < 2:
        await message.reply(
            "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            "–ü–†–ò–ß–ò–ù–ê: –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏.\n\n"
            "üìù <b>–û–±—Ä–∞–∑–µ—Ü –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "<code>/zombie 2506123456789</code>"
        )
        return
    
    transaction_number = args[1].strip()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_rank = await db.get_user_rank(message.from_user.id)
    if user_rank not in ("operator", "admin", "superadmin"):
        await message.reply("üö´ –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n–ü–†–ò–ß–ò–ù–ê: –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É, –∞–¥–º–∏–Ω—É –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω—É.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É –∏–∑ –±–∞–∑—ã
    transaction = await db.get_transaction_by_number(transaction_number)
    if not transaction:
        await message.reply(
            "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            "–ü–†–ò–ß–ò–ù–ê: –∑–∞—è–≤–∫–∞ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
    if transaction.get('status') != "timeout":
        await message.reply(
            f"‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.\n"
            f"–ü–†–ò–ß–ò–ù–ê: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ <b>'{transaction.get('status')}'</b> –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏.\n"
            f"–†–µ–∞–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞—è–≤–æ–∫ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º <b>timeout</b>."
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
    rub_amount = int(transaction['rub_amount']) if transaction['rub_amount'] else 0
    idr_amount = int(transaction['idr_amount']) if transaction['idr_amount'] else 0
    rub_formatted = f"{rub_amount:,}".replace(",", " ")
    idr_formatted = f"{idr_amount:,}".replace(",", " ")
    created_at = transaction.get('created_at')
    created_date = created_at.strftime("%d.%m.%Y") if created_at else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    account_info = transaction.get('account_info', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = (
        f"üßü‚Äç‚ôÇÔ∏è <b>–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –†–ï–ê–ù–ò–ú–ê–¶–ò–ò –ó–ê–Ø–í–ö–ò</b>\n\n"
        f"‚Ä¢ <b>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</b> <code>{transaction_number}</code>\n"
        f"‚Ä¢ <b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> {created_date}\n"
        f"‚Ä¢ <b>–°—É–º–º–∞:</b> {rub_formatted} RUB ({idr_formatted} IDR)\n"
        f"‚Ä¢ <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b> {account_info}\n\n"
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —ç—Ç—É –∑–∞—è–≤–∫—É –∏–∑ —Å—Ç–∞—Ç—É—Å–∞ <i>timeout</i> –≤ —Å—Ç–∞—Ç—É—Å <i>created</i></b>\n\n"
        f"üë§ <b>–û–ø–µ—Ä–∞—Ç–æ—Ä:</b> {message.from_user.full_name}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üßü‚Äç‚ôÇÔ∏è –î–∞, –æ–∂–∏–≤–∏—Ç—å", 
                    callback_data=f"zombie_confirm_{transaction_number}_{message.from_user.id}"
                ),
                InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∞", 
                    callback_data=f"zombie_cancel_{message.from_user.id}"
                )
            ]
        ]
    )
    
    await message.reply(confirm_text, reply_markup=keyboard, parse_mode="HTML")

# === CALLBACK HANDLER –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏ ===
@router.callback_query(lambda c: c.data.startswith("zombie_"))
async def zombie_callback_handler(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Ä–µ–∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞—è–≤–æ–∫"""
    data_parts = call.data.split("_")
    action = data_parts[1]  # confirm –∏–ª–∏ cancel
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    user_rank = await db.get_user_rank(user_id)
    if user_rank not in ("operator", "admin", "superadmin"):
        await call.answer("üö´ –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
        return
    
    if action == "cancel":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–º–µ–Ω—è–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        callback_user_id = int(data_parts[2])
        if user_id != callback_user_id:
            await call.answer("üö´ –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
            return
        
        await call.message.edit_text(
            call.message.text + "\n\n‚ùå <b>–†–µ–∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
            parse_mode="HTML"
        )
        await call.answer("–†–µ–∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    elif action == "confirm":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ç–æ—Ç –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        callback_user_id = int(data_parts[3])
        if user_id != callback_user_id:
            await call.answer("üö´ –ù–µ –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞!", show_alert=True)
            return
        
        transaction_number = data_parts[2]
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        transaction = await db.get_transaction_by_number(transaction_number)
        if not transaction:
            await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        if transaction.get('status') != "timeout":
            await call.answer("‚ùå –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è!", show_alert=True)
            return
        
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏
            from datetime import datetime, timezone
            now_utc = datetime.now(timezone.utc).replace(tzinfo=None)
            await db.update_transaction_status(transaction_number, "created", now_utc)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            now_str = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
            user_nick = f"@{call.from_user.username}" if call.from_user.username else call.from_user.full_name
            chat_id = call.message.chat.id
            msg_id = call.message.message_id
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if call.message.chat.username:
                link = f"https://t.me/{call.message.chat.username}/{msg_id}"
            else:
                chat_id_num = str(chat_id)
                if chat_id_num.startswith('-100'):
                    chat_id_num = chat_id_num[4:]
                elif chat_id_num.startswith('-'):
                    chat_id_num = chat_id_num[1:]
                link = f"https://t.me/c/{chat_id_num}/{msg_id}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
            zombie_entry = f"{now_str}${user_nick}$—Ä–µ–∞–Ω–∏–º–∞—Ü–∏—è${link}"
            old_history = transaction.get('history', '')
            history = old_history + "%%%" + zombie_entry if old_history else zombie_entry
            await db.update_transaction_history(transaction_number, history)
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
            rub_amount = int(transaction['rub_amount']) if transaction['rub_amount'] else 0
            idr_amount = int(transaction['idr_amount']) if transaction['idr_amount'] else 0
            rub_formatted = f"{rub_amount:,}".replace(",", " ")
            idr_formatted = f"{idr_amount:,}".replace(",", " ")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success_text = (
                f"üëª <b>–ó–ê–Ø–í–ö–ê –û–ñ–ò–í–õ–ï–ù–ê!</b>\n\n"
                f"üìã <b></b> <code>{transaction_number}</code>\n"
                f"üí∞ <b>–°—É–º–º–∞:</b> {rub_formatted} RUB ({idr_formatted} IDR)\n"
                f"üë§ <b>–û–∂–∏–≤–∏–ª:</b> {user_nick}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {now_str}\n\n"
                f"üîÑ <b>–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –∏–∑–º–µ–Ω–µ–Ω:</b> ‚ö´<i>timeout</i> ‚Üí ‚ö™<b>created</b>"
            )
            
            await call.message.edit_text(success_text, parse_mode="HTML")
            await call.answer("üëª –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–∂–∏–≤–ª–µ–Ω–∞!")
            
            log_func(f"–ó–∞—è–≤–∫–∞ {transaction_number} –æ–∂–∏–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} ({user_nick})")
            
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ {transaction_number}: {e}")
            await call.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–≤–ª–µ–Ω–∏–∏!", show_alert=True)
            return

# === –ö–û–ú–ê–ù–î–ê –ê–ù–ï–ö–î–û–¢–û–í ===
@router.message(Command("joke"))
async def cmd_joke(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞"""
    try:
        log_func(f"–ó–∞–ø—Ä–æ—Å –∞–Ω–µ–∫–¥–æ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        loading_msg = await message.reply("üé≠ –ò—â—É –¥–ª—è –≤–∞—Å –∞–Ω–µ–∫–¥–æ—Ç...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        joke_data = await get_joke_with_source()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        joke_text = joke_data["joke"]
        source = joke_data["source"]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∞–Ω–µ–∫–¥–æ—Ç–∞
        if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in joke_text.lower():
            emoji = "üíª"
        elif "git" in joke_text.lower() or "python" in joke_text.lower():
            emoji = "üêç"
        else:
            emoji = "üòÑ"
        
        response_text = (
            f"{emoji} <b>–ê–Ω–µ–∫–¥–æ—Ç:</b>\n\n"
            f"<i>{joke_text}</i>\n\n"
            f"üì° <i>–ò—Å—Ç–æ—á–Ω–∏–∫: {source}</i>"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–µ–∫–¥–æ—Ç–æ–º
        await loading_msg.edit_text(response_text, parse_mode="HTML")
        
        log_func(f"–ê–Ω–µ–∫–¥–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
        
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}")
        error_text = (
            "üòÖ <b>–£–ø—Å!</b>\n\n"
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π! üòÑ"
        )
        
        if 'loading_msg' in locals():
            await loading_msg.edit_text(error_text, parse_mode="HTML")
        else:
            await message.reply(error_text, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞
@router.callback_query(lambda c: c.data.startswith("my_"))
async def month_year_calendar_callback(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞/–≥–æ–¥–∞"""
    if str(call.message.chat.id) != str(config.ADMIN_GROUP):
        await call.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–æ–≤.", show_alert=True)
        await state.clear()
        return
    if not await is_admin_or_superadmin(call.from_user.id):
        await call.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞ –∏ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞.", show_alert=True)
        await state.clear()
        return
    
    calendar = MonthYearCalendar()
    selected, data = calendar.process_selection(call.data)
    
    if data.get("action") == "cancel":
        await call.message.edit_text("‚ùå –í—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –æ—Ç–º–µ–Ω—ë–Ω.")
        await state.clear()
        return
    
    if selected and data.get("month"):
        # –ú–µ—Å—è—Ü –≤—ã–±—Ä–∞–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        year = data["year"]
        month = data["month"]
        months_short = calendar.months_short['ru_RU']
        month_name = months_short[month - 1]
        month_str = f"{month_name}{year}"
        await state.update_data(selected_month=month_str)
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å Bybit P2P
        try:
            rate = await get_p2p_idr_usdt_avg_rate()
            if rate and rate > 0:
                rate_str = f"{rate:,.2f}".replace(",", " ").replace(".", ",")
                text = (
                    f"üìÖ –í—ã–±—Ä–∞–Ω: <b>{calendar.months['ru_RU'][month-1]} {year}</b>\n\n"
                    f"üí± –ö—É—Ä—Å IDR‚ÜíUSDT —Å Bybit P2P: <b>{rate_str}</b>\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫—É—Ä—Å?"
                )
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"use_bybit_rate_{rate}"),
                        InlineKeyboardButton(text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data="enter_rate_manually")
                    ]
                ])
                await call.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)
                await state.set_state(VsepReportStates.waiting_for_rate)
                return
        except Exception as e:
            print(f"[BYBIT P2P ERROR] {e}")
        await state.set_state(VsepReportStates.waiting_for_rate)
        await call.message.edit_text(
            f"üìÖ –í—ã–±—Ä–∞–Ω: <b>{calendar.months['ru_RU'][month-1]} {year}</b>\n\n"
            f"üí± –í–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å IDR –∫ USDT –¥–ª—è –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –∏—Ç–æ–≥–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16000)",
            parse_mode="HTML"
        )
    else:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å –Ω–æ–≤—ã–º –≥–æ–¥–æ–º
        year = data.get("year", datetime.now().year)
        keyboard = calendar.create_month_year_keyboard(year)
        await call.message.edit_reply_markup(reply_markup=keyboard)
